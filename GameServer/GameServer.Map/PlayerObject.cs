using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WindowsFormsApp8;

using GameServer.Database;
using GameServer.Template;
using GameServer.Networking;
using GameServer.Skill;

using GamePackets;
using GamePackets.Client;
using GamePackets.Server;

namespace GameServer.Map;

public sealed class PlayerObject : MapObject
{
    public CharacterInfo Character;

    public InscriptionSkill 洗练铭文;

    public TradingObject CurrentTrade;

    public StallObject CurrentStall;

    public byte 雕色部位;

    public byte 重铸部位;

    public int CurrentNPCDialoguePage;

    public GuardObject CurrentNPC;

    public DateTime CurrentNPCTalkTime;

    public static MonsterObject 魔虫窟怪物;
    public static MonsterObject 九层妖塔精英1;
    public static MonsterObject 九层妖塔精英2;
    public static MonsterObject 九层妖塔精英3;
    public static MonsterObject 九层妖塔精英4;
    public static MonsterObject 九层妖塔精英5;
    public static MonsterObject 九层妖塔精英6;
    public static MonsterObject 九层妖塔精英7;
    public static MonsterObject 九层妖塔精英8;
    public static MonsterObject 九层妖塔精英9;
    public static MonsterObject 九层妖塔BOSS1;
    public static MonsterObject 九层妖塔BOSS2;
    public static MonsterObject 九层妖塔BOSS3;
    public static MonsterObject 九层妖塔BOSS4;
    public static MonsterObject 九层妖塔BOSS5;
    public static MonsterObject 九层妖塔BOSS6;
    public static MonsterObject 九层妖塔BOSS7;
    public static MonsterObject 九层妖塔BOSS8;
    public static MonsterObject 九层妖塔BOSS9;

    public int CurrentStoreID;
    public string CurrentStoreNameID;

    public int HealthRestoreCount;
    public int ManaRestoreCount;
    public int HealthRegenAmount;
    public int ManaRegenAmount;

    public DateTime MailTime;
    public DateTime HealthRegenTime;
    public DateTime ManaRegenTime;
    public DateTime TitleTime;
    public DateTime PrivilegeTime;
    public DateTime PickUpTime;
    public DateTime NPC间隔;
    public DateTime TeamTime;
    public DateTime BattleEquipmentTime;
    public DateTime 回击计时;
    public DateTime ExperienceTime;
    public DateTime RoamTime;
    public DateTime 充值发放;
    public DateTime 自动刷新背包时间;
    public DateTime VIPRewardTime;

    public List<ItemInfo> SoldItems;

    public List<PetObject> Pets;

    public Dictionary<object, int> CombatPowerBonus;

    public readonly Dictionary<ushort, SkillInfo> 被动技能;

    public GameSkill 挂机技能;

    public Dictionary<挂机技能序列, int> 挂机技能框架 = new Dictionary<挂机技能序列, int>();

    public short 无效状态;

    public HateObject Target;

    public List<GameSkill> 待使用技能 = new List<GameSkill>();

    public GameSkill 检测蓄力技能;

    public int 玩家自动攻击次数;

    public int 判断次数;

    public int 漫游次数;

    public Dictionary<挂机特殊分类, MapObject> 挂机参数 = new Dictionary<挂机特殊分类, MapObject>();

    public bool ProtectionRing { get; set; }

    public bool HasProtectionRing
    {
        get { return ProtectionRing; }
        set
        {
            if (value)
            {
                ProtectionRing = value;
                AddBuff(47340, this);
            }
            else
            {
                ProtectionRing = false;
                RemoveBuffEx(47340);
            }
        }
    }

    public byte ProtectionRingLocation
    {
        get
        {
            foreach (var item in Equipment.Values)
            {
                if (string.Equals(item.Name, "ProtectionRing", StringComparison.OrdinalIgnoreCase))
                    return item.Position;
            }
            return 0;
        }
    }

    public bool ParalysisRing { get; set; }

    private bool ResurrectionRing { get; set; }

    public bool HasResurrectionRing
    {
        get { return ResurrectionRing; }
        set
        {
            if (value)
            {
                ResurrectionRing = true;
                AddBuff(47390, this);
            }
            else
            {
                ResurrectionRing = false;
                RemoveBuff(47390);
            }
        }
    }

    private bool ResurrectionRingReady { get; set; }

    public byte ResurrectionRingLocation
    {
        get
        {
            foreach (var item in Equipment.Values)
            {
                if (string.Equals(item.Name, "ResurrectionRing", StringComparison.OrdinalIgnoreCase))
                    return item.Position;
            }
            return 0;
        }
    }

    public int ResurrectionRingDura
    {
        get
        {
            if (HasResurrectionRing && Equipment.TryGetValue(ResurrectionRingLocation, out var v))
                return v.Dura.V;
            return -1;
        }
    }

    public bool 沃玛分解开关 { get; set; }

    public bool 祖玛分解开关 { get; set; }

    public bool 赤月分解开关 { get; set; }

    public bool 魔龙分解开关 { get; set; }

    public bool 苍月分解开关 { get; set; }

    public bool 星王分解开关 { get; set; }

    public bool 神秘分解开关 { get; set; }

    public bool 其他分解开关 { get; set; }

    public bool 城主分解开关 { get; set; }

    public SConnection Connection => Character.Connection;

    public byte TradeState
    {
        get
        {
            if (CurrentTrade == null)
                return 0;

            if (CurrentTrade.Requester == this)
                return CurrentTrade.RequesterState;

            return CurrentTrade.RecipientState;
        }
    }

    public bool MountState { get; set; }

    public byte StallState
    {
        get { return (CurrentStall != null) ? CurrentStall.Status : (byte)0; }
        set
        {
            if (CurrentStall != null)
                CurrentStall.Status = value;
        }
    }

    public string StallName => (CurrentStall != null) ? CurrentStall.Name : string.Empty;

    public static bool 不抢怪 { get; set; }

    public static bool 不捡取他人装备 { get; set; }

    public static bool 优先战斗 { get; set; }

    public static bool 开启预留背包 { get; set; }

    public static byte 预留格数 { get; set; }

    public static byte CombatRange { get; set; }

    public static ItemInfo 无法移动使用道具ID { get; set; }

    public static short 无法移动时间 { get; set; }

    public static int 道具ID { get; set; }

    public bool 特定技能 { get; set; }

    public static int 技能ID { get; set; }

    public static bool 开启自动拾取 { get; set; }

    public static byte 拾取范围 { get; set; }

    public bool AutoBattle { get; set; }

    public override string Name => Character.UserName.V;

    public override int ObjectID => Character.Index.V;

    public override int CurrentHP
    {
        get { return Character.CurrentHP.V; }
        set
        {
            value = Math.Min(this[Stat.MaxHP], Math.Max(0, value));
            if (CurrentHP != value)
            {
                Character.CurrentHP.V = value;
                SendPacket(new SyncObjectHP
                {
                    ObjectID = ObjectID,
                    CurrentHP = CurrentHP,
                    MaxHP = this[Stat.MaxHP]
                });
            }
        }
    }

    public override int CurrentMP
    {
        get { return Character.CurrentMP.V; }
        set
        {
            value = Math.Min(this[Stat.MaxMP], Math.Max(0, value));
            if (CurrentMP != value)
            {
                Character.CurrentMP.V = Math.Max(0, value);
                Enqueue(new SyncManaPacket
                {
                    CurrentMP = CurrentMP
                });
            }
        }
    }

    public override byte CurrentLevel
    {
        get { return Character.CurrentLevel; }
        set { Character.CurrentLevel = value; }
    }

    public override Point CurrentPosition
    {
        get { return Character.CurrentPosition.V; }
        set
        {
            if (Character.CurrentPosition.V == value)
                return;

            Character.CurrentPosition.V = value;
            if (CurrentMap != null)
            {
                if (CurrentMap.IsInArea(CurrentPosition, AreaType.Resurrection))
                    RespawnMapIndex = CurrentMap.MapID;
            }
        }
    }

    public override Map CurrentMap
    {
        get { return base.CurrentMap; }
        set
        {
            if (CurrentMap != value)
            {
                base.CurrentMap?.RemoveObject(this);
                base.CurrentMap = value;
                base.CurrentMap?.AddObject(this);
            }
            if (Character.CurrentMap.V != value.MapInfo.MapID)
            {
                Character.CurrentMap.V = value.MapInfo.MapID;
                Guild?.Broadcast(new SyncMemberInfoPacket
                {
                    ObjectID = ObjectID,
                    对象信息 = Character.CurrentMap.V,
                    CurrentLevel = CurrentLevel
                });
            }
        }
    }

    public override GameDirection CurrentDirection
    {
        get { return Character.CurrentDirection.V; }
        set
        {
            if (Character.CurrentDirection.V != value)
            {
                Character.CurrentDirection.V = value;
                SendPacket(new SyncObjectDirectionPacket
                {
                    ObjectID = ObjectID,
                    Direction = (ushort)value
                });
            }
        }
    }

    public override GameObjectType ObjectType => GameObjectType.Player;

    public override ObjectSize Size => ObjectSize.Single1x1;

    public override int RunInterval => base.RunSpeed * 45;

    public override int WalkInterval => base.WalkSpeed * 45;

    public override DateTime BusyTime
    {
        get { return base.BusyTime; }
        set
        {
            if (base.BusyTime < value)
            {
                base.BusyTime = value;
                HardStunTime = value;
            }
        }
    }

    public override DateTime HardStunTime
    {
        get { return base.HardStunTime; }
        set
        {
            if (base.HardStunTime < value)
            {
                base.HardStunTime = value;
                PickUpTime = value.AddMilliseconds(300.0);
            }
        }
    }

    public override DateTime WalkTime
    {
        get { return base.WalkTime; }
        set
        {
            if (base.WalkTime < value)
                base.WalkTime = value;
        }
    }

    public override DateTime RunTime
    {
        get { return base.RunTime; }
        set
        {
            if (base.RunTime < value)
                base.RunTime = value;
        }
    }

    public override int this[Stat stat]
    {
        get { return base[stat]; }
        set
        {
            if (base[stat] != value)
            {
                base[stat] = value;
                if ((byte)stat <= 120)
                {
                    Enqueue(new SyncStatPacket { Stat = (byte)stat, Value = value });
                }
            }
        }
    }

    public override DictionaryMonitor<ushort, BuffInfo> Buffs => Character.Buff数据;

    public override DictionaryMonitor<int, DateTime> Cooldowns => Character.冷却数据;

    public DictionaryMonitor<ushort, SkillInfo> Skills => Character.Skills;

    public int 最大负重 => this[Stat.最大负重];

    public int 最大穿戴 => this[Stat.最大穿戴];

    public int 最大腕力 => this[Stat.最大腕力];

    public int InventoryWeight
    {
        get
        {
            int weight = 0;
            foreach (ItemInfo item in Inventory.Values.ToList())
                weight += item?.Weight ?? 0;
            return weight;
        }
    }

    public int EquipmentWeight
    {
        get
        {
            int weight = 0;
            foreach (EquipmentInfo item in Equipment.Values.ToList())
                weight += ((item != null && item.Type != ItemType.Weapon) ? item.Weight : 0);
            return weight;
        }
    }

    public int CurrentCombatPower
    {
        get { return Character.CurrentCombatPower; }
        set { Character.CurrentCombatPower = value; }
    }

    public int CurrentExperience
    {
        get { return Character.CurrentExperience; }
        set { Character.CurrentExperience = value; }
    }

    public int ExperienceRate
    {
        get { return Character.ExperienceRate.V; }
        set
        {
            if (Character.ExperienceRate.V != value)
            {
                if (value > Character.ExperienceRate.V)
                {
                    Enqueue(new SyncExperienceRatePacket { ExperienceRate = value });
                }
                Character.ExperienceRate.V = value;
            }
        }
    }

    public int MaxExperience => CharacterProgression.MaxExpTable[CurrentLevel];

    public int Silver
    {
        get { return Character.Silver; }
        set
        {
            if (Character.Silver != value)
            {
                Character.Silver = value;
                Enqueue(new SyncCurrencyPacket { Currency = 0, Amount = value });
            }
        }
    }

    public int Gold
    {
        get { return Character.Gold; }
        set
        {
            if (Character.Gold != value)
            {
                Character.Gold = value;
                Enqueue(new SyncCurrencyPacket { Currency = 1, Amount = value });
            }
        }
    }

    public int Ingot
    {
        get { return Character.Ingot; }
        set
        {
            if (Character.Ingot != value)
            {
                Character.Ingot = value;
                Enqueue(new SyncCurrencyPacket { Currency = 3, Amount = value });
            }
        }
    }

    public int 师门声望
    {
        get { return Character.师门声望; }
        set
        {
            if (Character.师门声望 != value)
            {
                Character.师门声望 = value;
                Enqueue(new SyncCurrencyPacket { Currency = 6, Amount = value });
            }
        }
    }

    public int PKPoint
    {
        get { return Character.PKPoint; }
        set
        {
            value = Math.Max(0, value);
            if (Character.PKPoint == 0 && value > 0)
                PKTime = TimeSpan.FromMinutes(1.0);

            if (Character.PKPoint != value)
            {
                if (Character.PKPoint < Config.PKRedNamePoint && value >= Config.PKRedNamePoint)
                    GreyTime = TimeSpan.Zero;
                Character.PKPoint = value;
                SyncPKPointPacket packet = new SyncPKPointPacket
                {
                    ObjectID = ObjectID,
                    PKPoint = value
                };
                SendPacket(packet);
            }
        }
    }

    public int RespawnMapIndex
    {
        get
        {
            if (RedName)
                return 147;
            return Character.HomeMap.V;
        }
        set
        {
            if (Character.HomeMap.V != value)
                Character.HomeMap.V = value;
        }
    }

    public bool RedName => PKPoint >= Config.PKRedNamePoint;

    public bool GreyName => GreyTime > TimeSpan.Zero;

    public bool BoundToMap => CurrentMap?[CurrentPosition].Contains(this) ?? false;

    public byte InventorySize
    {
        get { return Character.InventorySize.V; }
        set { Character.InventorySize.V = value; }
    }

    public byte RemainingInventorySpace => (byte)(InventorySize - Inventory.Count);

    public byte WarehouseSize
    {
        get { return Character.WarehouseSize.V; }
        set { Character.WarehouseSize.V = value; }
    }

    public byte 资源背包大小
    {
        get
        {
            return Character.资源背包大小.V;
        }
        set
        {
            Character.资源背包大小.V = value;
        }
    }

    public byte 宠物上限 { get; set; }

    public bool IsEnoughBag => RemainingInventorySpace > 0;

    public uint CurrentMount
    {
        get { return Character.CurrentMount.V; }
        set { Character.CurrentMount.V = value; }
    }

    public byte PetCount => (byte)Pets.Count;

    public byte 师门参数
    {
        get
        {
            if (Mentor != null)
            {
                if (Mentor.MasterID == ObjectID)
                    return 2;
                return 1;
            }
            if (CurrentLevel < 30)
                return 0;
            return 2;
        }
    }

    public byte CurrentTitle
    {
        get { return Character.CurrentTitle.V; }
        set
        {
            if (Character.CurrentTitle.V != value)
                Character.CurrentTitle.V = value;
        }
    }

    public ushort 坐骑编号
    {
        get
        {
            return Character.坐骑编号.V;
        }
        set
        {
            if (Character.坐骑编号.V != value)
            {
                Character.坐骑编号.V = value;
            }
        }
    }

    public ushort 套装编号
    {
        get
        {
            return Character.装备套装编号.V;
        }
        set
        {
            if (Character.装备套装编号.V != value)
            {
                Character.装备套装编号.V = value;
            }
        }
    }

    public byte CurrentDegree
    {
        get
        {
            return Character.本期特权.V;
        }
        set
        {
            if (Character.本期特权.V != value)
            {
                Character.本期特权.V = value;
            }
        }
    }

    public byte PreviousDegree
    {
        get
        {
            return Character.上期特权.V;
        }
        set
        {
            if (Character.上期特权.V != value)
            {
                Character.上期特权.V = value;
            }
        }
    }

    public byte 预定特权
    {
        get
        {
            return Character.预定特权.V;
        }
        set
        {
            if (Character.预定特权.V != value)
            {
                Character.预定特权.V = value;
            }
        }
    }

    public uint 本期记录
    {
        get
        {
            return Character.本期记录.V;
        }
        set
        {
            if (Character.本期记录.V != value)
            {
                Character.本期记录.V = value;
            }
        }
    }

    public uint 上期记录
    {
        get
        {
            return Character.上期记录.V;
        }
        set
        {
            if (Character.上期记录.V != value)
            {
                Character.上期记录.V = value;
            }
        }
    }

    public DateTime 本期日期
    {
        get
        {
            return Character.本期日期.V;
        }
        set
        {
            if (Character.本期日期.V != value)
            {
                Character.本期日期.V = value;
            }
        }
    }

    public DateTime 上期日期
    {
        get
        {
            return Character.上期日期.V;
        }
        set
        {
            if (Character.上期日期.V != value)
            {
                Character.上期日期.V = value;
            }
        }
    }

    public TimeSpan GreyTime
    {
        get { return Character.GreyTime.V; }
        set
        {
            if (Character.GreyTime.V <= TimeSpan.Zero && value > TimeSpan.Zero)
            {
                SendPacket(new SyncGreyNamePacket
                {
                    ObjectID = ObjectID,
                    Greyed = true
                });
            }
            else if (Character.GreyTime.V > TimeSpan.Zero && value <= TimeSpan.Zero)
            {
                SendPacket(new SyncGreyNamePacket
                {
                    ObjectID = ObjectID,
                    Greyed = false
                });
            }

            if (Character.GreyTime.V != value)
                Character.GreyTime.V = value;
        }
    }

    public TimeSpan PKTime
    {
        get
        {
            return Character.减PK时间.V;
        }
        set
        {
            if (Character.减PK时间.V > TimeSpan.Zero && value <= TimeSpan.Zero)
            {
                PKPoint--;
                Character.减PK时间.V = TimeSpan.FromMinutes(1.0);
            }
            else if (Character.减PK时间.V != value)
            {
                Character.减PK时间.V = value;
            }
        }
    }

    public AccountInfo Account => Character.Account.V;

    public GuildInfo Guild
    {
        get { return Character.Guild.V; }
        set
        {
            if (Character.Guild.V != value)
                Character.Guild.V = value;
        }
    }

    public TeamInfo Team
    {
        get { return Character.Team.V; }
        set
        {
            if (Character.Team.V != value)
                Character.Team.V = value;
        }
    }

    public MentorInfo Mentor
    {
        get { return Character.Mentor.V; }
        set
        {
            if (Character.Mentor.V != value)
                Character.Mentor.V = value;
        }
    }

    public AttackMode AttackMode
    {
        get { return Character.AttackMode.V; }
        set
        {
            if (Character.AttackMode.V != value)
            {
                Character.AttackMode.V = value;
                Enqueue(new SyncAttackModePacket { ObjectID = ObjectID, Mode = (byte)value });
            }
        }
    }

    public PetMode PetMode
    {
        get
        {
            if (Character.PetMode.V == PetMode.Automatic)
            {
                Character.PetMode.V = PetMode.Attack;
                return PetMode.Attack;
            }
            return Character.PetMode.V;
        }
        set
        {
            if (Character.PetMode.V != value)
            {
                Character.PetMode.V = value;
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 9473,
                    Param1 = (int)value
                });
            }
        }
    }

    public int 激活标识
    {
        get
        {
            return Character.激活标识.V;
        }
        set
        {
            Character.激活标识.V = value;
        }
    }

    public Map ResurrectionMap
    {
        get
        {
            if (RedName)
            {
                if (CurrentMap.MapID == 147)
                    return CurrentMap;
                return MapManager.GetMap(147);
            }
            if (CurrentMap.MapID == RespawnMapIndex)
                return CurrentMap;
            return MapManager.GetMap(RespawnMapIndex);
        }
    }

    public ObjectHairStyle HairStyle
    {
        get { return Character.HairStyle.V; }
        set { Character.HairStyle.V = value; }
    }

    public ObjectHairColor HairColor
    {
        get { return Character.HairColor.V; }
        set { Character.HairColor.V = value; }
    }

    public ObjectFaceStyle FaceStyle
    {
        get { return Character.FaceStyle.V; }
        set { Character.FaceStyle.V = value; }
    }

    public GameObjectGender Gender => Character.Gender.V;

    public GameObjectRace Job => Character.Job.V;

    public ObjectNameColor NameColor
    {
        get
        {
            if (Character.GreyTime.V > TimeSpan.Zero)
                return ObjectNameColor.Gray;
            if (Character.PKPoint >= Config.PKCrimsonNamePoint)
                return ObjectNameColor.Crimson;
            if (Character.PKPoint >= Config.PKRedNamePoint)
                return ObjectNameColor.Red;
            if (Character.PKPoint >= Config.PKYellowNamePoint)
                return ObjectNameColor.Yellow;
            return ObjectNameColor.White;
        }
    }

    public HashMonitor<PetInfo> PetInfo => Character.Pets;

    public HashMonitor<MailInfo> UnreadMail => Character.UnreadMail;
    public HashMonitor<MailInfo> Mail => Character.Mail;

    public HashMonitor<CharacterInfo> FriendList => Character.FriendList;
    public HashMonitor<CharacterInfo> 粉丝列表 => Character.粉丝列表;
    public HashMonitor<CharacterInfo> 偶像列表 => Character.偶像列表;
    public HashMonitor<CharacterInfo> 仇人列表 => Character.仇人列表;
    public HashMonitor<CharacterInfo> 仇恨列表 => Character.仇恨列表;
    public HashMonitor<CharacterInfo> 黑名单表 => Character.黑名单表;

    public DictionaryMonitor<byte, int> 剩余特权 => Character.剩余特权;

    public DictionaryMonitor<byte, SkillInfo> HotKeys => Character.HotKeys;

    public DictionaryMonitor<byte, ItemInfo> Inventory => Character.Inventory;
    public DictionaryMonitor<byte, ItemInfo> Storage => Character.Storage;
    public DictionaryMonitor<byte, ItemInfo> 角色资源背包 => Character.角色资源背包;

    public DictionaryMonitor<byte, EquipmentInfo> Equipment => Character.Equipment;

    public DictionaryMonitor<byte, DateTime> Titles => Character.Titles;

    public PlayerObject Player { get; set; }

    public AutoSystem CurrentAutoState { get; set; }

    public bool 拾取状态 { get; set; }

    public bool 空闲状态 { get; set; }

    public int 身边怪物数量 { get; set; }

    public Point 拾取时坐标 { get; set; }

    public int 拾取停止次数 { get; set; }

    public PlayerObject(CharacterInfo character, SConnection conn)
    {
        Character = character;
        Pets = new List<PetObject>();
        被动技能 = new Dictionary<ushort, SkillInfo>();
        BonusStats[this] = CharacterProgression.GetData(Job, CurrentLevel);
        CombatPowerBonus = new Dictionary<object, int> { [this] = CurrentLevel * 10 };
        TitleTime = DateTime.MaxValue;
        PickUpTime = SEngine.CurrentTime.AddSeconds(1.0);
        RecoveryTime = SEngine.CurrentTime.AddSeconds(5.0);
        PrivilegeTime = ((CurrentDegree > 0) ? 本期日期.AddDays(30.0) : DateTime.MaxValue);

        foreach (EquipmentInfo value80 in Equipment.Values)
        {
            CombatPowerBonus[value80] = value80.CombatPower;
            if (string.Equals(value80.Name, "ParalysisRing", StringComparison.OrdinalIgnoreCase))
            {
                ParalysisRing = true;
            }
            if (string.Equals(value80.Name, "ResurrectionRing", StringComparison.OrdinalIgnoreCase))
            {
                HasResurrectionRing = true;
                ResurrectionRingReady = true;
            }
            if (string.Equals(value80.Name, "ProtectionRing", StringComparison.OrdinalIgnoreCase))
            {
                ProtectionRing = true;
            }
            if (value80.Dura.V > 0)
            {
                BonusStats[value80] = value80.Stats;
            }
            if (value80.FirstInscription != null && Skills.TryGetValue(value80.FirstInscription.SkillID, out var v))
            {
                v.InscriptionID = value80.FirstInscription.ID;
            }
            if (value80.SecondInscription != null && Skills.TryGetValue(value80.SecondInscription.SkillID, out var v2))
            {
                v2.InscriptionID = value80.SecondInscription.ID;
            }
        }
        foreach (SkillInfo value81 in Skills.Values)
        {
            CombatPowerBonus[value81] = value81.CombatBonus;
            BonusStats[value81] = value81.BonusStats;
            foreach (ushort item in value81.PassiveSkills.ToList())
            {
                被动技能.Add(item, value81);
            }
        }
        foreach (BuffInfo value82 in Buffs.Values)
        {
            if ((value82.BuffEffect & BuffEffectType.StatIncOrDec) != 0)
            {
                BonusStats.Add(value82, value82.BonusStats);
            }
        }
        foreach (KeyValuePair<byte, DateTime> item2 in Titles.ToList())
        {
            if (SEngine.CurrentTime >= item2.Value)
            {
                if (Titles.Remove(item2.Key) && CurrentTitle == item2.Key)
                {
                    CurrentTitle = 0;
                }
            }
            else if (item2.Value < TitleTime)
            {
                TitleTime = item2.Value;
            }
        }
        if (CurrentTitle > 0 && GameTitle.DataSheet.TryGetValue(CurrentTitle, out var value) && Config.称号叠加开关 == 0)
        {
            CombatPowerBonus[CurrentTitle] = value.CombatPower;
            BonusStats[CurrentTitle] = value.Stats;
        }
        if (Config.新手上线赠送称号1 != 999 && !character.Titles.ContainsKey((byte)Config.新手上线赠送称号1) && GameTitle.DataSheet.TryGetValue((byte)Config.新手上线赠送称号1, out var _))
        {
            AddTitle((byte)Config.新手上线赠送称号1);
        }
        if (Config.CurrentVersion >= 1 && Config.称号叠加开关 == 1)
        {
            byte[] titles =
            { 
                Config.称号叠加模块一,
                Config.称号叠加模块二,
                Config.称号叠加模块三,
                Config.称号叠加模块四,
                Config.称号叠加模块五,
                Config.称号叠加模块六,
                Config.称号叠加模块七,
                Config.称号叠加模块八,
                Config.称号叠加模块9,
                Config.称号叠加模块10,
                Config.称号叠加模块11,
                Config.称号叠加模块12,
                Config.称号叠加模块13,
                Config.称号叠加模块14,
                Config.称号叠加模块15,
                Config.称号叠加模块16
            };

            foreach (var id in titles)
            {
                if (character.Titles.ContainsKey(id) && GameTitle.DataSheet.TryGetValue(id, out var title))
                {
                    CombatPowerBonus.Add(title, title.CombatPower);
                    BonusStats.Add(title, title.Stats);
                }
            }
        }
        if (Config.CurrentVersion >= 1)
        {
            if (Config.御兽切换开关 == 1 && Config.御兽属性开启 == 1)
            {
                uint[] bonuses = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 };

                foreach (var number in bonuses)
                {
                    if (MountStats.DataSheet.ContainsKey(number))
                    {
                        if (character.Mounts.Contains(number) && MountStats.DataSheet.TryGetValue(number, out var mount))
                        {
                            BonusStats.Add(mount, mount.Stats);
                        }
                    }
                }
            }
            if (Config.御兽切换开关 == 0 && Config.御兽属性开启 == 1)
            {
                uint[] bonuses = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21 }; // Missing 17

                foreach (var number in bonuses)
                {
                    if (MountStats.DataSheet.ContainsKey(number) && character.Mounts.Contains(number))
                    {
                        if (character.Mounts.Contains(number) && MountStats.DataSheet.TryGetValue(number, out var mount))
                        {
                            BonusStats.Add(mount, mount.Stats);
                        }
                    }
                }
            }
        }

        if (Config.CurrentVersion >= 2)
        {
            if (SystemInfo.Info.OccupyGuild.V != Guild && character.Titles.ContainsKey(Config.沙巴克成员称号))
            {
                玩家称号到期(Config.沙巴克成员称号);
            }
            if (SystemInfo.Info.OccupyGuild.V != Guild && character.Titles.ContainsKey(Config.沙巴克城主称号))
            {
                玩家称号到期(Config.沙巴克城主称号);
            }
        }

        if (CurrentHP == 0)
        {
            CurrentMap = MapManager.GetMap(RespawnMapIndex);
            CurrentPosition = (RedName ? CurrentMap.GetRandomPosition(AreaType.RedName) : CurrentMap.GetRandomPosition(AreaType.Resurrection));
            CurrentHP = (int)((float)this[Stat.MaxHP] * 0.3f);
            CurrentMP = (int)((float)this[Stat.MaxMP] * 0.3f);
        }
        else
        {
            var map = MapManager.GetMap(character.CurrentMap.V);
            if (map != null)
            {
                if (map.NoReconnect)
                {
                    if (map.NoReconnectMapID == 0)
                    {
                        CurrentMap = MapManager.GetMap(RespawnMapIndex);
                        CurrentPosition = CurrentMap.GetRandomPosition(AreaType.Resurrection);
                    }
                    else
                    {
                        CurrentMap = MapManager.GetMap(map.NoReconnectMapID);
                        CurrentPosition = (CurrentMap.TeleportationArea != null) ?
                            CurrentMap.GetRandomPosition(AreaType.Teleportation) : CurrentMap.GetRandomPosition(AreaType.Random);
                    }
                }
                else
                {
                    CurrentMap = map;
                }
            }
            else
            {
                // TODO: Failed to find user map..
            }
        }

        玩家穿卸装备(装备穿戴部位.武器, null, null);
        UpdateCombatPower();
        RefreshStats();

        Dead = false;
        Blocking = true;
        MapManager.AddObject(this);
        Activated = true;
        MapManager.AddActiveObject(this);
        character.LoginDate.V = SEngine.CurrentTime;
        character.Connect(conn);

        Enqueue(new SyncCharacterInfoPacket
        {
            ObjectID = ObjectID,
            Position = CurrentPosition,
            Height = CurrentHeight,
            CurrentExperience = CurrentExperience,
            ExperienceRate = ExperienceRate,
            MaxExperience = MaxExperience,
            PKPoint = PKPoint,
            Direction = (ushort)CurrentDirection,
            MapID = CurrentMap.MapID,
            //RouteID = CurrentMap.RouteID,
            Job = (byte)Job,
            Gender = (byte)Gender,
            Level = CurrentLevel,
            AttackMode = (byte)AttackMode,
            AwakeningExp = character.AwakeningExp.V,
            MaxAwakeningExp = Config.MaxAwakeningExp,
            CurrentTime = Compute.TimeSeconds(SEngine.CurrentTime),
            //AutoBattleMode = 2,
            MaxLevel = Config.MaxUserLevel,
            SpecialRepairDiscount = (ushort)(Config.SpecialRepairDiscount * 10000m)
        });
        /*Enqueue(new 同步补充变量
        {
            变量类型 = 1,
            ObjectID = ObjectID,
            变量索引 = 50,
            变量内容 = (character.AwakeningExpEnabled.V ? (3680 + 激活标识) : (3616 + 激活标识))
        });*/
        Enqueue(new SyncBackpackSizePacket
        {
            InventorySize = InventorySize,
            WarehouseSize = WarehouseSize,
            资源背包大小 = 资源背包大小
        });
        Enqueue(new SyncSkillInfoPacket
        {
            UnknownInt32 = 0,
            SkillCount = Skills.Count,
            Description = 全部技能描述()
        });
        Enqueue(new SyncSkillSlotPacket
        {
            Description = 快捷栏位描述()
        });
        Enqueue(new 同步背包信息
        {
            物品描述 = 全部物品描述()
        });
        Enqueue(new 同步仓库锁定
        {
            Locked = false // TODO: We should save this..
        });
        Enqueue(new 同步角色属性
        {
            Description = 玩家属性描述()
        });
        Enqueue(new 同步威望列表());
        Enqueue(new 同步客户变量
        {
            Description = character.角色设置()
        });
        Enqueue(new 同步货币数量
        {
            Description = 全部货币描述()
        });
        Enqueue(new 同步签到信息());
        Enqueue(new 同步特权信息
        {
            字节数组 = 玛法特权描述()
        });
        Enqueue(new 同步数据结束
        {
            ObjectID = ObjectID
        });
        Enqueue(new 同步师门信息
        {
            师门参数 = 师门参数
        });
        Enqueue(new 同步角色变量
        {
            字节描述 = new byte[6] { 50, 0, 0, 0, 0, 0 }
        });
        Enqueue(new 同步称号信息
        {
            Description = 全部称号描述()
        });
        Enqueue(new SyncGreyNamePacket
        {
            ObjectID = ObjectID,
            Greyed = GreyName
        });
        Enqueue(new 同步坐骑数据
        {
            Description = character.坐骑列表描述()
        });
        Enqueue(new SyncManaPacket
        {
            CurrentMP = CurrentMP
        });
        Enqueue(new 坐骑面板回执
        {
            MountID = (byte)CurrentMount
        });
        foreach (CharacterInfo item3 in 粉丝列表)
        {
            item3.Enqueue(new 同步好友列表
            {
                ObjectID = ObjectID,
                Name = Name,
                Job = (byte)Job,
                Gender = (byte)Gender,
                上线下线 = 0
            });
        }
        foreach (CharacterInfo item4 in 仇恨列表)
        {
            item4.Enqueue(new 同步好友列表
            {
                ObjectID = ObjectID,
                Name = Name,
                Job = (byte)Job,
                Gender = (byte)Gender,
                上线下线 = 0
            });
        }
        if (偶像列表.Count != 0 || 仇人列表.Count != 0)
        {
            Enqueue(new 同步个人信息
            {
                Description = 社交列表描述()
            });
        }
        if (黑名单表.Count != 0)
        {
            Enqueue(new 同步黑名单表
            {
                Description = 社交屏蔽描述()
            });
        }
        if (UnreadMail.Count >= 1)
        {
            Enqueue(new SyncNewMailPacket
            {
                MessageCount = UnreadMail.Count
            });
        }
        if (Team != null)
        {
            Enqueue(new 玩家加入队伍
            {
                Description = Team.队伍描述()
            });
        }
        if (Guild != null)
        {
            Enqueue(new 行会信息公告
            {
                Description = Guild.行会信息描述()
            });
            Guild.Broadcast(new SyncMemberInfoPacket
            {
                ObjectID = ObjectID,
                对象信息 = CurrentMap.MapID,
                CurrentLevel = CurrentLevel
            });
            if (Guild.Members[this.Character] <= GuildRank.理事 && Guild.Applications.Count > 0)
            {
                Enqueue(new 发送行会通知
                {
                    提醒类型 = 1
                });
            }
            if (Guild.Members[this.Character] <= GuildRank.副长 && Guild.AllianceApplications.Count > 0)
            {
                Enqueue(new 发送行会通知
                {
                    提醒类型 = 2
                });
            }
            if (Guild.Members[this.Character] <= GuildRank.副长 && Guild.HostileReleaseApplications.Count > 0)
            {
                Enqueue(new 行会外交公告
                {
                    Description = Guild.解除申请描述()
                });
            }
        }
        if (SystemInfo.Info.OccupyGuild.V != null)
        {
            Enqueue(new 同步占领行会
            {
                NewGuildID = SystemInfo.Info.OccupyGuild.V.ID
            });
        }
        if (Guild != null && Guild == SystemInfo.Info.OccupyGuild.V && Guild.Members[character] == GuildRank.President)
        {
            NetworkManager.SendAnnouncement("Lord of Sabak [" + Name + "] Entered the game");
        }
        Team?.Broadcast(new 同步队员状态
        {
            ObjectID = ObjectID
        });
    }

    public void Enqueue(GamePacket packet) => Character.Enqueue(packet);

    public override void Process()
    {
        if (BoundToMap)
        {
            foreach (SkillInfo item in Skills.Values.ToList())
            {
                if (item.SkillCount <= 0 || item.RemainingCount.V >= item.SkillCount)
                {
                    continue;
                }
                if (item.计数时间 == default(DateTime))
                {
                    item.计数时间 = SEngine.CurrentTime.AddMilliseconds((int)item.PeriodCount);
                }
                else if (SEngine.CurrentTime > item.计数时间)
                {
                    if (++item.RemainingCount.V >= item.SkillCount)
                    {
                        item.计数时间 = default(DateTime);
                    }
                    else
                    {
                        item.计数时间 = SEngine.CurrentTime.AddMilliseconds((int)item.PeriodCount);
                    }
                    Enqueue(new 同步技能计数
                    {
                        技能编号 = item.ID.V,
                        技能计数 = item.RemainingCount.V,
                        技能冷却 = item.PeriodCount
                    });
                }
            }

            foreach (var skill in ActiveSkills)
                skill.Process();

            foreach (var buff in Buffs)
                ProcessBuffs(buff.Value);

            if (SEngine.CurrentTime >= TitleTime)
            {
                DateTime dateTime = DateTime.MaxValue;
                foreach (var title in Titles)
                {
                    if (SEngine.CurrentTime >= title.Value)
                    {
                        玩家称号到期(title.Key);
                    }
                    else if (title.Value < dateTime)
                    {
                        dateTime = title.Value;
                    }
                }
                TitleTime = dateTime;
            }

            if (SEngine.CurrentTime >= PrivilegeTime)
            {
                ExpirePrivilege();
                if (剩余特权.TryGetValue(预定特权, out var v) && v >= 30)
                {
                    ChangeDegree(预定特权);
                    if ((剩余特权[预定特权] -= 30) <= 0)
                    {
                        预定特权 = 0;
                    }
                }
                if (CurrentDegree == 0)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 65553
                    });
                }
                Enqueue(new 同步特权信息
                {
                    字节数组 = 玛法特权描述()
                });
            }

            if (GreyName)
            {
                GreyTime -= SEngine.CurrentTime - CurrentTime;
            }
            if (PKPoint > 0)
            {
                PKTime -= SEngine.CurrentTime - CurrentTime;
            }

            if (Team != null && SEngine.CurrentTime > TeamTime)
            {
                Team.Broadcast(new 同步队员信息
                {
                    TeamID = Team.TeamID,
                    ObjectID = ObjectID,
                    CurrentLevel = CurrentLevel,
                    MaxHP = this[Stat.MaxHP],
                    MaxMP = this[Stat.MaxMP],
                    CurrentHP = CurrentHP,
                    CurrentMP = CurrentMP,
                    CurrentMapID = CurrentMap.MapID,
                    RouteID = CurrentMap.RouteID,
                    CurrentPositionX = CurrentPosition.X,
                    CurrentPositionY = CurrentPosition.Y,
                    CurrentHeight = CurrentHeight,
                    AttackMode = (byte)AttackMode
                });
                TeamTime = SEngine.CurrentTime.AddSeconds(5.0);
            }

            if (SEngine.CurrentTime > RecoveryTime)
            {
                if (!CheckStatus(GameObjectState.Poisoned))
                {
                    CurrentHP += this[Stat.HealthRecovery];
                    CurrentMP += this[Stat.ManaRecovery];
                }
                RecoveryTime = RecoveryTime.AddSeconds(30.0);
            }

            if (SEngine.CurrentTime > BattleEquipmentTime && Equipment.TryGetValue(15, out var v2) && v2.Dura.V > 0)
            {
                if (v2.ID != 99999100 && v2.ID != 99999101)
                {
                    if (v2.ID != 99999102 && v2.ID != 99999103)
                    {
                        if (v2.ID == 99999110 || v2.ID == 99999111)
                        {
                            int num = Math.Min(10, Math.Min(v2.Dura.V, this[Stat.MaxHP] - CurrentHP));
                            if (num > 0)
                            {
                                CurrentHP += num;
                                CurrentMP += num;
                                DamageCombatEquipment(num);
                            }
                            BattleEquipmentTime = SEngine.CurrentTime.AddMilliseconds(1000.0);
                        }
                    }
                    else
                    {
                        int num2 = Math.Min(15, Math.Min(v2.Dura.V, this[Stat.MaxMP] - CurrentMP));
                        if (num2 > 0)
                        {
                            CurrentMP += num2;
                            DamageCombatEquipment(num2);
                        }
                        BattleEquipmentTime = SEngine.CurrentTime.AddMilliseconds(1000.0);
                    }
                }
                else
                {
                    int num3 = Math.Min(10, Math.Min(v2.Dura.V, this[Stat.MaxHP] - CurrentHP));
                    if (num3 > 0)
                    {
                        CurrentHP += num3;
                        DamageCombatEquipment(num3);
                    }
                    BattleEquipmentTime = SEngine.CurrentTime.AddMilliseconds(1000.0);
                }
            }
            if (Character.屠魔兑换.V.Date != SEngine.CurrentTime.Date && SEngine.CurrentTime.Hour >= Config.重置屠魔副本时间)
            {
                Character.屠魔兑换.V = SEngine.CurrentTime;
                Character.屠魔次数.V = 0;
                Character.魔虫窟次数.V = 0;
                Character.九层妖塔次数.V = 0;
                Character.屠魔令回收数量.V = 0;
            }

            if (HealCount > 0 && SEngine.CurrentTime > HealTime)
            {
                HealCount--;
                CurrentHP += HealAmount;
                HealTime = SEngine.CurrentTime.AddMilliseconds(500.0);
            }

            if (HealthRestoreCount > 0 && SEngine.CurrentTime > HealthRegenTime)
            {
                HealthRestoreCount--;
                HealthRegenTime = SEngine.CurrentTime.AddMilliseconds(1000.0);
                CurrentHP += (int)Math.Max(0f, (float)HealthRegenAmount * (1f + (float)this[Stat.HPRatePercent] / 10000f));
            }

            if (ManaRestoreCount > 0 && SEngine.CurrentTime > ManaRegenTime)
            {
                ManaRestoreCount--;
                ManaRegenTime = SEngine.CurrentTime.AddMilliseconds(1000.0);
                CurrentMP += (int)Math.Max(0f, (float)ManaRegenAmount * (1f + (float)this[Stat.MPRatePercent] / 10000f));
            }

            if (CurrentMap.MapID == 183 && SEngine.CurrentTime > ExperienceTime)
            {
                ExperienceTime = SEngine.CurrentTime.AddSeconds(5.0);
                GainExperience(null, (CurrentMap[CurrentPosition].FirstOrDefault((MapObject O) => O is GuardObject guard && guard.GuardID == 6121) == null) ? Config.武斗场经验小 : Config.武斗场经验大);
            }

            Guild?.Process();
            秒触发内容结果(Character.UserName.V);
        }
        base.Process();
    }

    public override void Die(MapObject attacker, bool skillDeath)
    {
        base.Die(attacker, skillDeath);

        foreach (var buff in Buffs.Values)
        {
            if (buff.死亡消失)
            {
                RemoveBuff(buff.ID.V);
            }
        }

        ManaRestoreCount = 0;
        HealthRestoreCount = 0;
        HealCount = 0;

        CurrentTrade?.BreakTrade();

        foreach (var pet in Pets)
            pet.Die(null, false);
 
        Enqueue(new 离开战斗姿态
        {
            对象编号 = ObjectID
        });
        Enqueue(new 发送复活信息());

        PlayerObject 玩家实例2 = null;
        if (attacker is PlayerObject 玩家实例3)
        {
            玩家实例2 = 玩家实例3;
        }
        else if (attacker is PetObject pet)
        {
            玩家实例2 = pet.Master;
        }
        else if (attacker is TrapObject trap && trap.Caster is PlayerObject caster)
        {
            玩家实例2 = caster;
        }

        if (玩家实例2 != null && !CurrentMap.自由区内(CurrentPosition) && !GreyName && !RedName && (MapManager.SandCityStage < 2 || (CurrentMap.MapID != 152 && CurrentMap.MapID != 178)) && Config.杀人PK红名开关 == 0)
        {
            玩家实例2.PKPoint += 50;
            if (skillDeath && Config.PK死亡幸运开关 == 1)
            {
                玩家实例2.DecreaseWeaponLuck();
            }
        }

        if (玩家实例2 != null)
        {
            Enqueue(new 同步气泡提示
            {
                泡泡类型 = 1,
                泡泡参数 = 玩家实例2.ObjectID
            });
            Enqueue(new 同步对战结果
            {
                KillMethod = 1,
                WinnerID = 玩家实例2.ObjectID,
                LoserID = ObjectID,
                PKPenalty = 50
            });
            string text = ((Guild != null) ? $"[{Guild}]行会的" : "");
            string text2 = ((玩家实例2.Guild != null) ? $"[{玩家实例2.Guild}]行会的" : "");
            NetworkManager.SendAnnouncement($"{text}[{this}]在{CurrentMap}被{text2}[{玩家实例2}]击杀");
        }

        if (Config.狂暴货币格式 == 1 && 玩家实例2 != null && Titles.ContainsKey(Config.狂暴称号格式) && GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value))
        {
            玩家称号到期(Config.狂暴称号格式);
            BonusStats.Remove(value);
            CombatPowerBonus.Remove(value);
            RefreshStats();
            UpdateCombatPower();
            玩家实例2.Ingot += Config.狂暴杀死元宝数量;
            玩家实例2.Enqueue(new SyncIngotsPacket
            {
                Amount = 玩家实例2.Character.Ingot
            });
            if (Config.CurrentVersion >= 2)
            {
                string text3 = null;
                string text4 = null;
                if (Config.狂暴击杀玩家颜色 == 0)
                {
                    text3 = "#f9e01d";
                }
                else if (Config.狂暴击杀玩家颜色 == 1)
                {
                    text3 = "#7dea00";
                }
                else if (Config.狂暴击杀玩家颜色 == 2)
                {
                    text3 = "#EA0000";
                }
                else if (Config.狂暴击杀玩家颜色 == 3)
                {
                    text3 = "#0003ea";
                }
                else if (Config.狂暴击杀玩家颜色 == 4)
                {
                    text3 = "#ff4aea";
                }
                else if (Config.狂暴击杀玩家颜色 == 5)
                {
                    text3 = "#ffad4a";
                }
                else if (Config.狂暴击杀玩家颜色 == 6)
                {
                    text3 = "#6bcbd2";
                }
                else if (Config.狂暴击杀玩家颜色 == 7)
                {
                    text3 = "#ff4abf";
                }
                else if (Config.狂暴击杀玩家颜色 == 8)
                {
                    text3 = "#fbf1f7";
                }
                if (Config.狂暴被杀玩家颜色 == 0)
                {
                    text4 = "#f9e01d";
                }
                else if (Config.狂暴被杀玩家颜色 == 1)
                {
                    text4 = "#7dea00";
                }
                else if (Config.狂暴被杀玩家颜色 == 2)
                {
                    text4 = "#EA0000";
                }
                else if (Config.狂暴被杀玩家颜色 == 3)
                {
                    text4 = "#0003ea";
                }
                else if (Config.狂暴被杀玩家颜色 == 4)
                {
                    text4 = "#ff4aea";
                }
                else if (Config.狂暴被杀玩家颜色 == 5)
                {
                    text4 = "#ffad4a";
                }
                else if (Config.狂暴被杀玩家颜色 == 6)
                {
                    text4 = "#6bcbd2";
                }
                else if (Config.狂暴被杀玩家颜色 == 7)
                {
                    text4 = "#ff4abf";
                }
                else if (Config.狂暴被杀玩家颜色 == 8)
                {
                    text4 = "#fbf1f7";
                }
                if (Config.CurrentVersion >= 2)
                {
                    NetworkManager.SendAnnouncement("拥有狂暴之体的<font color = '" + text4 + "'>[" + this?.ToString() + "]</font>在" + CurrentMap?.ToString() + "被<font color = '" + text3 + "'>[ " + 玩家实例2?.ToString() + "]</font>击杀");
                }
            }
        }

        if (Config.狂暴货币格式 == 0 && 玩家实例2 != null)
        {
            if (Titles.ContainsKey(Config.狂暴称号格式) && GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value2))
            {
                玩家称号到期(Config.狂暴称号格式);
                BonusStats.Remove(value2);
                CombatPowerBonus.Remove(value2);
                RefreshStats();
                UpdateCombatPower();
                玩家实例2.Gold += Config.狂暴杀死金币数量;
            }
            if (Config.CurrentVersion >= 2)
            {
                string text5 = null;
                string text6 = null;
                if (Config.狂暴击杀玩家颜色 == 0)
                {
                    text5 = "#f9e01d";
                }
                else if (Config.狂暴击杀玩家颜色 == 1)
                {
                    text5 = "#7dea00";
                }
                else if (Config.狂暴击杀玩家颜色 == 2)
                {
                    text5 = "#EA0000";
                }
                else if (Config.狂暴击杀玩家颜色 == 3)
                {
                    text5 = "#0003ea";
                }
                else if (Config.狂暴击杀玩家颜色 == 4)
                {
                    text5 = "#ff4aea";
                }
                else if (Config.狂暴击杀玩家颜色 == 5)
                {
                    text5 = "#ffad4a";
                }
                else if (Config.狂暴击杀玩家颜色 == 6)
                {
                    text5 = "#6bcbd2";
                }
                else if (Config.狂暴击杀玩家颜色 == 7)
                {
                    text5 = "#ff4abf";
                }
                else if (Config.狂暴击杀玩家颜色 == 8)
                {
                    text5 = "#fbf1f7";
                }
                if (Config.狂暴被杀玩家颜色 == 0)
                {
                    text6 = "#f9e01d";
                }
                else if (Config.狂暴被杀玩家颜色 == 1)
                {
                    text6 = "#7dea00";
                }
                else if (Config.狂暴被杀玩家颜色 == 2)
                {
                    text6 = "#EA0000";
                }
                else if (Config.狂暴被杀玩家颜色 == 3)
                {
                    text6 = "#0003ea";
                }
                else if (Config.狂暴被杀玩家颜色 == 4)
                {
                    text6 = "#ff4aea";
                }
                else if (Config.狂暴被杀玩家颜色 == 5)
                {
                    text6 = "#ffad4a";
                }
                else if (Config.狂暴被杀玩家颜色 == 6)
                {
                    text6 = "#6bcbd2";
                }
                else if (Config.狂暴被杀玩家颜色 == 7)
                {
                    text6 = "#ff4abf";
                }
                else if (Config.狂暴被杀玩家颜色 == 8)
                {
                    text6 = "#fbf1f7";
                }
                if (Config.CurrentVersion >= 2)
                {
                    NetworkManager.SendAnnouncement("拥有狂暴之体的<font color = '" + text6 + "'>[" + this?.ToString() + "]</font>在" + CurrentMap?.ToString() + "被<font color = '" + text5 + "'>[ " + 玩家实例2?.ToString() + "]</font>击杀");
                }
            }
        }

        if (Config.狂暴货币格式 == 2 && 玩家实例2 != null && Titles.ContainsKey(Config.狂暴称号格式) && GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value3))
        {
            玩家称号到期(Config.狂暴称号格式);
            BonusStats.Remove(value3);
            CombatPowerBonus.Remove(value3);
            RefreshStats();
            UpdateCombatPower();
            byte b = 玩家实例2.FindEmptyInventoryIndex();
 
            GameItem value4 = null;
            GameItem.DataSheetByName.TryGetValue(Config.狂暴名称, out value4);
            玩家实例2.Character.Inventory[b] = new ItemInfo(value4, 玩家实例2.Character, 1, b, 1);
            玩家实例2.Character.Inventory[b].Dura.V = Config.狂暴杀死物品数量;
            玩家实例2.Enqueue(new SyncItemPacket
            {
                Description = 玩家实例2.Character.Inventory[b].ToArray()
            });
            if (Config.CurrentVersion >= 2)
            {
                string text7 = null;
                string text8 = null;
                if (Config.狂暴击杀玩家颜色 == 0)
                {
                    text7 = "#f9e01d";
                }
                else if (Config.狂暴击杀玩家颜色 == 1)
                {
                    text7 = "#7dea00";
                }
                else if (Config.狂暴击杀玩家颜色 == 2)
                {
                    text7 = "#EA0000";
                }
                else if (Config.狂暴击杀玩家颜色 == 3)
                {
                    text7 = "#0003ea";
                }
                else if (Config.狂暴击杀玩家颜色 == 4)
                {
                    text7 = "#ff4aea";
                }
                else if (Config.狂暴击杀玩家颜色 == 5)
                {
                    text7 = "#ffad4a";
                }
                else if (Config.狂暴击杀玩家颜色 == 6)
                {
                    text7 = "#6bcbd2";
                }
                else if (Config.狂暴击杀玩家颜色 == 7)
                {
                    text7 = "#ff4abf";
                }
                else if (Config.狂暴击杀玩家颜色 == 8)
                {
                    text7 = "#fbf1f7";
                }
                if (Config.狂暴被杀玩家颜色 == 0)
                {
                    text8 = "#f9e01d";
                }
                else if (Config.狂暴被杀玩家颜色 == 1)
                {
                    text8 = "#7dea00";
                }
                else if (Config.狂暴被杀玩家颜色 == 2)
                {
                    text8 = "#EA0000";
                }
                else if (Config.狂暴被杀玩家颜色 == 3)
                {
                    text8 = "#0003ea";
                }
                else if (Config.狂暴被杀玩家颜色 == 4)
                {
                    text8 = "#ff4aea";
                }
                else if (Config.狂暴被杀玩家颜色 == 5)
                {
                    text8 = "#ffad4a";
                }
                else if (Config.狂暴被杀玩家颜色 == 6)
                {
                    text8 = "#6bcbd2";
                }
                else if (Config.狂暴被杀玩家颜色 == 7)
                {
                    text8 = "#ff4abf";
                }
                else if (Config.狂暴被杀玩家颜色 == 8)
                {
                    text8 = "#fbf1f7";
                }
                if (Config.CurrentVersion >= 2)
                {
                    NetworkManager.SendAnnouncement("拥有狂暴之体的<font color = '" + text8 + "'>[" + this?.ToString() + "]</font>在" + CurrentMap?.ToString() + "被<font color = '" + text7 + "'>[ " + 玩家实例2?.ToString() + "]</font>击杀");
                }
            }
        }

        if (玩家实例2 == null || !CurrentMap.CanDrop(CurrentPosition, RedName))
        {
            return;
        }

        foreach (EquipmentInfo item3 in Equipment.Values.ToList())
        {
            if (item3.CanDrop && Compute.CalculateProbability(Config.死亡掉落身上几率) && !HasResurrectionRing && ResurrectionRingReady)
            {
                new ItemObject(item3.Info, item3, CurrentMap, CurrentPosition, new HashSet<CharacterInfo>());
                Equipment.Remove(item3.Position);
                玩家穿卸装备((装备穿戴部位)item3.Position, item3, null);
                Enqueue(new 玩家掉落装备
                {
                    Description = item3.ToArray()
                });
                Enqueue(new DeleteItemPacket
                {
                    Grid = 0,
                    Position = item3.Position
                });
            }
        }

        foreach (ItemInfo item4 in Inventory.Values.ToList())
        {
            if (item4.CanDrop && Compute.CalculateProbability(Config.死亡掉落背包几率) && !HasResurrectionRing && ResurrectionRingReady)
            {
                if (item4.PersistType == PersistentItemType.Stack && item4.Dura.V > 1)
                {
                    ItemObject 物品实例2 = new ItemObject(item4.Info, new ItemInfo(item4.Info, Character, 1, item4.Position, 1), CurrentMap, CurrentPosition, new HashSet<CharacterInfo>());
                    Enqueue(new 玩家掉落装备
                    {
                        Description = 物品实例2.Item.ToArray()
                    });
                    item4.Dura.V--;
                    Enqueue(new SyncItemPacket
                    {
                        Description = item4.ToArray()
                    });
                }
                else
                {
                    new ItemObject(item4.Info, item4, CurrentMap, CurrentPosition, new HashSet<CharacterInfo>());
                    Inventory.Remove(item4.Position);
                    Enqueue(new 玩家掉落装备
                    {
                        Description = item4.ToArray()
                    });
                    Enqueue(new DeleteItemPacket
                    {
                        Grid = 1,
                        Position = item4.Position
                    });
                }
            }
        }

        if (CurrentMap.MapID == 183 && Config.武斗场杀人开关)
        {
            GainExperience(null, Config.武斗场杀人经验);
        }
    }

    public void 秒触发内容结果(string uname)
    {
        if (!ResurrectionRingReady && HasResurrectionRing && SEngine.CurrentTime > ReviveTime)
        {
            ResurrectionRingReady = true;
            RemoveBuffEx(47391);
        }

        if (CurrentMap.MapID == 183 && SEngine.CurrentTime.Hour != Config.武斗场时间一 && SEngine.CurrentTime.Hour != Config.武斗场时间二)
        {
            if (Dead)
                Resurrect();
            else
                Teleport(ResurrectionMap, AreaType.Resurrection);
            
            return;
        }

        if (CurrentMap.MapID == 152 && CurrentLevel <= Config.沙城地图保护)
        {
            Teleport((CurrentMap.MapID == 147) ? CurrentMap : MapManager.GetMap(147), AreaType.Teleportation);
        }

        if (SEngine.CurrentTime >= VIPRewardTime && Character.VIPLevel.V != 0)
        {
            if ((Character.VIPLevel.V >= 1 && Character.VIPLevel.V <= 10) && 
                VIPSystem.DataSheet.TryGetValue(Character.VIPLevel.V, out var vip) && 
                Character.CurrentLevel >= vip.RequiredLevel)
            {
                Ingot += vip.VIPIngot;
                Gold += vip.VIPGoldCoin;
                GainExperience(null, vip.VIPExperience);
                VIPRewardTime = SEngine.CurrentTime.AddMinutes(vip.VIPRewardInterval);

                if (GameItem.DataSheet.TryGetValue(vip.材料宝箱编号, out var value2))
                {
                    byte b = byte.MaxValue;
                    byte b2 = 0;
                    while (b2 < InventorySize)
                    {
                        if (Inventory.ContainsKey(b2))
                            b2 = (byte)(b2 + 1);
                        else
                            b = b2;
                    }
                    if (b == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket { ErrorCode = 1793 });
                    }
                    Inventory[b] = new ItemInfo(value2, Character, 1, b, vip.材料宝箱数量);
                    Enqueue(new SyncItemPacket
                    {
                        Description = Inventory[b].ToArray()
                    });
                }

                if (GameItem.DataSheet.TryGetValue(vip.装备宝箱编号, out var value3))
                {
                    byte b3 = byte.MaxValue;
                    byte b4 = 0;
                    while (b4 < InventorySize)
                    {
                        if (Inventory.ContainsKey(b4))
                            b4 = (byte)(b4 + 2);
                        else
                            b3 = b4;
                    }
                    if (b3 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket { ErrorCode = 1793 });
                    }
                    Inventory[b3] = new ItemInfo(value3, Character, 1, b3, vip.装备宝箱数量);
                    Enqueue(new SyncItemPacket
                    {
                        Description = Inventory[b3].ToArray()
                    });
                }
            }
        }
        
        if (Config.泡点等级开关 == 1 && CurrentMap.IsSafeArea(CurrentPosition) && SEngine.CurrentTime > ExperienceTime && Character.CurrentMap.V != 179 && CurrentLevel <= Config.泡点限制等级)
        {
            ExperienceTime = SEngine.CurrentTime.AddSeconds(Config.泡点秒数控制);
            GainExperience(null, Config.泡点当前经验);
        }

        if (SEngine.CurrentTime > 自动刷新背包时间 && Config.自动整理背包开关 == 1 && Character.CurrentTitle.V == Config.称号范围拾取判断)
        {
            byte 背包类型 = 1;
            自动整理背包(背包类型);
            自动刷新背包时间 = SEngine.CurrentTime.AddMinutes(Config.自动整理背包计时);
        }

        if (SEngine.CurrentTime > PickUpTime)
        {
            void PickUpOne(Point location)
            {
                foreach (var obj in CurrentMap[location])
                {
                    if (obj is ItemObject item)
                        PickUpItem(item);
                }
            }

            void PickUpGrid(ObjectSize size)
            {
                var grid = Compute.CalculateGrid(CurrentPosition, GameDirection.Up, size);
                foreach (var point in grid)
                {
                    if (CurrentMap[point].Count <= 0)
                        continue;

                    PickUpOne(point);
                }
            }

            if (Character.AutoPickUpAllVisible.V == false)
            {
                if (Character.CurrentTitle.V == Config.称号范围拾取判断 || Character.CurrentTitle.V == Config.称号范围拾取判断1)
                {
                    if (CurrentMap.MapID == Config.AutoPickUpMap1 || 
                        CurrentMap.MapID == Config.AutoPickUpMap2 || 
                        CurrentMap.MapID == Config.AutoPickUpMap3 || 
                        CurrentMap.MapID == Config.AutoPickUpMap4 || 
                        CurrentMap.MapID == Config.AutoPickUpMap5 || 
                        CurrentMap.MapID == Config.AutoPickUpMap6 || 
                        CurrentMap.MapID == Config.AutoPickUpMap7 || 
                        CurrentMap.MapID == Config.AutoPickUpMap8)
                    {
                        PickUpOne(CurrentPosition);
                        PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                    }
                    else if (RemainingInventorySpace >= Config.AutoPickUpInventorySpace && Config.TitleRangePickUpDistance >= 10)
                    {
                        PickUpGrid(ObjectSize.Spiral15x15);
                        PickUpOne(CurrentPosition);
                        PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                    }
                    else if (RemainingInventorySpace >= Config.AutoPickUpInventorySpace && Config.TitleRangePickUpDistance <= 4 && Config.TitleRangePickUpDistance >= 1)
                    {
                        PickUpGrid(ObjectSize.Solid3x3);
                        PickUpOne(CurrentPosition);
                        PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                    }
                    else if (RemainingInventorySpace >= Config.AutoPickUpInventorySpace && Config.TitleRangePickUpDistance <= 9 && Config.TitleRangePickUpDistance >= 5)
                    {
                        PickUpGrid(ObjectSize.Spiral7x7);
                        PickUpOne(CurrentPosition);
                        PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                    }
                    else
                    {
                        PickUpOne(CurrentPosition);
                        PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                    }
                }
                else if (Config.称号范围拾取判断 == 999 || Config.称号范围拾取判断1 == 999)
                {
                    PickUpOne(CurrentPosition);
                    PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                }
                else
                {
                    PickUpOne(CurrentPosition);
                    PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                }
            }
            else if (Character.AutoPickUpAllVisible.V == true)
            {
                if (CurrentMap.MapID == Config.AutoPickUpMap1 || 
                    CurrentMap.MapID == Config.AutoPickUpMap2 || 
                    CurrentMap.MapID == Config.AutoPickUpMap3 || 
                    CurrentMap.MapID == Config.AutoPickUpMap4 || 
                    CurrentMap.MapID == Config.AutoPickUpMap5 || 
                    CurrentMap.MapID == Config.AutoPickUpMap6 || 
                    CurrentMap.MapID == Config.AutoPickUpMap7 || 
                    CurrentMap.MapID == Config.AutoPickUpMap8)
                {
                    PickUpOne(CurrentPosition);
                    PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                }
                else if (RemainingInventorySpace >= Config.AutoPickUpInventorySpace && Config.TitleRangePickUpDistance >= 10)
                {
                    PickUpGrid(ObjectSize.Spiral15x15);
                    PickUpOne(CurrentPosition);
                    PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                }
                else if (RemainingInventorySpace >= Config.AutoPickUpInventorySpace && Config.TitleRangePickUpDistance <= 4 && Config.TitleRangePickUpDistance >= 1)
                {
                    PickUpGrid(ObjectSize.Solid3x3);
                    PickUpOne(CurrentPosition);
                    PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                }
                else if (RemainingInventorySpace >= Config.AutoPickUpInventorySpace && Config.TitleRangePickUpDistance <= 9 && Config.TitleRangePickUpDistance >= 5)
                {
                    PickUpGrid(ObjectSize.Spiral7x7);
                    PickUpOne(CurrentPosition);
                    PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                }
                else
                {
                    PickUpOne(CurrentPosition);
                    PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
                }
            }
            else
            {
                PickUpOne(CurrentPosition);
                PickUpTime = SEngine.CurrentTime.AddMilliseconds(300.0);
            }
        }

        if (Config.CurrentVersion >= 2 && Config.充值平台切换 == 1 && SEngine.CurrentTime > 充值发放)
        {
            if (Config.CurrentVersion >= 1 && Config.充值模块格式 == 0)
            {
                FileOperation.Path = Config.平台接入目录 + "\\1.txt";
                bool flag = FileOperation.Read1(Character.Account.V.ToString());
                if (flag)
                {
                    int 充值价值 = 1;
                    玩家充值模块(flag, 充值价值);
                }
                FileOperation.Path = Config.平台接入目录 + "\\2.txt";
                bool flag2 = FileOperation.Read2(Character.Account.V.ToString());
                if (flag2)
                {
                    int 充值价值2 = 2;
                    玩家充值模块(flag2, 充值价值2);
                }
                FileOperation.Path = Config.平台接入目录 + "\\3.txt";
                bool flag3 = FileOperation.Read3(Character.Account.V.ToString());
                if (flag3)
                {
                    int 充值价值3 = 3;
                    玩家充值模块(flag3, 充值价值3);
                }
                FileOperation.Path = Config.平台接入目录 + "\\4.txt";
                bool flag4 = FileOperation.Read4(Character.Account.V.ToString());
                if (flag4)
                {
                    int 充值价值4 = 4;
                    玩家充值模块(flag4, 充值价值4);
                }
                FileOperation.Path = Config.平台接入目录 + "\\5.txt";
                bool flag5 = FileOperation.Read5(Character.Account.V.ToString());
                if (flag5)
                {
                    int 充值价值5 = 5;
                    玩家充值模块(flag5, 充值价值5);
                }
                FileOperation.Path = Config.平台接入目录 + "\\6.txt";
                bool flag6 = FileOperation.Read6(Character.Account.V.ToString());
                if (flag6)
                {
                    int 充值价值6 = 6;
                    玩家充值模块(flag6, 充值价值6);
                }
                FileOperation.Path = Config.平台接入目录 + "\\7.txt";
                bool flag7 = FileOperation.Read7(Character.Account.V.ToString());
                if (flag7)
                {
                    int 充值价值7 = 7;
                    玩家充值模块(flag7, 充值价值7);
                }
                FileOperation.Path = Config.平台接入目录 + "\\8.txt";
                bool flag8 = FileOperation.Read8(Character.Account.V.ToString());
                if (flag8)
                {
                    int 充值价值8 = 8;
                    玩家充值模块(flag8, 充值价值8);
                }
                FileOperation.Path = Config.平台接入目录 + "\\9.txt";
                bool flag9 = FileOperation.Read9(Character.Account.V.ToString());
                if (flag9)
                {
                    int 充值价值9 = 9;
                    玩家充值模块(flag9, 充值价值9);
                }
                FileOperation.Path = Config.平台接入目录 + "\\10.txt";
                bool flag10 = FileOperation.Read10(Character.Account.V.ToString());
                if (flag10)
                {
                    int 充值价值10 = 10;
                    玩家充值模块(flag10, 充值价值10);
                }
                FileOperation.Path = Config.平台接入目录 + "\\20.txt";
                bool flag11 = FileOperation.Read20(Character.Account.V.ToString());
                if (flag11)
                {
                    int 充值价值11 = 20;
                    玩家充值模块(flag11, 充值价值11);
                }
                FileOperation.Path = Config.平台接入目录 + "\\30.txt";
                bool flag12 = FileOperation.Read30(Character.Account.V.ToString());
                if (flag12)
                {
                    int 充值价值12 = 30;
                    玩家充值模块(flag12, 充值价值12);
                }
                FileOperation.Path = Config.平台接入目录 + "\\40.txt";
                bool flag13 = FileOperation.Read40(Character.Account.V.ToString());
                if (flag13)
                {
                    int 充值价值13 = 40;
                    玩家充值模块(flag13, 充值价值13);
                }
                FileOperation.Path = Config.平台接入目录 + "\\50.txt";
                bool flag14 = FileOperation.Read50(Character.Account.V.ToString());
                if (flag14)
                {
                    int 充值价值14 = 50;
                    玩家充值模块(flag14, 充值价值14);
                }
                FileOperation.Path = Config.平台接入目录 + "\\60.txt";
                bool flag15 = FileOperation.Read60(Character.Account.V.ToString());
                if (flag15)
                {
                    int 充值价值15 = 60;
                    玩家充值模块(flag15, 充值价值15);
                }
                FileOperation.Path = Config.平台接入目录 + "\\70.txt";
                bool flag16 = FileOperation.Read70(Character.Account.V.ToString());
                if (flag16)
                {
                    int 充值价值16 = 70;
                    玩家充值模块(flag16, 充值价值16);
                }
                FileOperation.Path = Config.平台接入目录 + "\\80.txt";
                bool flag17 = FileOperation.Read80(Character.Account.V.ToString());
                if (flag17)
                {
                    int 充值价值17 = 80;
                    玩家充值模块(flag17, 充值价值17);
                }
                FileOperation.Path = Config.平台接入目录 + "\\90.txt";
                bool flag18 = FileOperation.Read90(Character.Account.V.ToString());
                if (flag18)
                {
                    int 充值价值18 = 90;
                    玩家充值模块(flag18, 充值价值18);
                }
                FileOperation.Path = Config.平台接入目录 + "\\100.txt";
                bool flag19 = FileOperation.Read100(Character.Account.V.ToString());
                if (flag19)
                {
                    int 充值价值19 = 100;
                    玩家充值模块(flag19, 充值价值19);
                }
                FileOperation.Path = Config.平台接入目录 + "\\200.txt";
                bool flag20 = FileOperation.Read200(Character.Account.V.ToString());
                if (flag20)
                {
                    int 充值价值20 = 200;
                    玩家充值模块(flag20, 充值价值20);
                }
                FileOperation.Path = Config.平台接入目录 + "\\300.txt";
                bool flag21 = FileOperation.Read300(Character.Account.V.ToString());
                if (flag21)
                {
                    int 充值价值21 = 300;
                    玩家充值模块(flag21, 充值价值21);
                }
                FileOperation.Path = Config.平台接入目录 + "\\400.txt";
                bool flag22 = FileOperation.Read400(Character.Account.V.ToString());
                if (flag22)
                {
                    int 充值价值22 = 400;
                    玩家充值模块(flag22, 充值价值22);
                }
                FileOperation.Path = Config.平台接入目录 + "\\500.txt";
                bool flag23 = FileOperation.Read500(Character.Account.V.ToString());
                if (flag23)
                {
                    int 充值价值23 = 500;
                    玩家充值模块(flag23, 充值价值23);
                }
                FileOperation.Path = Config.平台接入目录 + "\\600.txt";
                bool flag24 = FileOperation.Read600(Character.Account.V.ToString());
                if (flag24)
                {
                    int 充值价值24 = 600;
                    玩家充值模块(flag24, 充值价值24);
                }
                FileOperation.Path = Config.平台接入目录 + "\\700.txt";
                bool flag25 = FileOperation.Read700(Character.Account.V.ToString());
                if (flag25)
                {
                    int 充值价值25 = 700;
                    玩家充值模块(flag25, 充值价值25);
                }
                FileOperation.Path = Config.平台接入目录 + "\\800.txt";
                bool flag26 = FileOperation.Read800(Character.Account.V.ToString());
                if (flag26)
                {
                    int 充值价值26 = 800;
                    玩家充值模块(flag26, 充值价值26);
                }
                FileOperation.Path = Config.平台接入目录 + "\\900.txt";
                bool flag27 = FileOperation.Read900(Character.Account.V.ToString());
                if (flag27)
                {
                    int 充值价值27 = 900;
                    玩家充值模块(flag27, 充值价值27);
                }
                FileOperation.Path = Config.平台接入目录 + "\\1000.txt";
                bool flag28 = FileOperation.Read1000(Character.Account.V.ToString());
                if (flag28)
                {
                    int 充值价值28 = 1000;
                    玩家充值模块(flag28, 充值价值28);
                }
                FileOperation.Path = Config.平台接入目录 + "\\2000.txt";
                bool flag29 = FileOperation.Read2000(Character.Account.V.ToString());
                if (flag29)
                {
                    int 充值价值29 = 2000;
                    玩家充值模块(flag29, 充值价值29);
                }
                FileOperation.Path = Config.平台接入目录 + "\\3000.txt";
                bool flag30 = FileOperation.Read3000(Character.Account.V.ToString());
                if (flag30)
                {
                    int 充值价值30 = 3000;
                    玩家充值模块(flag30, 充值价值30);
                }
                FileOperation.Path = Config.平台接入目录 + "\\4000.txt";
                bool flag31 = FileOperation.Read4000(Character.Account.V.ToString());
                if (flag31)
                {
                    int 充值价值31 = 4000;
                    玩家充值模块(flag31, 充值价值31);
                }
                FileOperation.Path = Config.平台接入目录 + "\\5000.txt";
                bool flag32 = FileOperation.Read5000(Character.Account.V.ToString());
                if (flag32)
                {
                    int 充值价值32 = 5000;
                    玩家充值模块(flag32, 充值价值32);
                }
                FileOperation.Path = Config.平台接入目录 + "\\6000.txt";
                bool flag33 = FileOperation.Read6000(Character.Account.V.ToString());
                if (flag33)
                {
                    int 充值价值33 = 6000;
                    玩家充值模块(flag33, 充值价值33);
                }
                FileOperation.Path = Config.平台接入目录 + "\\7000.txt";
                bool flag34 = FileOperation.Read7000(Character.Account.V.ToString());
                if (flag34)
                {
                    int 充值价值34 = 7000;
                    玩家充值模块(flag34, 充值价值34);
                }
                FileOperation.Path = Config.平台接入目录 + "\\8000.txt";
                bool flag35 = FileOperation.Read8000(Character.Account.V.ToString());
                if (flag35)
                {
                    int 充值价值35 = 8000;
                    玩家充值模块(flag35, 充值价值35);
                }
                FileOperation.Path = Config.平台接入目录 + "\\9000.txt";
                bool flag36 = FileOperation.Read9000(Character.Account.V.ToString());
                if (flag36)
                {
                    int 充值价值36 = 9000;
                    玩家充值模块(flag36, 充值价值36);
                }
                FileOperation.Path = Config.平台接入目录 + "\\10000.txt";
                bool flag37 = FileOperation.Read10000(Character.Account.V.ToString());
                if (flag37)
                {
                    int 充值价值37 = 10000;
                    玩家充值模块(flag37, 充值价值37);
                }
            }
            if (Config.CurrentVersion >= 1 && Config.充值模块格式 == 1)
            {
                FileOperation.Path = Config.平台接入目录 + "\\yb1.txt";
                bool flag38 = FileOperation.Read1(Character.Account.V.ToString());
                if (flag38)
                {
                    int 充值价值38 = 1;
                    玩家充值模块(flag38, 充值价值38);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb2.txt";
                bool flag39 = FileOperation.Read2(Character.Account.V.ToString());
                if (flag39)
                {
                    int 充值价值39 = 2;
                    玩家充值模块(flag39, 充值价值39);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb3.txt";
                bool flag40 = FileOperation.Read3(Character.Account.V.ToString());
                if (flag40)
                {
                    int 充值价值40 = 3;
                    玩家充值模块(flag40, 充值价值40);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb4.txt";
                bool flag41 = FileOperation.Read4(Character.Account.V.ToString());
                if (flag41)
                {
                    int 充值价值41 = 4;
                    玩家充值模块(flag41, 充值价值41);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb5.txt";
                bool flag42 = FileOperation.Read5(Character.Account.V.ToString());
                if (flag42)
                {
                    int 充值价值42 = 5;
                    玩家充值模块(flag42, 充值价值42);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb6.txt";
                bool flag43 = FileOperation.Read6(Character.Account.V.ToString());
                if (flag43)
                {
                    int 充值价值43 = 6;
                    玩家充值模块(flag43, 充值价值43);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb7.txt";
                bool flag44 = FileOperation.Read7(Character.Account.V.ToString());
                if (flag44)
                {
                    int 充值价值44 = 7;
                    玩家充值模块(flag44, 充值价值44);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb8.txt";
                bool flag45 = FileOperation.Read8(Character.Account.V.ToString());
                if (flag45)
                {
                    int 充值价值45 = 8;
                    玩家充值模块(flag45, 充值价值45);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb9.txt";
                bool flag46 = FileOperation.Read9(Character.Account.V.ToString());
                if (flag46)
                {
                    int 充值价值46 = 9;
                    玩家充值模块(flag46, 充值价值46);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb10.txt";
                bool flag47 = FileOperation.Read10(Character.Account.V.ToString());
                if (flag47)
                {
                    int 充值价值47 = 10;
                    玩家充值模块(flag47, 充值价值47);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb20.txt";
                bool flag48 = FileOperation.Read20(Character.Account.V.ToString());
                if (flag48)
                {
                    int 充值价值48 = 20;
                    玩家充值模块(flag48, 充值价值48);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb30.txt";
                bool flag49 = FileOperation.Read30(Character.Account.V.ToString());
                if (flag49)
                {
                    int 充值价值49 = 30;
                    玩家充值模块(flag49, 充值价值49);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb40.txt";
                bool flag50 = FileOperation.Read40(Character.Account.V.ToString());
                if (flag50)
                {
                    int 充值价值50 = 40;
                    玩家充值模块(flag50, 充值价值50);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb50.txt";
                bool flag51 = FileOperation.Read50(Character.Account.V.ToString());
                if (flag51)
                {
                    int 充值价值51 = 50;
                    玩家充值模块(flag51, 充值价值51);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb60.txt";
                bool flag52 = FileOperation.Read60(Character.Account.V.ToString());
                if (flag52)
                {
                    int 充值价值52 = 60;
                    玩家充值模块(flag52, 充值价值52);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb70.txt";
                bool flag53 = FileOperation.Read70(Character.Account.V.ToString());
                if (flag53)
                {
                    int 充值价值53 = 70;
                    玩家充值模块(flag53, 充值价值53);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb80.txt";
                bool flag54 = FileOperation.Read80(Character.Account.V.ToString());
                if (flag54)
                {
                    int 充值价值54 = 80;
                    玩家充值模块(flag54, 充值价值54);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb90.txt";
                bool flag55 = FileOperation.Read90(Character.Account.V.ToString());
                if (flag55)
                {
                    int 充值价值55 = 90;
                    玩家充值模块(flag55, 充值价值55);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb100.txt";
                bool flag56 = FileOperation.Read100(Character.Account.V.ToString());
                if (flag56)
                {
                    int 充值价值56 = 100;
                    玩家充值模块(flag56, 充值价值56);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb200.txt";
                bool flag57 = FileOperation.Read200(Character.Account.V.ToString());
                if (flag57)
                {
                    int 充值价值57 = 200;
                    玩家充值模块(flag57, 充值价值57);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb300.txt";
                bool flag58 = FileOperation.Read300(Character.Account.V.ToString());
                if (flag58)
                {
                    int 充值价值58 = 300;
                    玩家充值模块(flag58, 充值价值58);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb400.txt";
                bool flag59 = FileOperation.Read400(Character.Account.V.ToString());
                if (flag59)
                {
                    int 充值价值59 = 400;
                    玩家充值模块(flag59, 充值价值59);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb500.txt";
                bool flag60 = FileOperation.Read500(Character.Account.V.ToString());
                if (flag60)
                {
                    int 充值价值60 = 500;
                    玩家充值模块(flag60, 充值价值60);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb600.txt";
                bool flag61 = FileOperation.Read600(Character.Account.V.ToString());
                if (flag61)
                {
                    int 充值价值61 = 600;
                    玩家充值模块(flag61, 充值价值61);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb700.txt";
                bool flag62 = FileOperation.Read700(Character.Account.V.ToString());
                if (flag62)
                {
                    int 充值价值62 = 700;
                    玩家充值模块(flag62, 充值价值62);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb800.txt";
                bool flag63 = FileOperation.Read800(Character.Account.V.ToString());
                if (flag63)
                {
                    int 充值价值63 = 800;
                    玩家充值模块(flag63, 充值价值63);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb900.txt";
                bool flag64 = FileOperation.Read900(Character.Account.V.ToString());
                if (flag64)
                {
                    int 充值价值64 = 900;
                    玩家充值模块(flag64, 充值价值64);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb1000.txt";
                bool flag65 = FileOperation.Read1000(Character.Account.V.ToString());
                if (flag65)
                {
                    int 充值价值65 = 1000;
                    玩家充值模块(flag65, 充值价值65);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb2000.txt";
                bool flag66 = FileOperation.Read2000(Character.Account.V.ToString());
                if (flag66)
                {
                    int 充值价值66 = 2000;
                    玩家充值模块(flag66, 充值价值66);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb3000.txt";
                bool flag67 = FileOperation.Read3000(Character.Account.V.ToString());
                if (flag67)
                {
                    int 充值价值67 = 3000;
                    玩家充值模块(flag67, 充值价值67);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb4000.txt";
                bool flag68 = FileOperation.Read4000(Character.Account.V.ToString());
                if (flag68)
                {
                    int 充值价值68 = 4000;
                    玩家充值模块(flag68, 充值价值68);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb5000.txt";
                bool flag69 = FileOperation.Read5000(Character.Account.V.ToString());
                if (flag69)
                {
                    int 充值价值69 = 5000;
                    玩家充值模块(flag69, 充值价值69);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb6000.txt";
                bool flag70 = FileOperation.Read6000(Character.Account.V.ToString());
                if (flag70)
                {
                    int 充值价值70 = 6000;
                    玩家充值模块(flag70, 充值价值70);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb7000.txt";
                bool flag71 = FileOperation.Read7000(Character.Account.V.ToString());
                if (flag71)
                {
                    int 充值价值71 = 7000;
                    玩家充值模块(flag71, 充值价值71);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb8000.txt";
                bool flag72 = FileOperation.Read8000(Character.Account.V.ToString());
                if (flag72)
                {
                    int 充值价值72 = 8000;
                    玩家充值模块(flag72, 充值价值72);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb9000.txt";
                bool flag73 = FileOperation.Read9000(Character.Account.V.ToString());
                if (flag73)
                {
                    int 充值价值73 = 9000;
                    玩家充值模块(flag73, 充值价值73);
                }
                FileOperation.Path = Config.平台接入目录 + "\\yb10000.txt";
                bool flag74 = FileOperation.Read10000(Character.Account.V.ToString());
                if (flag74)
                {
                    int 充值价值74 = 10000;
                    玩家充值模块(flag74, 充值价值74);
                }
            }
            if (Config.CurrentVersion >= 1 && Config.充值模块格式 == 2)
            {
                FileOperation.Path = Config.平台接入目录 + "\\cz1.txt";
                bool flag75 = FileOperation.Read1(Character.Account.V.ToString());
                if (flag75)
                {
                    int 充值价值75 = 1;
                    玩家充值模块(flag75, 充值价值75);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz2.txt";
                bool flag76 = FileOperation.Read2(Character.Account.V.ToString());
                if (flag76)
                {
                    int 充值价值76 = 2;
                    玩家充值模块(flag76, 充值价值76);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz3.txt";
                bool flag77 = FileOperation.Read3(Character.Account.V.ToString());
                if (flag77)
                {
                    int 充值价值77 = 3;
                    玩家充值模块(flag77, 充值价值77);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz4.txt";
                bool flag78 = FileOperation.Read4(Character.Account.V.ToString());
                if (flag78)
                {
                    int 充值价值78 = 4;
                    玩家充值模块(flag78, 充值价值78);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz5.txt";
                bool flag79 = FileOperation.Read5(Character.Account.V.ToString());
                if (flag79)
                {
                    int 充值价值79 = 5;
                    玩家充值模块(flag79, 充值价值79);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz6.txt";
                bool flag80 = FileOperation.Read6(Character.Account.V.ToString());
                if (flag80)
                {
                    int 充值价值80 = 6;
                    玩家充值模块(flag80, 充值价值80);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz7.txt";
                bool flag81 = FileOperation.Read7(Character.Account.V.ToString());
                if (flag81)
                {
                    int 充值价值81 = 7;
                    玩家充值模块(flag81, 充值价值81);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz8.txt";
                bool flag82 = FileOperation.Read8(Character.Account.V.ToString());
                if (flag82)
                {
                    int 充值价值82 = 8;
                    玩家充值模块(flag82, 充值价值82);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz9.txt";
                bool flag83 = FileOperation.Read9(Character.Account.V.ToString());
                if (flag83)
                {
                    int 充值价值83 = 9;
                    玩家充值模块(flag83, 充值价值83);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz10.txt";
                bool flag84 = FileOperation.Read10(Character.Account.V.ToString());
                if (flag84)
                {
                    int 充值价值84 = 10;
                    玩家充值模块(flag84, 充值价值84);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz20.txt";
                bool flag85 = FileOperation.Read20(Character.Account.V.ToString());
                if (flag85)
                {
                    int 充值价值85 = 20;
                    玩家充值模块(flag85, 充值价值85);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz30.txt";
                bool flag86 = FileOperation.Read30(Character.Account.V.ToString());
                if (flag86)
                {
                    int 充值价值86 = 30;
                    玩家充值模块(flag86, 充值价值86);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz40.txt";
                bool flag87 = FileOperation.Read40(Character.Account.V.ToString());
                if (flag87)
                {
                    int 充值价值87 = 40;
                    玩家充值模块(flag87, 充值价值87);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz50.txt";
                bool flag88 = FileOperation.Read50(Character.Account.V.ToString());
                if (flag88)
                {
                    int 充值价值88 = 50;
                    玩家充值模块(flag88, 充值价值88);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz60.txt";
                bool flag89 = FileOperation.Read60(Character.Account.V.ToString());
                if (flag89)
                {
                    int 充值价值89 = 60;
                    玩家充值模块(flag89, 充值价值89);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz70.txt";
                bool flag90 = FileOperation.Read70(Character.Account.V.ToString());
                if (flag90)
                {
                    int 充值价值90 = 70;
                    玩家充值模块(flag90, 充值价值90);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz80.txt";
                bool flag91 = FileOperation.Read80(Character.Account.V.ToString());
                if (flag91)
                {
                    int 充值价值91 = 80;
                    玩家充值模块(flag91, 充值价值91);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz90.txt";
                bool flag92 = FileOperation.Read90(Character.Account.V.ToString());
                if (flag92)
                {
                    int 充值价值92 = 90;
                    玩家充值模块(flag92, 充值价值92);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz100.txt";
                bool flag93 = FileOperation.Read100(Character.Account.V.ToString());
                if (flag93)
                {
                    int 充值价值93 = 100;
                    玩家充值模块(flag93, 充值价值93);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz200.txt";
                bool flag94 = FileOperation.Read200(Character.Account.V.ToString());
                if (flag94)
                {
                    int 充值价值94 = 200;
                    玩家充值模块(flag94, 充值价值94);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz300.txt";
                bool flag95 = FileOperation.Read300(Character.Account.V.ToString());
                if (flag95)
                {
                    int 充值价值95 = 300;
                    玩家充值模块(flag95, 充值价值95);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz400.txt";
                bool flag96 = FileOperation.Read400(Character.Account.V.ToString());
                if (flag96)
                {
                    int 充值价值96 = 400;
                    玩家充值模块(flag96, 充值价值96);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz500.txt";
                bool flag97 = FileOperation.Read500(Character.Account.V.ToString());
                if (flag97)
                {
                    int 充值价值97 = 500;
                    玩家充值模块(flag97, 充值价值97);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz600.txt";
                bool flag98 = FileOperation.Read600(Character.Account.V.ToString());
                if (flag98)
                {
                    int 充值价值98 = 600;
                    玩家充值模块(flag98, 充值价值98);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz700.txt";
                bool flag99 = FileOperation.Read700(Character.Account.V.ToString());
                if (flag99)
                {
                    int 充值价值99 = 700;
                    玩家充值模块(flag99, 充值价值99);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz800.txt";
                bool flag100 = FileOperation.Read800(Character.Account.V.ToString());
                if (flag100)
                {
                    int 充值价值100 = 800;
                    玩家充值模块(flag100, 充值价值100);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz900.txt";
                bool flag101 = FileOperation.Read900(Character.Account.V.ToString());
                if (flag101)
                {
                    int 充值价值101 = 900;
                    玩家充值模块(flag101, 充值价值101);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz1000.txt";
                bool flag102 = FileOperation.Read1000(Character.Account.V.ToString());
                if (flag102)
                {
                    int 充值价值102 = 1000;
                    玩家充值模块(flag102, 充值价值102);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz2000.txt";
                bool flag103 = FileOperation.Read2000(Character.Account.V.ToString());
                if (flag103)
                {
                    int 充值价值103 = 2000;
                    玩家充值模块(flag103, 充值价值103);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz3000.txt";
                bool flag104 = FileOperation.Read3000(Character.Account.V.ToString());
                if (flag104)
                {
                    int 充值价值104 = 3000;
                    玩家充值模块(flag104, 充值价值104);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz4000.txt";
                bool flag105 = FileOperation.Read4000(Character.Account.V.ToString());
                if (flag105)
                {
                    int 充值价值105 = 4000;
                    玩家充值模块(flag105, 充值价值105);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz5000.txt";
                bool flag106 = FileOperation.Read5000(Character.Account.V.ToString());
                if (flag106)
                {
                    int 充值价值106 = 5000;
                    玩家充值模块(flag106, 充值价值106);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz6000.txt";
                bool flag107 = FileOperation.Read6000(Character.Account.V.ToString());
                if (flag107)
                {
                    int 充值价值107 = 6000;
                    玩家充值模块(flag107, 充值价值107);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz7000.txt";
                bool flag108 = FileOperation.Read7000(Character.Account.V.ToString());
                if (flag108)
                {
                    int 充值价值108 = 7000;
                    玩家充值模块(flag108, 充值价值108);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz8000.txt";
                bool flag109 = FileOperation.Read8000(Character.Account.V.ToString());
                if (flag109)
                {
                    int 充值价值109 = 8000;
                    玩家充值模块(flag109, 充值价值109);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz9000.txt";
                bool flag110 = FileOperation.Read9000(Character.Account.V.ToString());
                if (flag110)
                {
                    int 充值价值110 = 9000;
                    玩家充值模块(flag110, 充值价值110);
                }
                FileOperation.Path = Config.平台接入目录 + "\\cz10000.txt";
                bool flag111 = FileOperation.Read10000(Character.Account.V.ToString());
                if (flag111)
                {
                    int 充值价值111 = 10000;
                    玩家充值模块(flag111, 充值价值111);
                }
            }
            充值发放 = SEngine.CurrentTime.AddSeconds(5.0);
        }
        
        if (Config.CurrentVersion >= 2 && Character.CurrentLevel >= Config.全服红包等级 && Character.保底参数2.V == 0 && SEngine.CurrentTime.Hour == Config.全服红包时间 && Config.红包开关)
        {
            Character.保底参数2.V++;
            int n = SEngine.Random.Next(1, Config.全服红包货币数量);
            Character.Currencies[(CurrencyType)Config.GlobalBonusCurrencyType] += n;
            int amount = Character.Currencies[(CurrencyType)Config.GlobalBonusCurrencyType];
            byte currency = (byte)Config.GlobalBonusCurrencyType;
            Enqueue(new SyncCurrencyPacket
            {
                Currency = currency,
                Amount = amount
            });
        }

        if (SEngine.CurrentTime.Hour != Config.全服红包时间 && Config.红包开关)
        {
            Character.保底参数2.V = 0;
        }
    }

    public void UpdateCombatPower()
    {
        int total = 0;
        foreach (int pwr in CombatPowerBonus.Values)
            total += pwr;
        CurrentCombatPower = total;
    }

    public void 添加坐骑技能包(byte 坐骑槽, short 坐骑编号)
    {
    }

    public void UserSelectMount(byte id)
    {
        if (Character.Mounts.Contains(id) && GameMount.DataSheet.TryGetValue(id, out var value))
        {
            if (GameMount.DataSheet.TryGetValue(Character.CurrentMount.V, out var value2) && value2.BuffID > 0)
            {
                RemoveBuffEx(value2.BuffID);
            }
            Character.CurrentMount.V = id;
            if (value.BuffID >= 0)
            {
                RemoveBuffEx(value.BuffID);
                Enqueue(new 坐骑面板回执
                {
                    MountID = id
                });
            }
        }
    }

    public bool AddMount(ushort id)
    {
        if (Character.Mounts.Contains(id))
            return false;

        Character.Mounts.Add(id);
        Enqueue(new 同步坐骑数据
        {
            Description = Character.坐骑列表描述()
        });
        return true;
    }

    public void RemovePet(PetObject pet)
    {
        PetInfo.Remove(pet.PInfo);
        Pets.Remove(pet);
        if (PetCount == 0)
        {
            Enqueue(new GameErrorMessagePacket { ErrorCode = 9473 });
        }
    }

    public void IncreasePlayerKills()
    {
        if (Character.MonsterKillCount.V >= Config.暗之门杀怪触发 && Config.暗之门开关 == 1)
        {
            Character.MonsterKillCount.V = 0;
            GuardObject guard = null;
            foreach (int key in MapManager.Guards.Keys)
            {
                if (MapManager.Guards[key].GuardID == 6581)
                    guard = MapManager.Guards[key];
            }
            if (guard != null)
            {
                guard = new GuardObject(GuardInfo.DataSheet[6581], CurrentMap, GameDirection.Down, new Point(CurrentPosition.X, CurrentPosition.Y + 1));
                guard.AutoDisappear = true;
                guard.ExistenceTime = SEngine.CurrentTime.AddSeconds(Config.暗之门时间);
            }
        }
        if (Character.MonsterKillCount.V < 200_000_000 && Config.暗之门开关 == 1)
            Character.MonsterKillCount.V++;
    }

    public void LevelChanged()
    {
        SendPacket(new ObjectLevelUpPacket
        {
            ObjectID = ObjectID,
            CurrentLevel = CurrentLevel
        });
        Guild?.Broadcast(new SyncMemberInfoPacket
        {
            ObjectID = ObjectID,
            对象信息 = CurrentMap.MapID,
            CurrentLevel = CurrentLevel
        });
        CombatPowerBonus[this] = CurrentLevel * 10;
        UpdateCombatPower();
        BonusStats[this] = CharacterProgression.GetData(Job, CurrentLevel);
        RefreshStats();
        if (!Dead)
        {
            CurrentHP = this[Stat.MaxHP];
            CurrentMP = this[Stat.MaxMP];
        }
        Mentor?.Broadcast(new 同步师徒等级
        {
            ObjectID = ObjectID,
            CurrentLevel = CurrentLevel
        });
        if (Mentor != null && Team != null && Mentor.Master != Character && Team.Members.Contains(Mentor.Master))
        {
            Mentor.徒弟经验[Character] += (int)((float)CharacterProgression.MaxExpTable[CurrentLevel] * 0.05f);
            Mentor.师父经验[Character] += (int)((float)CharacterProgression.MaxExpTable[CurrentLevel] * 0.05f);
            if (CurrentDegree != 0)
            {
                Mentor.徒弟金币[Character] += (int)((float)CharacterProgression.MaxExpTable[CurrentLevel] * 0.01f);
                Mentor.师父金币[Character] += (int)((float)CharacterProgression.MaxExpTable[CurrentLevel] * 0.02f);
                Mentor.师父声望[Character] += (int)((float)CharacterProgression.MaxExpTable[CurrentLevel] * 0.03f);
            }
        }
        if (CurrentLevel == 30 && Mentor == null)
        {
            Enqueue(new 同步师门信息
            {
                师门参数 = 师门参数
            });
        }
        if (CurrentLevel >= 99 && Mentor != null && Mentor.MasterID != ObjectID)
        {
            提交出师申请();
        }
    }

    public void Teleport(Map map, AreaType area, Point location = default(Point))
    {
        RemoveAllNeighbors();
        UnbindGrid();

        Enqueue(new ObjectLeaveScenePacket());

        if (CurrentMap.MapID != map.MapID)
        {
            CurrentMap = map;
            CurrentPosition = (area == AreaType.Unknown) ? location : map.GetRandomPosition(area);

            Enqueue(new MapChangedPacket
            {
                MapID = CurrentMap.MapID,
                RouteID = CurrentMap.RouteID,
                Position = CurrentPosition,
                Height = CurrentHeight,
                Direction = (byte)CurrentDirection,
            });

            if (!CurrentMap.QuestMap)
                return;

            foreach (var pet in Pets)
                pet.PetRecall();

            return;
        }

        CurrentPosition = (area == AreaType.Unknown) ? location : map.GetRandomPosition(area);

        Enqueue(new ObjectStopPacket
        {
            ObjectID = ObjectID,
            Position = CurrentPosition,
            Height = CurrentHeight
        });
        Enqueue(new ObjectEnterScenePacket
        {
            MapID = CurrentMap.MapID,
            Position = CurrentPosition,
            Height = CurrentHeight,
            RouteID = CurrentMap.RouteID,
            RouteStatus = CurrentMap.MapStatus
        });

        //OnLocationChanged(CurrentPosition);

        BindGrid();
        UpdateAllNeighbours();
    }

    public void GainExperience(MonsterObject mon, int amount)
    {
        if (amount > 0 && (CurrentLevel < Config.MaxUserLevel || CurrentExperience < MaxExperience))
        {
            int exp = amount;
            int rate = 0;
            if (mon != null)
            {
                exp = (int)Math.Max(0.0, (double)exp - Math.Round((float)exp * Compute.CalculateLevelRatio(CurrentLevel, mon.CurrentLevel)));
                exp = (int)((decimal)exp * Config.MonsterExperienceMultiplier);
                if (CurrentLevel <= Config.NoobSupportLevel)
                {
                    exp *= 2;
                }
                rate = Math.Min(ExperienceRate, exp);
            }
            int totalexp = exp + rate;
            ExperienceRate -= rate;
            if (totalexp <= 0)
                return;

            int awakeexp = 0;
            if (Character.AwakeningExpEnabled.V)
            {
                awakeexp = (int)((double)totalexp * 0.5);
                if (Character.AwakeningExp.V + awakeexp > Config.MaxAwakeningExp)
                {
                    awakeexp = Config.MaxAwakeningExp - Character.AwakeningExp.V;
                    Character.AwakeningExpEnabled.V = false;
                    Enqueue(new 同步补充变量
                    {
                        变量类型 = 1,
                        变量索引 = 50,
                        ObjectID = ObjectID,
                        变量内容 = 3616 + 激活标识
                    });
                }
                totalexp -= awakeexp;
                Character.AwakeningExp.V = Character.AwakeningExp.V + awakeexp;
            }
            if ((CurrentExperience += totalexp) >= MaxExperience && CurrentLevel < Config.MaxUserLevel)
            {
                while (CurrentExperience >= MaxExperience)
                {
                    CurrentExperience -= MaxExperience;
                    CurrentLevel++;
                }
                LevelChanged();
            }
            Enqueue(new CharacterExperienceChangePacket
            {
                ExperienceGained = totalexp,
                今日增加 = 0,
                经验上限 = 10_000_000,
                ExperienceRate = rate,
                CurrentExperience = CurrentExperience,
                MaxExperience = MaxExperience,
                AwakeningExperienceGained = awakeexp,
                MaxAwakeningExperience = Config.MaxAwakeningExp
            });
        }
        else if (Character.AwakeningExpEnabled.V)
        {
            if (Character.AwakeningExp.V + amount > Config.MaxAwakeningExp)
            {
                amount = Config.MaxAwakeningExp - Character.AwakeningExp.V;
                Character.AwakeningExpEnabled.V = false;
                Enqueue(new 同步补充变量
                {
                    变量类型 = 1,
                    变量索引 = 50,
                    ObjectID = ObjectID,
                    变量内容 = 3616 + 激活标识
                });
            }
            Character.AwakeningExp.V = Character.AwakeningExp.V + amount;
            Enqueue(new CharacterExperienceChangePacket
            {
                ExperienceGained = 0,
                今日增加 = 0,
                经验上限 = 10_000_000,
                ExperienceRate = ExperienceRate,
                CurrentExperience = CurrentExperience,
                MaxExperience = MaxExperience,
                AwakeningExperienceGained = amount,
                MaxAwakeningExperience = Config.MaxAwakeningExp
            });
        }
    }

    public void GainSkillExperience(ushort skillId)
    {
        if (!Skills.TryGetValue(skillId, out var skill) || CurrentLevel < skill.RequiredLevel)
            return;

        int exp = SEngine.Random.Next(4);
        if (exp > 0)
        {
            if (Equipment.TryGetValue(8, out var v2) && v2.Name == "技巧项链")
                exp += exp;

            if ((skill.Experience.V += (ushort)exp) >= skill.升级经验)
            {
                skill.Experience.V -= (ushort)skill.升级经验;
                skill.Level.V++;
                SendPacket(new SyncSkillLevelPacket
                {
                    SkillID = skill.ID.V,
                    SkillLevel = skill.Level.V
                });
                CombatPowerBonus[skill] = skill.CombatBonus;
                UpdateCombatPower();
                BonusStats[skill] = skill.BonusStats;
                RefreshStats();
            }
            Enqueue(new 同步技能等级
            {
                SkillID = skill.ID.V,
                CurrentExperience = skill.Experience.V,
                CurrentLevel = skill.Level.V
            });
        }
    }

    public void 升级觉醒技能封包(ushort skillID)
    {
        if (Skills.TryGetValue(skillID, out var skill) && CurrentLevel >= skill.RequiredLevel)
        {
            int 升级经验 = skill.升级经验;
            if (Character.AwakeningExp.V >= 升级经验)
            {
                Character.AwakeningExp.V -= 升级经验;
                Enqueue(new CharacterExperienceChangePacket
                {
                    ExperienceGained = 0,
                    今日增加 = 0,
                    经验上限 = 10_000_000,
                    ExperienceRate = ExperienceRate,
                    CurrentExperience = CurrentExperience,
                    MaxExperience = MaxExperience,
                    AwakeningExperienceGained = -升级经验,
                    MaxAwakeningExperience = Config.MaxAwakeningExp
                });
                skill.Level.V++;
                SendPacket(new SyncSkillLevelPacket
                {
                    SkillID = skill.ID.V,
                    SkillLevel = skill.Level.V
                });
                CombatPowerBonus[skill] = skill.CombatBonus;
                UpdateCombatPower();
                BonusStats[skill] = skill.BonusStats;
                RefreshStats();
                Enqueue(new 同步技能等级
                {
                    SkillID = skill.ID.V,
                    CurrentExperience = skill.Experience.V,
                    CurrentLevel = skill.Level.V
                });
            }
        }
    }

    public void 切换觉醒栏经验封包(bool enabled)
    {
        Character.AwakeningExpEnabled.V = !Character.AwakeningExpEnabled.V;
        Enqueue(new 同步补充变量
        {
            变量类型 = 1,
            变量索引 = 50,
            ObjectID = ObjectID,
            变量内容 = (Character.AwakeningExpEnabled.V ? (3680 + 激活标识) : (3616 + 激活标识))
        });
    }

    public bool RemoveSkill(ushort skillID)
    {
        if (!Skills.ContainsKey(skillID))
            return false;

        Enqueue(new 角色移除技能
        {
            技能编号 = skillID
        });
        foreach (ushort item in Skills[skillID].PassiveSkills)
        {
            被动技能.Remove(item);
        }
        foreach (ushort item2 in Skills[skillID].SkillBuffs)
        {
            RemoveBuffEx(item2);
        }
        CombatPowerBonus[Skills[skillID]] = Skills[skillID].CombatBonus;
        UpdateCombatPower();
        BonusStats[Skills[skillID]] = Skills[skillID].BonusStats;
        RefreshStats();
        Skills.Remove(skillID);
        return true;
    }

    public bool AddSkill(ushort skillID)
    {
        if (Skills.ContainsKey(skillID))
            return false;

        Skills[skillID] = new SkillInfo(skillID);
        Enqueue(new 角色学习技能
        {
            ObjectID = ObjectID,
            SkillID = skillID
        });
        if (Skills[skillID].自动装配)
        {
            byte b = 0;
            while (b < 8)
            {
                if (Character.HotKeys.ContainsKey(b))
                {
                    b = (byte)(b + 1);
                    continue;
                }
                Character.HotKeys[b] = Skills[skillID];
                Enqueue(new 角色拖动技能
                {
                    技能栏位 = b,
                    铭文编号 = Skills[skillID].InscriptionID,
                    技能编号 = Skills[skillID].ID.V,
                    技能等级 = Skills[skillID].Level.V
                });
                break;
            }
        }
        if (Equipment.TryGetValue(0, out var v))
        {
            if (v.FirstInscription?.SkillID == skillID)
            {
                Skills[skillID].InscriptionID = v.FirstInscription.ID;
                Enqueue(new 角色装配铭文
                {
                    SkillID = skillID,
                    InscriptionID = v.FirstInscription.ID
                });
            }
            if (v.SecondInscription?.SkillID == skillID)
            {
                Skills[skillID].InscriptionID = v.SecondInscription.ID;
                Enqueue(new 角色装配铭文
                {
                    SkillID = skillID,
                    InscriptionID = v.SecondInscription.ID
                });
            }
        }
        foreach (ushort item in Skills[skillID].PassiveSkills)
        {
            被动技能.Add(item, Skills[skillID]);
        }
        foreach (ushort item2 in Skills[skillID].SkillBuffs)
        {
            AddBuff(item2, this);
        }
        CombatPowerBonus[Skills[skillID]] = Skills[skillID].CombatBonus;
        UpdateCombatPower();
        BonusStats[Skills[skillID]] = Skills[skillID].BonusStats;
        RefreshStats();
        if (Config.DefaultSkillLevel >= 1 && Config.CurrentVersion >= 2)
        {
            if (skillID == 4587 || skillID == 1044 || skillID == 1045 || skillID == 1216 || skillID == 1217 || skillID == 1543 || skillID == 1544 || skillID == 2053 || skillID == 2054 || skillID == 2552 || skillID == 2553 || skillID == 3020 || skillID == 3021)
            {
                return true;
            }
            Skills[skillID].Level.V = (byte)Config.DefaultSkillLevel;
            Enqueue(new 同步技能等级
            {
                SkillID = skillID,
                CurrentExperience = 0,
                CurrentLevel = (byte)Config.DefaultSkillLevel
            });
        }
        return true;
    }

    public void 玩家装卸铭文(ushort skillID, byte inscriptionID)
    {
        if (!Skills.TryGetValue(skillID, out var skill) || skill.InscriptionID == inscriptionID)
            return;

        foreach (var id in skill.PassiveSkills)
        {
            被动技能.Remove(id);
        }
        foreach (var id in skill.SkillBuffs)
        {
            if (Buffs.ContainsKey(id))
                RemoveBuff(id);
        }
        foreach (PetObject pet in Pets)
        {
            if (pet.BoundWeapon)
                pet.Die(null, false);
        }
        skill.InscriptionID = inscriptionID;
        Enqueue(new 角色装配铭文
        {
            InscriptionID = inscriptionID,
            SkillID = skillID,
            SkillLevel = skill.Level.V
        });
        foreach (var id in skill.PassiveSkills)
        {
            被动技能.Add(id, skill);
        }
        foreach (var id in skill.SkillBuffs)
        {
            AddBuff(id, this);
        }
        if (skill.SkillCount != 0)
        {
            skill.RemainingCount.V = 0;
            skill.计数时间 = SEngine.CurrentTime.AddMilliseconds((int)skill.PeriodCount);
            Cooldowns[skillID | 0x1000000] = SEngine.CurrentTime.AddMilliseconds((int)skill.PeriodCount);
            Enqueue(new 同步技能计数
            {
                技能编号 = skill.ID.V,
                技能计数 = skill.RemainingCount.V,
                技能冷却 = skill.PeriodCount
            });
        }
        CombatPowerBonus[skill] = skill.CombatBonus;
        UpdateCombatPower();
        BonusStats[skill] = skill.BonusStats;
        RefreshStats();
    }

    public void 玩家穿卸装备(装备穿戴部位 装备部位, EquipmentInfo 原有装备, EquipmentInfo 现有装备)
    {
        if (ItemSetInfo.DataSheet.TryGetValue(0u, out var value))
        {
            BonusStats[套装编号] = value.Stats;
        }
        if (装备部位 == 装备穿戴部位.武器 || 装备部位 == 装备穿戴部位.衣服 || 装备部位 == 装备穿戴部位.披风)
        {
            if (Buffs.TryGetValue(2555, out var v))
            {
                RemoveBuffEx(v.ID.V);
            }
            SendPacket(new 同步角色外形
            {
                对象编号 = ObjectID,
                装备部位 = (byte)装备部位,
                装备编号 = (现有装备?.ID ?? 0),
                升级次数 = (现有装备?.UpgradeCount.V ?? 0)
            });
        }
        if (原有装备 != null)
        {
            string 物品名字 = 原有装备.Name;
            string text = 物品名字;
            if (string.Equals(text, "ProtectionRing", StringComparison.OrdinalIgnoreCase) == false)
            {
                if (string.Equals(text, "ResurrectionRing", StringComparison.OrdinalIgnoreCase))
                {
                    HasResurrectionRing = false;
                }
            }
            else
            {
                ProtectionRing = false;
            }
            if (原有装备.Type == ItemType.Weapon)
            {
                foreach (BuffInfo item in Buffs.Values.ToList())
                {
                    if (item.绑定武器 && (item.Caster == null || item.Caster.ObjectID == ObjectID))
                    {
                        RemoveBuff(item.ID.V);
                    }
                }
            }
            if (原有装备.Type == ItemType.Weapon)
            {
                foreach (PetObject pet in Pets)
                {
                    if (pet.BoundWeapon)
                        pet.Die(null, skillDeath: false);
                }
            }
            if (Config.CurrentVersion >= 2)
            {
                if (原有装备.Type == ItemType.Weapon)
                {
                    Character.祖玛套装件武器数.V = 0;
                    Character.赤月套装件武器数.V = 0;
                    Character.魔龙套装件武器数.V = 0;
                    Character.苍月套装件武器数.V = 0;
                    Character.星王套装件武器数.V = 0;
                    Character.特殊1套装件武器数.V = 0;
                    Character.特殊2套装件武器数.V = 0;
                    Character.特殊3套装件武器数.V = 0;
                    Character.通用套装1件武器数.V = 0;
                    Character.通用套装2件武器数.V = 0;
                    Character.通用套装3件武器数.V = 0;
                    Character.通用套装4件武器数.V = 0;
                    Character.通用套装5件武器数.V = 0;
                    Character.通用套装6件武器数.V = 0;
                }
                if (原有装备.Type == ItemType.Armour)
                {
                    Character.祖玛套装件衣服数.V = 0;
                    Character.赤月套装件衣服数.V = 0;
                    Character.魔龙套装件衣服数.V = 0;
                    Character.苍月套装件衣服数.V = 0;
                    Character.星王套装件衣服数.V = 0;
                    Character.特殊1套装件衣服数.V = 0;
                    Character.特殊2套装件衣服数.V = 0;
                    Character.特殊3套装件衣服数.V = 0;
                    Character.通用套装1件衣服数.V = 0;
                    Character.通用套装2件衣服数.V = 0;
                    Character.通用套装3件衣服数.V = 0;
                    Character.通用套装4件衣服数.V = 0;
                    Character.通用套装5件衣服数.V = 0;
                    Character.通用套装6件衣服数.V = 0;
                }
                if (原有装备.Type == ItemType.Bracelet)
                {
                    Character.祖玛套装件右手镯数.V = 0;
                    Character.祖玛套装件左手镯数.V = 0;
                    Character.赤月套装件右手镯数.V = 0;
                    Character.赤月套装件左手镯数.V = 0;
                    Character.魔龙套装件右手镯数.V = 0;
                    Character.魔龙套装件左手镯数.V = 0;
                    Character.苍月套装件右手镯数.V = 0;
                    Character.苍月套装件左手镯数.V = 0;
                    Character.星王套装件右手镯数.V = 0;
                    Character.星王套装件左手镯数.V = 0;
                    Character.特殊1套装件右手镯数.V = 0;
                    Character.特殊1套装件左手镯数.V = 0;
                    Character.特殊2套装件右手镯数.V = 0;
                    Character.特殊2套装件左手镯数.V = 0;
                    Character.特殊3套装件右手镯数.V = 0;
                    Character.特殊3套装件左手镯数.V = 0;
                    Character.通用套装1件左手镯数.V = 0;
                    Character.通用套装2件左手镯数.V = 0;
                    Character.通用套装3件左手镯数.V = 0;
                    Character.通用套装4件左手镯数.V = 0;
                    Character.通用套装5件左手镯数.V = 0;
                    Character.通用套装6件左手镯数.V = 0;
                    Character.通用套装1件右手镯数.V = 0;
                    Character.通用套装2件右手镯数.V = 0;
                    Character.通用套装3件右手镯数.V = 0;
                    Character.通用套装4件右手镯数.V = 0;
                    Character.通用套装5件右手镯数.V = 0;
                    Character.通用套装6件右手镯数.V = 0;
                }
                if (原有装备.Type == ItemType.Ring)
                {
                    Character.祖玛套装件右戒指数.V = 0;
                    Character.祖玛套装件左戒指数.V = 0;
                    Character.赤月套装件右戒指数.V = 0;
                    Character.赤月套装件左戒指数.V = 0;
                    Character.魔龙套装件右戒指数.V = 0;
                    Character.魔龙套装件左戒指数.V = 0;
                    Character.苍月套装件右戒指数.V = 0;
                    Character.苍月套装件左戒指数.V = 0;
                    Character.星王套装件右戒指数.V = 0;
                    Character.星王套装件左戒指数.V = 0;
                    Character.特殊1套装件右戒指数.V = 0;
                    Character.特殊1套装件左戒指数.V = 0;
                    Character.特殊2套装件右戒指数.V = 0;
                    Character.特殊2套装件左戒指数.V = 0;
                    Character.特殊3套装件右戒指数.V = 0;
                    Character.特殊3套装件左戒指数.V = 0;
                    Character.通用套装1件左戒指数.V = 0;
                    Character.通用套装2件左戒指数.V = 0;
                    Character.通用套装3件左戒指数.V = 0;
                    Character.通用套装4件左戒指数.V = 0;
                    Character.通用套装5件左戒指数.V = 0;
                    Character.通用套装6件左戒指数.V = 0;
                    Character.通用套装1件右戒指数.V = 0;
                    Character.通用套装2件右戒指数.V = 0;
                    Character.通用套装3件右戒指数.V = 0;
                    Character.通用套装4件右戒指数.V = 0;
                    Character.通用套装5件右戒指数.V = 0;
                    Character.通用套装6件右戒指数.V = 0;
                }
                if (原有装备.Type == ItemType.Necklace)
                {
                    Character.祖玛套装件项链数.V = 0;
                    Character.赤月套装件项链数.V = 0;
                    Character.魔龙套装件项链数.V = 0;
                    Character.苍月套装件项链数.V = 0;
                    Character.星王套装件项链数.V = 0;
                    Character.特殊1套装件项链数.V = 0;
                    Character.特殊2套装件项链数.V = 0;
                    Character.特殊3套装件项链数.V = 0;
                    Character.通用套装1件项链数.V = 0;
                    Character.通用套装2件项链数.V = 0;
                    Character.通用套装3件项链数.V = 0;
                    Character.通用套装4件项链数.V = 0;
                    Character.通用套装5件项链数.V = 0;
                    Character.通用套装6件项链数.V = 0;
                }
                if (原有装备.Type == ItemType.Helmet)
                {
                    Character.祖玛套装件头盔数.V = 0;
                    Character.赤月套装件头盔数.V = 0;
                    Character.魔龙套装件头盔数.V = 0;
                    Character.苍月套装件头盔数.V = 0;
                    Character.星王套装件头盔数.V = 0;
                    Character.特殊1套装件头盔数.V = 0;
                    Character.特殊2套装件头盔数.V = 0;
                    Character.特殊3套装件头盔数.V = 0;
                    Character.通用套装1件头盔数.V = 0;
                    Character.通用套装2件头盔数.V = 0;
                    Character.通用套装3件头盔数.V = 0;
                    Character.通用套装4件头盔数.V = 0;
                    Character.通用套装5件头盔数.V = 0;
                    Character.通用套装6件头盔数.V = 0;
                }
            }
            if (原有装备.FirstInscription != null)
            {
                玩家装卸铭文(原有装备.FirstInscription.SkillID, 0);
            }
            if (原有装备.SecondInscription != null)
            {
                玩家装卸铭文(原有装备.SecondInscription.SkillID, 0);
            }
            if (Buffs.TryGetValue(原有装备.BuffID, out var v2))
            {
                RemoveBuffEx(v2.ID.V);
            }
            CombatPowerBonus.Remove(原有装备);
            BonusStats.Remove(原有装备);
            if (Config.装备技能开关 == 1 && !string.IsNullOrEmpty(原有装备.EquipInfo.装备特技) && GameSkill.DataSheet.TryGetValue(原有装备.EquipInfo.装备特技, out var value2))
            {
                RemoveSkill(value2.OwnSkillID);
            }
            if ((原有装备 != null && 原有装备.ID == 99930026) || (现有装备 != null && 现有装备.ID == 99930026))
            {
                ActivateParalysisRing();
            }
        }
        if (现有装备 != null)
        {
            string 物品名字2 = 现有装备.Name;
            string text2 = 物品名字2;
            if (string.Equals(text2, "ResurrectionRing", StringComparison.OrdinalIgnoreCase) == false)
            {
                if (string.Equals(text2, "ProtectionRing", StringComparison.OrdinalIgnoreCase))
                {
                    ProtectionRing = true;
                }
            }
            else
            {
                HasResurrectionRing = true;
            }
            if (现有装备.FirstInscription != null)
            {
                玩家装卸铭文(现有装备.FirstInscription.SkillID, 现有装备.FirstInscription.ID);
            }
            if (现有装备.SecondInscription != null)
            {
                玩家装卸铭文(现有装备.SecondInscription.SkillID, 现有装备.SecondInscription.ID);
            }
            CombatPowerBonus[现有装备] = 现有装备.CombatPower;
            if (现有装备.Dura.V > 0)
            {
                BonusStats.Add(现有装备, 现有装备.Stats);
            }
            if (现有装备.Info.BuffID > 0)
            {
                AddBuff(现有装备.BuffID, this);
            }
            if (Config.装备技能开关 == 1 && !string.IsNullOrEmpty(现有装备.EquipInfo.装备特技) && GameSkill.DataSheet.TryGetValue(现有装备.EquipInfo.装备特技, out var value3))
            {
                AddSkill(value3.OwnSkillID);
            }
        }
        if (Config.CurrentVersion >= 2)
        {
            EquipmentInfo v3;
            if (Job == GameObjectRace.Warrior)
            {
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装战)
                {
                    Character.祖玛套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装战)
                {
                    Character.祖玛套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装战)
                {
                    Character.祖玛套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装战)
                {
                    Character.祖玛套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装战)
                {
                    Character.祖玛套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装战)
                {
                    Character.祖玛套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装战)
                {
                    Character.祖玛套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装战)
                {
                    Character.祖玛套装件头盔数.V = 1;
                }
                Character.祖玛套装件数.V = Character.祖玛套装件头盔数.V + Character.祖玛套装件武器数.V + Character.祖玛套装件项链数.V + Character.祖玛套装件衣服数.V + Character.祖玛套装件左手镯数.V + Character.祖玛套装件左戒指数.V + Character.祖玛套装件右手镯数.V + Character.祖玛套装件右戒指数.V;
                if (Character.祖玛套装件数.V >= Config.祖玛战装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(1u, out var value4))
                {
                    BonusStats[套装编号] = value4.Stats;
                    Character.祖玛套装件数.V = 0;
                    Character.祖玛套装件右戒指数.V = 0;
                    Character.祖玛套装件左戒指数.V = 0;
                    Character.祖玛套装件左手镯数.V = 0;
                    Character.祖玛套装件右手镯数.V = 0;
                    Character.祖玛套装件项链数.V = 0;
                    Character.祖玛套装件衣服数.V = 0;
                    Character.祖玛套装件武器数.V = 0;
                    Character.祖玛套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装战)
                {
                    Character.赤月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装战)
                {
                    Character.赤月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装战)
                {
                    Character.赤月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装战)
                {
                    Character.赤月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装战)
                {
                    Character.赤月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装战)
                {
                    Character.赤月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装战)
                {
                    Character.赤月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装战)
                {
                    Character.赤月套装件头盔数.V = 1;
                }
                Character.赤月套装件数.V = Character.赤月套装件头盔数.V + Character.赤月套装件武器数.V + Character.赤月套装件项链数.V + Character.赤月套装件衣服数.V + Character.赤月套装件左手镯数.V + Character.赤月套装件左戒指数.V + Character.赤月套装件右手镯数.V + Character.赤月套装件右戒指数.V;
                if (Character.赤月套装件数.V >= Config.赤月战装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(7u, out var value5))
                {
                    BonusStats[套装编号] = value5.Stats;
                    Character.赤月套装件数.V = 0;
                    Character.赤月套装件右戒指数.V = 0;
                    Character.赤月套装件左戒指数.V = 0;
                    Character.赤月套装件左手镯数.V = 0;
                    Character.赤月套装件右手镯数.V = 0;
                    Character.赤月套装件项链数.V = 0;
                    Character.赤月套装件衣服数.V = 0;
                    Character.赤月套装件武器数.V = 0;
                    Character.赤月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装战)
                {
                    Character.魔龙套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装战)
                {
                    Character.魔龙套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装战)
                {
                    Character.魔龙套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装战)
                {
                    Character.魔龙套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装战)
                {
                    Character.魔龙套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装战)
                {
                    Character.魔龙套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装战)
                {
                    Character.魔龙套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装战)
                {
                    Character.魔龙套装件头盔数.V = 1;
                }
                Character.魔龙套装件数.V = Character.魔龙套装件头盔数.V + Character.魔龙套装件武器数.V + Character.魔龙套装件项链数.V + Character.魔龙套装件衣服数.V + Character.魔龙套装件左手镯数.V + Character.魔龙套装件左戒指数.V + Character.魔龙套装件右手镯数.V + Character.魔龙套装件右戒指数.V;
                if (Character.魔龙套装件数.V >= Config.魔龙战装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(13u, out var value6))
                {
                    BonusStats[套装编号] = value6.Stats;
                    Character.魔龙套装件数.V = 0;
                    Character.魔龙套装件右戒指数.V = 0;
                    Character.魔龙套装件左戒指数.V = 0;
                    Character.魔龙套装件左手镯数.V = 0;
                    Character.魔龙套装件右手镯数.V = 0;
                    Character.魔龙套装件项链数.V = 0;
                    Character.魔龙套装件衣服数.V = 0;
                    Character.魔龙套装件武器数.V = 0;
                    Character.魔龙套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装战)
                {
                    Character.苍月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装战)
                {
                    Character.苍月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装战)
                {
                    Character.苍月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装战)
                {
                    Character.苍月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装战)
                {
                    Character.苍月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装战)
                {
                    Character.苍月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装战)
                {
                    Character.苍月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装战)
                {
                    Character.苍月套装件头盔数.V = 1;
                }
                Character.苍月套装件数.V = Character.苍月套装件头盔数.V + Character.苍月套装件武器数.V + Character.苍月套装件项链数.V + Character.苍月套装件衣服数.V + Character.苍月套装件左手镯数.V + Character.苍月套装件左戒指数.V + Character.苍月套装件右手镯数.V + Character.苍月套装件右戒指数.V;
                if (Character.苍月套装件数.V >= Config.苍月战装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(19u, out var value7))
                {
                    BonusStats[套装编号] = value7.Stats;
                    Character.苍月套装件数.V = 0;
                    Character.苍月套装件右戒指数.V = 0;
                    Character.苍月套装件左戒指数.V = 0;
                    Character.苍月套装件左手镯数.V = 0;
                    Character.苍月套装件右手镯数.V = 0;
                    Character.苍月套装件项链数.V = 0;
                    Character.苍月套装件衣服数.V = 0;
                    Character.苍月套装件武器数.V = 0;
                    Character.苍月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装战)
                {
                    Character.星王套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装战)
                {
                    Character.星王套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装战)
                {
                    Character.星王套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装战)
                {
                    Character.星王套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装战)
                {
                    Character.星王套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装战)
                {
                    Character.星王套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装战)
                {
                    Character.星王套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装战)
                {
                    Character.星王套装件头盔数.V = 1;
                }
                Character.星王套装件数.V = Character.星王套装件头盔数.V + Character.星王套装件武器数.V + Character.星王套装件项链数.V + Character.星王套装件衣服数.V + Character.星王套装件左手镯数.V + Character.星王套装件左戒指数.V + Character.星王套装件右手镯数.V + Character.星王套装件右戒指数.V;
                if (Character.星王套装件数.V >= Config.星王战装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(25u, out var value8))
                {
                    BonusStats[套装编号] = value8.Stats;
                    Character.星王套装件数.V = 0;
                    Character.星王套装件右戒指数.V = 0;
                    Character.星王套装件左戒指数.V = 0;
                    Character.星王套装件左手镯数.V = 0;
                    Character.星王套装件右手镯数.V = 0;
                    Character.星王套装件项链数.V = 0;
                    Character.星王套装件衣服数.V = 0;
                    Character.星王套装件武器数.V = 0;
                    Character.星王套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装战)
                {
                    Character.特殊1套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装战)
                {
                    Character.特殊1套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装战)
                {
                    Character.特殊1套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装战)
                {
                    Character.特殊1套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装战)
                {
                    Character.特殊1套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装战)
                {
                    Character.特殊1套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装战)
                {
                    Character.特殊1套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装战)
                {
                    Character.特殊1套装件头盔数.V = 1;
                }
                Character.特殊1套装件数.V = Character.特殊1套装件头盔数.V + Character.特殊1套装件武器数.V + Character.特殊1套装件项链数.V + Character.特殊1套装件衣服数.V + Character.特殊1套装件左手镯数.V + Character.特殊1套装件左戒指数.V + Character.特殊1套装件右手镯数.V + Character.特殊1套装件右戒指数.V;
                if (Character.特殊1套装件数.V >= Config.特殊1战装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(31u, out var value9))
                {
                    BonusStats[套装编号] = value9.Stats;
                    Character.特殊1套装件数.V = 0;
                    Character.特殊1套装件右戒指数.V = 0;
                    Character.特殊1套装件左戒指数.V = 0;
                    Character.特殊1套装件左手镯数.V = 0;
                    Character.特殊1套装件右手镯数.V = 0;
                    Character.特殊1套装件项链数.V = 0;
                    Character.特殊1套装件衣服数.V = 0;
                    Character.特殊1套装件武器数.V = 0;
                    Character.特殊1套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装战)
                {
                    Character.特殊2套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装战)
                {
                    Character.特殊2套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装战)
                {
                    Character.特殊2套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装战)
                {
                    Character.特殊2套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装战)
                {
                    Character.特殊2套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装战)
                {
                    Character.特殊2套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装战)
                {
                    Character.特殊2套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装战)
                {
                    Character.特殊2套装件头盔数.V = 1;
                }
                Character.特殊2套装件数.V = Character.特殊2套装件头盔数.V + Character.特殊2套装件武器数.V + Character.特殊2套装件项链数.V + Character.特殊2套装件衣服数.V + Character.特殊2套装件左手镯数.V + Character.特殊2套装件左戒指数.V + Character.特殊2套装件右手镯数.V + Character.特殊2套装件右戒指数.V;
                if (Character.特殊2套装件数.V >= Config.特殊2战装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(37u, out var value10))
                {
                    BonusStats[套装编号] = value10.Stats;
                    Character.特殊2套装件数.V = 0;
                    Character.特殊2套装件右戒指数.V = 0;
                    Character.特殊2套装件左戒指数.V = 0;
                    Character.特殊2套装件左手镯数.V = 0;
                    Character.特殊2套装件右手镯数.V = 0;
                    Character.特殊2套装件项链数.V = 0;
                    Character.特殊2套装件衣服数.V = 0;
                    Character.特殊2套装件武器数.V = 0;
                    Character.特殊2套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装战)
                {
                    Character.特殊3套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装战)
                {
                    Character.特殊3套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装战)
                {
                    Character.特殊3套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装战)
                {
                    Character.特殊3套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装战)
                {
                    Character.特殊3套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装战)
                {
                    Character.特殊3套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装战)
                {
                    Character.特殊3套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Warrior && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装战)
                {
                    Character.特殊3套装件头盔数.V = 1;
                }
                Character.特殊3套装件数.V = Character.特殊3套装件头盔数.V + Character.特殊3套装件武器数.V + Character.特殊3套装件项链数.V + Character.特殊3套装件衣服数.V + Character.特殊3套装件左手镯数.V + Character.特殊3套装件左戒指数.V + Character.特殊3套装件右手镯数.V + Character.特殊3套装件右戒指数.V;
                if (Character.特殊3套装件数.V >= Config.特殊3战装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(43u, out var value11))
                {
                    BonusStats[套装编号] = value11.Stats;
                    Character.特殊3套装件数.V = 0;
                    Character.特殊3套装件右戒指数.V = 0;
                    Character.特殊3套装件左戒指数.V = 0;
                    Character.特殊3套装件左手镯数.V = 0;
                    Character.特殊3套装件右手镯数.V = 0;
                    Character.特殊3套装件项链数.V = 0;
                    Character.特殊3套装件衣服数.V = 0;
                    Character.特殊3套装件武器数.V = 0;
                    Character.特殊3套装件头盔数.V = 0;
                }
            }
            if (Job == GameObjectRace.Wizard)
            {
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装法)
                {
                    Character.祖玛套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装法)
                {
                    Character.祖玛套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装法)
                {
                    Character.祖玛套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装法)
                {
                    Character.祖玛套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装法)
                {
                    Character.祖玛套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装法)
                {
                    Character.祖玛套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装法)
                {
                    Character.祖玛套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装法)
                {
                    Character.祖玛套装件头盔数.V = 1;
                }
                Character.祖玛套装件数.V = Character.祖玛套装件头盔数.V + Character.祖玛套装件武器数.V + Character.祖玛套装件项链数.V + Character.祖玛套装件衣服数.V + Character.祖玛套装件左手镯数.V + Character.祖玛套装件左戒指数.V + Character.祖玛套装件右手镯数.V + Character.祖玛套装件右戒指数.V;
                if (Character.祖玛套装件数.V >= Config.祖玛法装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(2u, out var value12))
                {
                    BonusStats[套装编号] = value12.Stats;
                    Character.祖玛套装件数.V = 0;
                    Character.祖玛套装件右戒指数.V = 0;
                    Character.祖玛套装件左戒指数.V = 0;
                    Character.祖玛套装件左手镯数.V = 0;
                    Character.祖玛套装件右手镯数.V = 0;
                    Character.祖玛套装件项链数.V = 0;
                    Character.祖玛套装件衣服数.V = 0;
                    Character.祖玛套装件武器数.V = 0;
                    Character.祖玛套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装法)
                {
                    Character.赤月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装法)
                {
                    Character.赤月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装法)
                {
                    Character.赤月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装法)
                {
                    Character.赤月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装法)
                {
                    Character.赤月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装法)
                {
                    Character.赤月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装法)
                {
                    Character.赤月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装法)
                {
                    Character.赤月套装件头盔数.V = 1;
                }
                Character.赤月套装件数.V = Character.赤月套装件头盔数.V + Character.赤月套装件武器数.V + Character.赤月套装件项链数.V + Character.赤月套装件衣服数.V + Character.赤月套装件左手镯数.V + Character.赤月套装件左戒指数.V + Character.赤月套装件右手镯数.V + Character.赤月套装件右戒指数.V;
                if (Character.赤月套装件数.V >= Config.赤月法装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(8u, out var value13))
                {
                    BonusStats[套装编号] = value13.Stats;
                    Character.赤月套装件数.V = 0;
                    Character.赤月套装件右戒指数.V = 0;
                    Character.赤月套装件左戒指数.V = 0;
                    Character.赤月套装件左手镯数.V = 0;
                    Character.赤月套装件右手镯数.V = 0;
                    Character.赤月套装件项链数.V = 0;
                    Character.赤月套装件衣服数.V = 0;
                    Character.赤月套装件武器数.V = 0;
                    Character.赤月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装法)
                {
                    Character.魔龙套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装法)
                {
                    Character.魔龙套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装法)
                {
                    Character.魔龙套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装法)
                {
                    Character.魔龙套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装法)
                {
                    Character.魔龙套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装法)
                {
                    Character.魔龙套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装法)
                {
                    Character.魔龙套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装法)
                {
                    Character.魔龙套装件头盔数.V = 1;
                }
                Character.魔龙套装件数.V = Character.魔龙套装件头盔数.V + Character.魔龙套装件武器数.V + Character.魔龙套装件项链数.V + Character.魔龙套装件衣服数.V + Character.魔龙套装件左手镯数.V + Character.魔龙套装件左戒指数.V + Character.魔龙套装件右手镯数.V + Character.魔龙套装件右戒指数.V;
                if (Character.魔龙套装件数.V >= Config.魔龙法装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(14u, out var value14))
                {
                    BonusStats[套装编号] = value14.Stats;
                    Character.魔龙套装件数.V = 0;
                    Character.魔龙套装件右戒指数.V = 0;
                    Character.魔龙套装件左戒指数.V = 0;
                    Character.魔龙套装件左手镯数.V = 0;
                    Character.魔龙套装件右手镯数.V = 0;
                    Character.魔龙套装件项链数.V = 0;
                    Character.魔龙套装件衣服数.V = 0;
                    Character.魔龙套装件武器数.V = 0;
                    Character.魔龙套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装法)
                {
                    Character.苍月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装法)
                {
                    Character.苍月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装法)
                {
                    Character.苍月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装法)
                {
                    Character.苍月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装法)
                {
                    Character.苍月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装法)
                {
                    Character.苍月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装法)
                {
                    Character.苍月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装法)
                {
                    Character.苍月套装件头盔数.V = 1;
                }
                Character.苍月套装件数.V = Character.苍月套装件头盔数.V + Character.苍月套装件武器数.V + Character.苍月套装件项链数.V + Character.苍月套装件衣服数.V + Character.苍月套装件左手镯数.V + Character.苍月套装件左戒指数.V + Character.苍月套装件右手镯数.V + Character.苍月套装件右戒指数.V;
                if (Character.苍月套装件数.V >= Config.苍月法装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(20u, out var value15))
                {
                    BonusStats[套装编号] = value15.Stats;
                    Character.苍月套装件数.V = 0;
                    Character.苍月套装件右戒指数.V = 0;
                    Character.苍月套装件左戒指数.V = 0;
                    Character.苍月套装件左手镯数.V = 0;
                    Character.苍月套装件右手镯数.V = 0;
                    Character.苍月套装件项链数.V = 0;
                    Character.苍月套装件衣服数.V = 0;
                    Character.苍月套装件武器数.V = 0;
                    Character.苍月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装法)
                {
                    Character.星王套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装法)
                {
                    Character.星王套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装法)
                {
                    Character.星王套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装法)
                {
                    Character.星王套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装法)
                {
                    Character.星王套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装法)
                {
                    Character.星王套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装法)
                {
                    Character.星王套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装法)
                {
                    Character.星王套装件头盔数.V = 1;
                }
                Character.星王套装件数.V = Character.星王套装件头盔数.V + Character.星王套装件武器数.V + Character.星王套装件项链数.V + Character.星王套装件衣服数.V + Character.星王套装件左手镯数.V + Character.星王套装件左戒指数.V + Character.星王套装件右手镯数.V + Character.星王套装件右戒指数.V;
                if (Character.星王套装件数.V >= Config.星王法装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(26u, out var value16))
                {
                    BonusStats[套装编号] = value16.Stats;
                    Character.星王套装件数.V = 0;
                    Character.星王套装件右戒指数.V = 0;
                    Character.星王套装件左戒指数.V = 0;
                    Character.星王套装件左手镯数.V = 0;
                    Character.星王套装件右手镯数.V = 0;
                    Character.星王套装件项链数.V = 0;
                    Character.星王套装件衣服数.V = 0;
                    Character.星王套装件武器数.V = 0;
                    Character.星王套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装法)
                {
                    Character.特殊1套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装法)
                {
                    Character.特殊1套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装法)
                {
                    Character.特殊1套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装法)
                {
                    Character.特殊1套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装法)
                {
                    Character.特殊1套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装法)
                {
                    Character.特殊1套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装法)
                {
                    Character.特殊1套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装法)
                {
                    Character.特殊1套装件头盔数.V = 1;
                }
                Character.特殊1套装件数.V = Character.特殊1套装件头盔数.V + Character.特殊1套装件武器数.V + Character.特殊1套装件项链数.V + Character.特殊1套装件衣服数.V + Character.特殊1套装件左手镯数.V + Character.特殊1套装件左戒指数.V + Character.特殊1套装件右手镯数.V + Character.特殊1套装件右戒指数.V;
                if (Character.特殊1套装件数.V >= Config.特殊1法装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(32u, out var value17))
                {
                    BonusStats[套装编号] = value17.Stats;
                    Character.特殊1套装件数.V = 0;
                    Character.特殊1套装件右戒指数.V = 0;
                    Character.特殊1套装件左戒指数.V = 0;
                    Character.特殊1套装件左手镯数.V = 0;
                    Character.特殊1套装件右手镯数.V = 0;
                    Character.特殊1套装件项链数.V = 0;
                    Character.特殊1套装件衣服数.V = 0;
                    Character.特殊1套装件武器数.V = 0;
                    Character.特殊1套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装法)
                {
                    Character.特殊2套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装法)
                {
                    Character.特殊2套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装法)
                {
                    Character.特殊2套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装法)
                {
                    Character.特殊2套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装法)
                {
                    Character.特殊2套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装法)
                {
                    Character.特殊2套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装法)
                {
                    Character.特殊2套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装法)
                {
                    Character.特殊2套装件头盔数.V = 1;
                }
                Character.特殊2套装件数.V = Character.特殊2套装件头盔数.V + Character.特殊2套装件武器数.V + Character.特殊2套装件项链数.V + Character.特殊2套装件衣服数.V + Character.特殊2套装件左手镯数.V + Character.特殊2套装件左戒指数.V + Character.特殊2套装件右手镯数.V + Character.特殊2套装件右戒指数.V;
                if (Character.特殊2套装件数.V >= Config.特殊2法装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(38u, out var value18))
                {
                    BonusStats[套装编号] = value18.Stats;
                    Character.特殊2套装件数.V = 0;
                    Character.特殊2套装件右戒指数.V = 0;
                    Character.特殊2套装件左戒指数.V = 0;
                    Character.特殊2套装件左手镯数.V = 0;
                    Character.特殊2套装件右手镯数.V = 0;
                    Character.特殊2套装件项链数.V = 0;
                    Character.特殊2套装件衣服数.V = 0;
                    Character.特殊2套装件武器数.V = 0;
                    Character.特殊2套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装法)
                {
                    Character.特殊3套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装法)
                {
                    Character.特殊3套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装法)
                {
                    Character.特殊3套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装法)
                {
                    Character.特殊3套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装法)
                {
                    Character.特殊3套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装法)
                {
                    Character.特殊3套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装法)
                {
                    Character.特殊3套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Wizard && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装法)
                {
                    Character.特殊3套装件头盔数.V = 1;
                }
                Character.特殊3套装件数.V = Character.特殊3套装件头盔数.V + Character.特殊3套装件武器数.V + Character.特殊3套装件项链数.V + Character.特殊3套装件衣服数.V + Character.特殊3套装件左手镯数.V + Character.特殊3套装件左戒指数.V + Character.特殊3套装件右手镯数.V + Character.特殊3套装件右戒指数.V;
                if (Character.特殊3套装件数.V >= Config.特殊3法装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(44u, out var value19))
                {
                    BonusStats[套装编号] = value19.Stats;
                    Character.特殊3套装件数.V = 0;
                    Character.特殊3套装件右戒指数.V = 0;
                    Character.特殊3套装件左戒指数.V = 0;
                    Character.特殊3套装件左手镯数.V = 0;
                    Character.特殊3套装件右手镯数.V = 0;
                    Character.特殊3套装件项链数.V = 0;
                    Character.特殊3套装件衣服数.V = 0;
                    Character.特殊3套装件武器数.V = 0;
                    Character.特殊3套装件头盔数.V = 0;
                }
            }
            if (Job == GameObjectRace.Taoist)
            {
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装道)
                {
                    Character.祖玛套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装道)
                {
                    Character.祖玛套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装道)
                {
                    Character.祖玛套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装道)
                {
                    Character.祖玛套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装道)
                {
                    Character.祖玛套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装道)
                {
                    Character.祖玛套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装道)
                {
                    Character.祖玛套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装道)
                {
                    Character.祖玛套装件头盔数.V = 1;
                }
                Character.祖玛套装件数.V = Character.祖玛套装件头盔数.V + Character.祖玛套装件武器数.V + Character.祖玛套装件项链数.V + Character.祖玛套装件衣服数.V + Character.祖玛套装件左手镯数.V + Character.祖玛套装件左戒指数.V + Character.祖玛套装件右手镯数.V + Character.祖玛套装件右戒指数.V;
                if (Character.祖玛套装件数.V >= Config.祖玛道装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(3u, out var value20))
                {
                    BonusStats[套装编号] = value20.Stats;
                    Character.祖玛套装件数.V = 0;
                    Character.祖玛套装件右戒指数.V = 0;
                    Character.祖玛套装件左戒指数.V = 0;
                    Character.祖玛套装件左手镯数.V = 0;
                    Character.祖玛套装件右手镯数.V = 0;
                    Character.祖玛套装件项链数.V = 0;
                    Character.祖玛套装件衣服数.V = 0;
                    Character.祖玛套装件武器数.V = 0;
                    Character.祖玛套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装道)
                {
                    Character.赤月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装道)
                {
                    Character.赤月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装道)
                {
                    Character.赤月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装道)
                {
                    Character.赤月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装道)
                {
                    Character.赤月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装道)
                {
                    Character.赤月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装道)
                {
                    Character.赤月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装道)
                {
                    Character.赤月套装件头盔数.V = 1;
                }
                Character.赤月套装件数.V = Character.赤月套装件头盔数.V + Character.赤月套装件武器数.V + Character.赤月套装件项链数.V + Character.赤月套装件衣服数.V + Character.赤月套装件左手镯数.V + Character.赤月套装件左戒指数.V + Character.赤月套装件右手镯数.V + Character.赤月套装件右戒指数.V;
                if (Character.赤月套装件数.V >= Config.赤月道装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(9u, out var value21))
                {
                    BonusStats[套装编号] = value21.Stats;
                    Character.赤月套装件数.V = 0;
                    Character.赤月套装件右戒指数.V = 0;
                    Character.赤月套装件左戒指数.V = 0;
                    Character.赤月套装件左手镯数.V = 0;
                    Character.赤月套装件右手镯数.V = 0;
                    Character.赤月套装件项链数.V = 0;
                    Character.赤月套装件衣服数.V = 0;
                    Character.赤月套装件武器数.V = 0;
                    Character.赤月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装道)
                {
                    Character.魔龙套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装道)
                {
                    Character.魔龙套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装道)
                {
                    Character.魔龙套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装道)
                {
                    Character.魔龙套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装道)
                {
                    Character.魔龙套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装道)
                {
                    Character.魔龙套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装道)
                {
                    Character.魔龙套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装道)
                {
                    Character.魔龙套装件头盔数.V = 1;
                }
                Character.魔龙套装件数.V = Character.魔龙套装件头盔数.V + Character.魔龙套装件武器数.V + Character.魔龙套装件项链数.V + Character.魔龙套装件衣服数.V + Character.魔龙套装件左手镯数.V + Character.魔龙套装件左戒指数.V + Character.魔龙套装件右手镯数.V + Character.魔龙套装件右戒指数.V;
                if (Character.魔龙套装件数.V >= Config.魔龙道装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(15u, out var value22))
                {
                    BonusStats[套装编号] = value22.Stats;
                    Character.魔龙套装件数.V = 0;
                    Character.魔龙套装件右戒指数.V = 0;
                    Character.魔龙套装件左戒指数.V = 0;
                    Character.魔龙套装件左手镯数.V = 0;
                    Character.魔龙套装件右手镯数.V = 0;
                    Character.魔龙套装件项链数.V = 0;
                    Character.魔龙套装件衣服数.V = 0;
                    Character.魔龙套装件武器数.V = 0;
                    Character.魔龙套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装道)
                {
                    Character.苍月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装道)
                {
                    Character.苍月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装道)
                {
                    Character.苍月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装道)
                {
                    Character.苍月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装道)
                {
                    Character.苍月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装道)
                {
                    Character.苍月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装道)
                {
                    Character.苍月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装道)
                {
                    Character.苍月套装件头盔数.V = 1;
                }
                Character.苍月套装件数.V = Character.苍月套装件头盔数.V + Character.苍月套装件武器数.V + Character.苍月套装件项链数.V + Character.苍月套装件衣服数.V + Character.苍月套装件左手镯数.V + Character.苍月套装件左戒指数.V + Character.苍月套装件右手镯数.V + Character.苍月套装件右戒指数.V;
                if (Character.苍月套装件数.V >= Config.苍月道装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(21u, out var value23))
                {
                    BonusStats[套装编号] = value23.Stats;
                    Character.苍月套装件数.V = 0;
                    Character.苍月套装件右戒指数.V = 0;
                    Character.苍月套装件左戒指数.V = 0;
                    Character.苍月套装件左手镯数.V = 0;
                    Character.苍月套装件右手镯数.V = 0;
                    Character.苍月套装件项链数.V = 0;
                    Character.苍月套装件衣服数.V = 0;
                    Character.苍月套装件武器数.V = 0;
                    Character.苍月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装道)
                {
                    Character.星王套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装道)
                {
                    Character.星王套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装道)
                {
                    Character.星王套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装道)
                {
                    Character.星王套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装道)
                {
                    Character.星王套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装道)
                {
                    Character.星王套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装道)
                {
                    Character.星王套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装道)
                {
                    Character.星王套装件头盔数.V = 1;
                }
                Character.星王套装件数.V = Character.星王套装件头盔数.V + Character.星王套装件武器数.V + Character.星王套装件项链数.V + Character.星王套装件衣服数.V + Character.星王套装件左手镯数.V + Character.星王套装件左戒指数.V + Character.星王套装件右手镯数.V + Character.星王套装件右戒指数.V;
                if (Character.星王套装件数.V >= Config.星王道装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(27u, out var value24))
                {
                    BonusStats[套装编号] = value24.Stats;
                    Character.星王套装件数.V = 0;
                    Character.星王套装件右戒指数.V = 0;
                    Character.星王套装件左戒指数.V = 0;
                    Character.星王套装件左手镯数.V = 0;
                    Character.星王套装件右手镯数.V = 0;
                    Character.星王套装件项链数.V = 0;
                    Character.星王套装件衣服数.V = 0;
                    Character.星王套装件武器数.V = 0;
                    Character.星王套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装道)
                {
                    Character.特殊1套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装道)
                {
                    Character.特殊1套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装道)
                {
                    Character.特殊1套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装道)
                {
                    Character.特殊1套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装道)
                {
                    Character.特殊1套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装道)
                {
                    Character.特殊1套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装道)
                {
                    Character.特殊1套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装道)
                {
                    Character.特殊1套装件头盔数.V = 1;
                }
                Character.特殊1套装件数.V = Character.特殊1套装件头盔数.V + Character.特殊1套装件武器数.V + Character.特殊1套装件项链数.V + Character.特殊1套装件衣服数.V + Character.特殊1套装件左手镯数.V + Character.特殊1套装件左戒指数.V + Character.特殊1套装件右手镯数.V + Character.特殊1套装件右戒指数.V;
                if (Character.特殊1套装件数.V >= Config.特殊1道装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(33u, out var value25))
                {
                    BonusStats[套装编号] = value25.Stats;
                    Character.特殊1套装件数.V = 0;
                    Character.特殊1套装件右戒指数.V = 0;
                    Character.特殊1套装件左戒指数.V = 0;
                    Character.特殊1套装件左手镯数.V = 0;
                    Character.特殊1套装件右手镯数.V = 0;
                    Character.特殊1套装件项链数.V = 0;
                    Character.特殊1套装件衣服数.V = 0;
                    Character.特殊1套装件武器数.V = 0;
                    Character.特殊1套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装道)
                {
                    Character.特殊2套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装道)
                {
                    Character.特殊2套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装道)
                {
                    Character.特殊2套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装道)
                {
                    Character.特殊2套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装道)
                {
                    Character.特殊2套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装道)
                {
                    Character.特殊2套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装道)
                {
                    Character.特殊2套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装道)
                {
                    Character.特殊2套装件头盔数.V = 1;
                }
                Character.特殊2套装件数.V = Character.特殊2套装件头盔数.V + Character.特殊2套装件武器数.V + Character.特殊2套装件项链数.V + Character.特殊2套装件衣服数.V + Character.特殊2套装件左手镯数.V + Character.特殊2套装件左戒指数.V + Character.特殊2套装件右手镯数.V + Character.特殊2套装件右戒指数.V;
                if (Character.特殊2套装件数.V >= Config.特殊2道装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(39u, out var value26))
                {
                    BonusStats[套装编号] = value26.Stats;
                    Character.特殊2套装件数.V = 0;
                    Character.特殊2套装件右戒指数.V = 0;
                    Character.特殊2套装件左戒指数.V = 0;
                    Character.特殊2套装件左手镯数.V = 0;
                    Character.特殊2套装件右手镯数.V = 0;
                    Character.特殊2套装件项链数.V = 0;
                    Character.特殊2套装件衣服数.V = 0;
                    Character.特殊2套装件武器数.V = 0;
                    Character.特殊2套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装道)
                {
                    Character.特殊3套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装道)
                {
                    Character.特殊3套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装道)
                {
                    Character.特殊3套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装道)
                {
                    Character.特殊3套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装道)
                {
                    Character.特殊3套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装道)
                {
                    Character.特殊3套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装道)
                {
                    Character.特殊3套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Taoist && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装道)
                {
                    Character.特殊3套装件头盔数.V = 1;
                }
                Character.特殊3套装件数.V = Character.特殊3套装件头盔数.V + Character.特殊3套装件武器数.V + Character.特殊3套装件项链数.V + Character.特殊3套装件衣服数.V + Character.特殊3套装件左手镯数.V + Character.特殊3套装件左戒指数.V + Character.特殊3套装件右手镯数.V + Character.特殊3套装件右戒指数.V;
                if (Character.特殊3套装件数.V >= Config.特殊3道装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(45u, out var value27))
                {
                    BonusStats[套装编号] = value27.Stats;
                    Character.特殊3套装件数.V = 0;
                    Character.特殊3套装件右戒指数.V = 0;
                    Character.特殊3套装件左戒指数.V = 0;
                    Character.特殊3套装件左手镯数.V = 0;
                    Character.特殊3套装件右手镯数.V = 0;
                    Character.特殊3套装件项链数.V = 0;
                    Character.特殊3套装件衣服数.V = 0;
                    Character.特殊3套装件武器数.V = 0;
                    Character.特殊3套装件头盔数.V = 0;
                }
            }
            if (Job == GameObjectRace.Assassin)
            {
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装刺)
                {
                    Character.祖玛套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装刺)
                {
                    Character.祖玛套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装刺)
                {
                    Character.祖玛套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装刺)
                {
                    Character.祖玛套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装刺)
                {
                    Character.祖玛套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装刺)
                {
                    Character.祖玛套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装刺)
                {
                    Character.祖玛套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装刺)
                {
                    Character.祖玛套装件头盔数.V = 1;
                }
                Character.祖玛套装件数.V = Character.祖玛套装件头盔数.V + Character.祖玛套装件武器数.V + Character.祖玛套装件项链数.V + Character.祖玛套装件衣服数.V + Character.祖玛套装件左手镯数.V + Character.祖玛套装件左戒指数.V + Character.祖玛套装件右手镯数.V + Character.祖玛套装件右戒指数.V;
                if (Character.祖玛套装件数.V >= Config.祖玛刺装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(4u, out var value28))
                {
                    BonusStats[套装编号] = value28.Stats;
                    Character.祖玛套装件数.V = 0;
                    Character.祖玛套装件右戒指数.V = 0;
                    Character.祖玛套装件左戒指数.V = 0;
                    Character.祖玛套装件左手镯数.V = 0;
                    Character.祖玛套装件右手镯数.V = 0;
                    Character.祖玛套装件项链数.V = 0;
                    Character.祖玛套装件衣服数.V = 0;
                    Character.祖玛套装件武器数.V = 0;
                    Character.祖玛套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装刺)
                {
                    Character.赤月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装刺)
                {
                    Character.赤月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装刺)
                {
                    Character.赤月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装刺)
                {
                    Character.赤月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装刺)
                {
                    Character.赤月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装刺)
                {
                    Character.赤月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装刺)
                {
                    Character.赤月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装刺)
                {
                    Character.赤月套装件头盔数.V = 1;
                }
                Character.赤月套装件数.V = Character.赤月套装件头盔数.V + Character.赤月套装件武器数.V + Character.赤月套装件项链数.V + Character.赤月套装件衣服数.V + Character.赤月套装件左手镯数.V + Character.赤月套装件左戒指数.V + Character.赤月套装件右手镯数.V + Character.赤月套装件右戒指数.V;
                if (Character.赤月套装件数.V >= Config.赤月刺装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(10u, out var value29))
                {
                    BonusStats[套装编号] = value29.Stats;
                    Character.赤月套装件数.V = 0;
                    Character.赤月套装件右戒指数.V = 0;
                    Character.赤月套装件左戒指数.V = 0;
                    Character.赤月套装件左手镯数.V = 0;
                    Character.赤月套装件右手镯数.V = 0;
                    Character.赤月套装件项链数.V = 0;
                    Character.赤月套装件衣服数.V = 0;
                    Character.赤月套装件武器数.V = 0;
                    Character.赤月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装刺)
                {
                    Character.魔龙套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装刺)
                {
                    Character.魔龙套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装刺)
                {
                    Character.魔龙套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装刺)
                {
                    Character.魔龙套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装刺)
                {
                    Character.魔龙套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装刺)
                {
                    Character.魔龙套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装刺)
                {
                    Character.魔龙套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装刺)
                {
                    Character.魔龙套装件头盔数.V = 1;
                }
                Character.魔龙套装件数.V = Character.魔龙套装件头盔数.V + Character.魔龙套装件武器数.V + Character.魔龙套装件项链数.V + Character.魔龙套装件衣服数.V + Character.魔龙套装件左手镯数.V + Character.魔龙套装件左戒指数.V + Character.魔龙套装件右手镯数.V + Character.魔龙套装件右戒指数.V;
                if (Character.魔龙套装件数.V >= Config.魔龙刺装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(16u, out var value30))
                {
                    BonusStats[套装编号] = value30.Stats;
                    Character.魔龙套装件数.V = 0;
                    Character.魔龙套装件右戒指数.V = 0;
                    Character.魔龙套装件左戒指数.V = 0;
                    Character.魔龙套装件左手镯数.V = 0;
                    Character.魔龙套装件右手镯数.V = 0;
                    Character.魔龙套装件项链数.V = 0;
                    Character.魔龙套装件衣服数.V = 0;
                    Character.魔龙套装件武器数.V = 0;
                    Character.魔龙套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装刺)
                {
                    Character.苍月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装刺)
                {
                    Character.苍月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装刺)
                {
                    Character.苍月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装刺)
                {
                    Character.苍月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装刺)
                {
                    Character.苍月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装刺)
                {
                    Character.苍月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装刺)
                {
                    Character.苍月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装刺)
                {
                    Character.苍月套装件头盔数.V = 1;
                }
                Character.苍月套装件数.V = Character.苍月套装件头盔数.V + Character.苍月套装件武器数.V + Character.苍月套装件项链数.V + Character.苍月套装件衣服数.V + Character.苍月套装件左手镯数.V + Character.苍月套装件左戒指数.V + Character.苍月套装件右手镯数.V + Character.苍月套装件右戒指数.V;
                if (Character.苍月套装件数.V >= Config.苍月刺装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(22u, out var value31))
                {
                    BonusStats[套装编号] = value31.Stats;
                    Character.苍月套装件数.V = 0;
                    Character.苍月套装件右戒指数.V = 0;
                    Character.苍月套装件左戒指数.V = 0;
                    Character.苍月套装件左手镯数.V = 0;
                    Character.苍月套装件右手镯数.V = 0;
                    Character.苍月套装件项链数.V = 0;
                    Character.苍月套装件衣服数.V = 0;
                    Character.苍月套装件武器数.V = 0;
                    Character.苍月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装刺)
                {
                    Character.星王套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装刺)
                {
                    Character.星王套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装刺)
                {
                    Character.星王套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装刺)
                {
                    Character.星王套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装刺)
                {
                    Character.星王套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装刺)
                {
                    Character.星王套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装刺)
                {
                    Character.星王套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装刺)
                {
                    Character.星王套装件头盔数.V = 1;
                }
                Character.星王套装件数.V = Character.星王套装件头盔数.V + Character.星王套装件武器数.V + Character.星王套装件项链数.V + Character.星王套装件衣服数.V + Character.星王套装件左手镯数.V + Character.星王套装件左戒指数.V + Character.星王套装件右手镯数.V + Character.星王套装件右戒指数.V;
                if (Character.星王套装件数.V >= Config.星王刺装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(28u, out var value32))
                {
                    BonusStats[套装编号] = value32.Stats;
                    Character.星王套装件数.V = 0;
                    Character.星王套装件右戒指数.V = 0;
                    Character.星王套装件左戒指数.V = 0;
                    Character.星王套装件左手镯数.V = 0;
                    Character.星王套装件右手镯数.V = 0;
                    Character.星王套装件项链数.V = 0;
                    Character.星王套装件衣服数.V = 0;
                    Character.星王套装件武器数.V = 0;
                    Character.星王套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装刺)
                {
                    Character.特殊1套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装刺)
                {
                    Character.特殊1套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装刺)
                {
                    Character.特殊1套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装刺)
                {
                    Character.特殊1套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装刺)
                {
                    Character.特殊1套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装刺)
                {
                    Character.特殊1套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装刺)
                {
                    Character.特殊1套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装刺)
                {
                    Character.特殊1套装件头盔数.V = 1;
                }
                Character.特殊1套装件数.V = Character.特殊1套装件头盔数.V + Character.特殊1套装件武器数.V + Character.特殊1套装件项链数.V + Character.特殊1套装件衣服数.V + Character.特殊1套装件左手镯数.V + Character.特殊1套装件左戒指数.V + Character.特殊1套装件右手镯数.V + Character.特殊1套装件右戒指数.V;
                if (Character.特殊1套装件数.V >= Config.特殊1刺装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(34u, out var value33))
                {
                    BonusStats[套装编号] = value33.Stats;
                    Character.特殊1套装件数.V = 0;
                    Character.特殊1套装件右戒指数.V = 0;
                    Character.特殊1套装件左戒指数.V = 0;
                    Character.特殊1套装件左手镯数.V = 0;
                    Character.特殊1套装件右手镯数.V = 0;
                    Character.特殊1套装件项链数.V = 0;
                    Character.特殊1套装件衣服数.V = 0;
                    Character.特殊1套装件武器数.V = 0;
                    Character.特殊1套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装刺)
                {
                    Character.特殊2套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装刺)
                {
                    Character.特殊2套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装刺)
                {
                    Character.特殊2套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装刺)
                {
                    Character.特殊2套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装刺)
                {
                    Character.特殊2套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装刺)
                {
                    Character.特殊2套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装刺)
                {
                    Character.特殊2套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装刺)
                {
                    Character.特殊2套装件头盔数.V = 1;
                }
                Character.特殊2套装件数.V = Character.特殊2套装件头盔数.V + Character.特殊2套装件武器数.V + Character.特殊2套装件项链数.V + Character.特殊2套装件衣服数.V + Character.特殊2套装件左手镯数.V + Character.特殊2套装件左戒指数.V + Character.特殊2套装件右手镯数.V + Character.特殊2套装件右戒指数.V;
                if (Character.特殊2套装件数.V >= Config.特殊2刺装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(40u, out var value34))
                {
                    BonusStats[套装编号] = value34.Stats;
                    Character.特殊2套装件数.V = 0;
                    Character.特殊2套装件右戒指数.V = 0;
                    Character.特殊2套装件左戒指数.V = 0;
                    Character.特殊2套装件左手镯数.V = 0;
                    Character.特殊2套装件右手镯数.V = 0;
                    Character.特殊2套装件项链数.V = 0;
                    Character.特殊2套装件衣服数.V = 0;
                    Character.特殊2套装件武器数.V = 0;
                    Character.特殊2套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装刺)
                {
                    Character.特殊3套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装刺)
                {
                    Character.特殊3套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装刺)
                {
                    Character.特殊3套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装刺)
                {
                    Character.特殊3套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装刺)
                {
                    Character.特殊3套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装刺)
                {
                    Character.特殊3套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装刺)
                {
                    Character.特殊3套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Assassin && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装刺)
                {
                    Character.特殊3套装件头盔数.V = 1;
                }
                Character.特殊3套装件数.V = Character.特殊3套装件头盔数.V + Character.特殊3套装件武器数.V + Character.特殊3套装件项链数.V + Character.特殊3套装件衣服数.V + Character.特殊3套装件左手镯数.V + Character.特殊3套装件左戒指数.V + Character.特殊3套装件右手镯数.V + Character.特殊3套装件右戒指数.V;
                if (Character.特殊3套装件数.V >= Config.特殊3刺装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(46u, out var value35))
                {
                    BonusStats[套装编号] = value35.Stats;
                    Character.特殊3套装件数.V = 0;
                    Character.特殊3套装件右戒指数.V = 0;
                    Character.特殊3套装件左戒指数.V = 0;
                    Character.特殊3套装件左手镯数.V = 0;
                    Character.特殊3套装件右手镯数.V = 0;
                    Character.特殊3套装件项链数.V = 0;
                    Character.特殊3套装件衣服数.V = 0;
                    Character.特殊3套装件武器数.V = 0;
                    Character.特殊3套装件头盔数.V = 0;
                }
            }
            if (Job == GameObjectRace.Archer)
            {
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装弓)
                {
                    Character.祖玛套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装弓)
                {
                    Character.祖玛套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装弓)
                {
                    Character.祖玛套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装弓)
                {
                    Character.祖玛套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装弓)
                {
                    Character.祖玛套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装弓)
                {
                    Character.祖玛套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装弓)
                {
                    Character.祖玛套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装弓)
                {
                    Character.祖玛套装件头盔数.V = 1;
                }
                Character.祖玛套装件数.V = Character.祖玛套装件头盔数.V + Character.祖玛套装件武器数.V + Character.祖玛套装件项链数.V + Character.祖玛套装件衣服数.V + Character.祖玛套装件左手镯数.V + Character.祖玛套装件左戒指数.V + Character.祖玛套装件右手镯数.V + Character.祖玛套装件右戒指数.V;
                if (Character.祖玛套装件数.V >= Config.祖玛弓装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(5u, out var value36))
                {
                    BonusStats[套装编号] = value36.Stats;
                    Character.祖玛套装件数.V = 0;
                    Character.祖玛套装件右戒指数.V = 0;
                    Character.祖玛套装件左戒指数.V = 0;
                    Character.祖玛套装件左手镯数.V = 0;
                    Character.祖玛套装件右手镯数.V = 0;
                    Character.祖玛套装件项链数.V = 0;
                    Character.祖玛套装件衣服数.V = 0;
                    Character.祖玛套装件武器数.V = 0;
                    Character.祖玛套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装弓)
                {
                    Character.赤月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装弓)
                {
                    Character.赤月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装弓)
                {
                    Character.赤月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装弓)
                {
                    Character.赤月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装弓)
                {
                    Character.赤月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装弓)
                {
                    Character.赤月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装弓)
                {
                    Character.赤月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装弓)
                {
                    Character.赤月套装件头盔数.V = 1;
                }
                Character.赤月套装件数.V = Character.赤月套装件头盔数.V + Character.赤月套装件武器数.V + Character.赤月套装件项链数.V + Character.赤月套装件衣服数.V + Character.赤月套装件左手镯数.V + Character.赤月套装件左戒指数.V + Character.赤月套装件右手镯数.V + Character.赤月套装件右戒指数.V;
                if (Character.赤月套装件数.V >= Config.赤月弓装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(11u, out var value37))
                {
                    BonusStats[套装编号] = value37.Stats;
                    Character.赤月套装件数.V = 0;
                    Character.赤月套装件右戒指数.V = 0;
                    Character.赤月套装件左戒指数.V = 0;
                    Character.赤月套装件左手镯数.V = 0;
                    Character.赤月套装件右手镯数.V = 0;
                    Character.赤月套装件项链数.V = 0;
                    Character.赤月套装件衣服数.V = 0;
                    Character.赤月套装件武器数.V = 0;
                    Character.赤月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装弓)
                {
                    Character.魔龙套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装弓)
                {
                    Character.魔龙套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装弓)
                {
                    Character.魔龙套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装弓)
                {
                    Character.魔龙套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装弓)
                {
                    Character.魔龙套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装弓)
                {
                    Character.魔龙套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装弓)
                {
                    Character.魔龙套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装弓)
                {
                    Character.魔龙套装件头盔数.V = 1;
                }
                Character.魔龙套装件数.V = Character.魔龙套装件头盔数.V + Character.魔龙套装件武器数.V + Character.魔龙套装件项链数.V + Character.魔龙套装件衣服数.V + Character.魔龙套装件左手镯数.V + Character.魔龙套装件左戒指数.V + Character.魔龙套装件右手镯数.V + Character.魔龙套装件右戒指数.V;
                if (Character.魔龙套装件数.V >= Config.魔龙弓装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(17u, out var value38))
                {
                    BonusStats[套装编号] = value38.Stats;
                    Character.魔龙套装件数.V = 0;
                    Character.魔龙套装件右戒指数.V = 0;
                    Character.魔龙套装件左戒指数.V = 0;
                    Character.魔龙套装件左手镯数.V = 0;
                    Character.魔龙套装件右手镯数.V = 0;
                    Character.魔龙套装件项链数.V = 0;
                    Character.魔龙套装件衣服数.V = 0;
                    Character.魔龙套装件武器数.V = 0;
                    Character.魔龙套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装弓)
                {
                    Character.苍月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装弓)
                {
                    Character.苍月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装弓)
                {
                    Character.苍月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装弓)
                {
                    Character.苍月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装弓)
                {
                    Character.苍月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装弓)
                {
                    Character.苍月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装弓)
                {
                    Character.苍月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装弓)
                {
                    Character.苍月套装件头盔数.V = 1;
                }
                Character.苍月套装件数.V = Character.苍月套装件头盔数.V + Character.苍月套装件武器数.V + Character.苍月套装件项链数.V + Character.苍月套装件衣服数.V + Character.苍月套装件左手镯数.V + Character.苍月套装件左戒指数.V + Character.苍月套装件右手镯数.V + Character.苍月套装件右戒指数.V;
                if (Character.苍月套装件数.V >= Config.苍月弓装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(23u, out var value39))
                {
                    BonusStats[套装编号] = value39.Stats;
                    Character.苍月套装件数.V = 0;
                    Character.苍月套装件右戒指数.V = 0;
                    Character.苍月套装件左戒指数.V = 0;
                    Character.苍月套装件左手镯数.V = 0;
                    Character.苍月套装件右手镯数.V = 0;
                    Character.苍月套装件项链数.V = 0;
                    Character.苍月套装件衣服数.V = 0;
                    Character.苍月套装件武器数.V = 0;
                    Character.苍月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装弓)
                {
                    Character.星王套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装弓)
                {
                    Character.星王套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装弓)
                {
                    Character.星王套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装弓)
                {
                    Character.星王套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装弓)
                {
                    Character.星王套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装弓)
                {
                    Character.星王套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装弓)
                {
                    Character.星王套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装弓)
                {
                    Character.星王套装件头盔数.V = 1;
                }
                Character.星王套装件数.V = Character.星王套装件头盔数.V + Character.星王套装件武器数.V + Character.星王套装件项链数.V + Character.星王套装件衣服数.V + Character.星王套装件左手镯数.V + Character.星王套装件左戒指数.V + Character.星王套装件右手镯数.V + Character.星王套装件右戒指数.V;
                if (Character.星王套装件数.V >= Config.星王弓装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(29u, out var value40))
                {
                    BonusStats[套装编号] = value40.Stats;
                    Character.星王套装件数.V = 0;
                    Character.星王套装件右戒指数.V = 0;
                    Character.星王套装件左戒指数.V = 0;
                    Character.星王套装件左手镯数.V = 0;
                    Character.星王套装件右手镯数.V = 0;
                    Character.星王套装件项链数.V = 0;
                    Character.星王套装件衣服数.V = 0;
                    Character.星王套装件武器数.V = 0;
                    Character.星王套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装弓)
                {
                    Character.特殊1套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装弓)
                {
                    Character.特殊1套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装弓)
                {
                    Character.特殊1套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装弓)
                {
                    Character.特殊1套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装弓)
                {
                    Character.特殊1套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装弓)
                {
                    Character.特殊1套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装弓)
                {
                    Character.特殊1套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装弓)
                {
                    Character.特殊1套装件头盔数.V = 1;
                }
                Character.特殊1套装件数.V = Character.特殊1套装件头盔数.V + Character.特殊1套装件武器数.V + Character.特殊1套装件项链数.V + Character.特殊1套装件衣服数.V + Character.特殊1套装件左手镯数.V + Character.特殊1套装件左戒指数.V + Character.特殊1套装件右手镯数.V + Character.特殊1套装件右戒指数.V;
                if (Character.特殊1套装件数.V >= Config.特殊1弓装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(35u, out var value41))
                {
                    BonusStats[套装编号] = value41.Stats;
                    Character.特殊1套装件数.V = 0;
                    Character.特殊1套装件右戒指数.V = 0;
                    Character.特殊1套装件左戒指数.V = 0;
                    Character.特殊1套装件左手镯数.V = 0;
                    Character.特殊1套装件右手镯数.V = 0;
                    Character.特殊1套装件项链数.V = 0;
                    Character.特殊1套装件衣服数.V = 0;
                    Character.特殊1套装件武器数.V = 0;
                    Character.特殊1套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装弓)
                {
                    Character.特殊2套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装弓)
                {
                    Character.特殊2套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装弓)
                {
                    Character.特殊2套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装弓)
                {
                    Character.特殊2套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装弓)
                {
                    Character.特殊2套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装弓)
                {
                    Character.特殊2套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装弓)
                {
                    Character.特殊2套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装弓)
                {
                    Character.特殊2套装件头盔数.V = 1;
                }
                Character.特殊2套装件数.V = Character.特殊2套装件头盔数.V + Character.特殊2套装件武器数.V + Character.特殊2套装件项链数.V + Character.特殊2套装件衣服数.V + Character.特殊2套装件左手镯数.V + Character.特殊2套装件左戒指数.V + Character.特殊2套装件右手镯数.V + Character.特殊2套装件右戒指数.V;
                if (Character.特殊2套装件数.V >= Config.特殊2弓装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(41u, out var value42))
                {
                    BonusStats[套装编号] = value42.Stats;
                    Character.特殊2套装件数.V = 0;
                    Character.特殊2套装件右戒指数.V = 0;
                    Character.特殊2套装件左戒指数.V = 0;
                    Character.特殊2套装件左手镯数.V = 0;
                    Character.特殊2套装件右手镯数.V = 0;
                    Character.特殊2套装件项链数.V = 0;
                    Character.特殊2套装件衣服数.V = 0;
                    Character.特殊2套装件武器数.V = 0;
                    Character.特殊2套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装弓)
                {
                    Character.特殊3套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装弓)
                {
                    Character.特殊3套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装弓)
                {
                    Character.特殊3套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装弓)
                {
                    Character.特殊3套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装弓)
                {
                    Character.特殊3套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装弓)
                {
                    Character.特殊3套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装弓)
                {
                    Character.特殊3套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.Archer && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装弓)
                {
                    Character.特殊3套装件头盔数.V = 1;
                }
                Character.特殊3套装件数.V = Character.特殊3套装件头盔数.V + Character.特殊3套装件武器数.V + Character.特殊3套装件项链数.V + Character.特殊3套装件衣服数.V + Character.特殊3套装件左手镯数.V + Character.特殊3套装件左戒指数.V + Character.特殊3套装件右手镯数.V + Character.特殊3套装件右戒指数.V;
                if (Character.特殊3套装件数.V >= Config.特殊3弓装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(47u, out var value43))
                {
                    BonusStats[套装编号] = value43.Stats;
                    Character.特殊3套装件数.V = 0;
                    Character.特殊3套装件右戒指数.V = 0;
                    Character.特殊3套装件左戒指数.V = 0;
                    Character.特殊3套装件左手镯数.V = 0;
                    Character.特殊3套装件右手镯数.V = 0;
                    Character.特殊3套装件项链数.V = 0;
                    Character.特殊3套装件衣服数.V = 0;
                    Character.特殊3套装件武器数.V = 0;
                    Character.特殊3套装件头盔数.V = 0;
                }
            }
            if (Job == GameObjectRace.DragonLance)
            {
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装枪)
                {
                    Character.祖玛套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装枪)
                {
                    Character.祖玛套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装枪)
                {
                    Character.祖玛套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装枪)
                {
                    Character.祖玛套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装枪)
                {
                    Character.祖玛套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装枪)
                {
                    Character.祖玛套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装枪)
                {
                    Character.祖玛套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.祖玛套装枪)
                {
                    Character.祖玛套装件头盔数.V = 1;
                }
                Character.祖玛套装件数.V = Character.祖玛套装件头盔数.V + Character.祖玛套装件武器数.V + Character.祖玛套装件项链数.V + Character.祖玛套装件衣服数.V + Character.祖玛套装件左手镯数.V + Character.祖玛套装件左戒指数.V + Character.祖玛套装件右手镯数.V + Character.祖玛套装件右戒指数.V;
                if (Character.祖玛套装件数.V >= Config.祖玛枪装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(6u, out var value44))
                {
                    BonusStats[套装编号] = value44.Stats;
                    Character.祖玛套装件数.V = 0;
                    Character.祖玛套装件右戒指数.V = 0;
                    Character.祖玛套装件左戒指数.V = 0;
                    Character.祖玛套装件左手镯数.V = 0;
                    Character.祖玛套装件右手镯数.V = 0;
                    Character.祖玛套装件项链数.V = 0;
                    Character.祖玛套装件衣服数.V = 0;
                    Character.祖玛套装件武器数.V = 0;
                    Character.祖玛套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装枪)
                {
                    Character.赤月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装枪)
                {
                    Character.赤月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装枪)
                {
                    Character.赤月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装枪)
                {
                    Character.赤月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装枪)
                {
                    Character.赤月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装枪)
                {
                    Character.赤月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装枪)
                {
                    Character.赤月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.赤月套装枪)
                {
                    Character.赤月套装件头盔数.V = 1;
                }
                Character.赤月套装件数.V = Character.赤月套装件头盔数.V + Character.赤月套装件武器数.V + Character.赤月套装件项链数.V + Character.赤月套装件衣服数.V + Character.赤月套装件左手镯数.V + Character.赤月套装件左戒指数.V + Character.赤月套装件右手镯数.V + Character.赤月套装件右戒指数.V;
                if (Character.赤月套装件数.V >= Config.赤月枪装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(12u, out var value45))
                {
                    BonusStats[套装编号] = value45.Stats;
                    Character.赤月套装件数.V = 0;
                    Character.赤月套装件右戒指数.V = 0;
                    Character.赤月套装件左戒指数.V = 0;
                    Character.赤月套装件左手镯数.V = 0;
                    Character.赤月套装件右手镯数.V = 0;
                    Character.赤月套装件项链数.V = 0;
                    Character.赤月套装件衣服数.V = 0;
                    Character.赤月套装件武器数.V = 0;
                    Character.赤月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装枪)
                {
                    Character.魔龙套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装枪)
                {
                    Character.魔龙套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装枪)
                {
                    Character.魔龙套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装枪)
                {
                    Character.魔龙套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装枪)
                {
                    Character.魔龙套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装枪)
                {
                    Character.魔龙套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装枪)
                {
                    Character.魔龙套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.魔龙套装枪)
                {
                    Character.魔龙套装件头盔数.V = 1;
                }
                Character.魔龙套装件数.V = Character.魔龙套装件头盔数.V + Character.魔龙套装件武器数.V + Character.魔龙套装件项链数.V + Character.魔龙套装件衣服数.V + Character.魔龙套装件左手镯数.V + Character.魔龙套装件左戒指数.V + Character.魔龙套装件右手镯数.V + Character.魔龙套装件右戒指数.V;
                if (Character.魔龙套装件数.V >= Config.魔龙枪装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(18u, out var value46))
                {
                    BonusStats[套装编号] = value46.Stats;
                    Character.魔龙套装件数.V = 0;
                    Character.魔龙套装件右戒指数.V = 0;
                    Character.魔龙套装件左戒指数.V = 0;
                    Character.魔龙套装件左手镯数.V = 0;
                    Character.魔龙套装件右手镯数.V = 0;
                    Character.魔龙套装件项链数.V = 0;
                    Character.魔龙套装件衣服数.V = 0;
                    Character.魔龙套装件武器数.V = 0;
                    Character.魔龙套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装枪)
                {
                    Character.苍月套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装枪)
                {
                    Character.苍月套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装枪)
                {
                    Character.苍月套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装枪)
                {
                    Character.苍月套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装枪)
                {
                    Character.苍月套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装枪)
                {
                    Character.苍月套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装枪)
                {
                    Character.苍月套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.苍月套装枪)
                {
                    Character.苍月套装件头盔数.V = 1;
                }
                Character.苍月套装件数.V = Character.苍月套装件头盔数.V + Character.苍月套装件武器数.V + Character.苍月套装件项链数.V + Character.苍月套装件衣服数.V + Character.苍月套装件左手镯数.V + Character.苍月套装件左戒指数.V + Character.苍月套装件右手镯数.V + Character.苍月套装件右戒指数.V;
                if (Character.苍月套装件数.V >= Config.苍月枪装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(24u, out var value47))
                {
                    BonusStats[套装编号] = value47.Stats;
                    Character.苍月套装件数.V = 0;
                    Character.苍月套装件右戒指数.V = 0;
                    Character.苍月套装件左戒指数.V = 0;
                    Character.苍月套装件左手镯数.V = 0;
                    Character.苍月套装件右手镯数.V = 0;
                    Character.苍月套装件项链数.V = 0;
                    Character.苍月套装件衣服数.V = 0;
                    Character.苍月套装件武器数.V = 0;
                    Character.苍月套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装枪)
                {
                    Character.星王套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装枪)
                {
                    Character.星王套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装枪)
                {
                    Character.星王套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装枪)
                {
                    Character.星王套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装枪)
                {
                    Character.星王套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装枪)
                {
                    Character.星王套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装枪)
                {
                    Character.星王套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.星王套装枪)
                {
                    Character.星王套装件头盔数.V = 1;
                }
                Character.星王套装件数.V = Character.星王套装件头盔数.V + Character.星王套装件武器数.V + Character.星王套装件项链数.V + Character.星王套装件衣服数.V + Character.星王套装件左手镯数.V + Character.星王套装件左戒指数.V + Character.星王套装件右手镯数.V + Character.星王套装件右戒指数.V;
                if (Character.星王套装件数.V >= Config.星王枪装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(30u, out var value48))
                {
                    BonusStats[套装编号] = value48.Stats;
                    Character.星王套装件数.V = 0;
                    Character.星王套装件右戒指数.V = 0;
                    Character.星王套装件左戒指数.V = 0;
                    Character.星王套装件左手镯数.V = 0;
                    Character.星王套装件右手镯数.V = 0;
                    Character.星王套装件项链数.V = 0;
                    Character.星王套装件衣服数.V = 0;
                    Character.星王套装件武器数.V = 0;
                    Character.星王套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装枪)
                {
                    Character.特殊1套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装枪)
                {
                    Character.特殊1套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装枪)
                {
                    Character.特殊1套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装枪)
                {
                    Character.特殊1套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装枪)
                {
                    Character.特殊1套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装枪)
                {
                    Character.特殊1套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装枪)
                {
                    Character.特殊1套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊1套装枪)
                {
                    Character.特殊1套装件头盔数.V = 1;
                }
                Character.特殊1套装件数.V = Character.特殊1套装件头盔数.V + Character.特殊1套装件武器数.V + Character.特殊1套装件项链数.V + Character.特殊1套装件衣服数.V + Character.特殊1套装件左手镯数.V + Character.特殊1套装件左戒指数.V + Character.特殊1套装件右手镯数.V + Character.特殊1套装件右戒指数.V;
                if (Character.特殊1套装件数.V >= Config.特殊1枪装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(36u, out var value49))
                {
                    BonusStats[套装编号] = value49.Stats;
                    Character.特殊1套装件数.V = 0;
                    Character.特殊1套装件右戒指数.V = 0;
                    Character.特殊1套装件左戒指数.V = 0;
                    Character.特殊1套装件左手镯数.V = 0;
                    Character.特殊1套装件右手镯数.V = 0;
                    Character.特殊1套装件项链数.V = 0;
                    Character.特殊1套装件衣服数.V = 0;
                    Character.特殊1套装件武器数.V = 0;
                    Character.特殊1套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装枪)
                {
                    Character.特殊2套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装枪)
                {
                    Character.特殊2套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装枪)
                {
                    Character.特殊2套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装枪)
                {
                    Character.特殊2套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装枪)
                {
                    Character.特殊2套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装枪)
                {
                    Character.特殊2套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装枪)
                {
                    Character.特殊2套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊2套装枪)
                {
                    Character.特殊2套装件头盔数.V = 1;
                }
                Character.特殊2套装件数.V = Character.特殊2套装件头盔数.V + Character.特殊2套装件武器数.V + Character.特殊2套装件项链数.V + Character.特殊2套装件衣服数.V + Character.特殊2套装件左手镯数.V + Character.特殊2套装件左戒指数.V + Character.特殊2套装件右手镯数.V + Character.特殊2套装件右戒指数.V;
                if (Character.特殊2套装件数.V >= Config.特殊2枪装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(42u, out var value50))
                {
                    BonusStats[套装编号] = value50.Stats;
                    Character.特殊2套装件数.V = 0;
                    Character.特殊2套装件右戒指数.V = 0;
                    Character.特殊2套装件左戒指数.V = 0;
                    Character.特殊2套装件左手镯数.V = 0;
                    Character.特殊2套装件右手镯数.V = 0;
                    Character.特殊2套装件项链数.V = 0;
                    Character.特殊2套装件衣服数.V = 0;
                    Character.特殊2套装件武器数.V = 0;
                    Character.特殊2套装件头盔数.V = 0;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装枪)
                {
                    Character.特殊3套装件右戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装枪)
                {
                    Character.特殊3套装件左戒指数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装枪)
                {
                    Character.特殊3套装件右手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装枪)
                {
                    Character.特殊3套装件左手镯数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装枪)
                {
                    Character.特殊3套装件衣服数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装枪)
                {
                    Character.特殊3套装件项链数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装枪)
                {
                    Character.特殊3套装件武器数.V = 1;
                }
                if (Job == GameObjectRace.DragonLance && Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.特殊3套装枪)
                {
                    Character.特殊3套装件头盔数.V = 1;
                }
                Character.特殊3套装件数.V = Character.特殊3套装件头盔数.V + Character.特殊3套装件武器数.V + Character.特殊3套装件项链数.V + Character.特殊3套装件衣服数.V + Character.特殊3套装件左手镯数.V + Character.特殊3套装件左戒指数.V + Character.特殊3套装件右手镯数.V + Character.特殊3套装件右戒指数.V;
                if (Character.特殊3套装件数.V >= Config.特殊3枪装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(48u, out var value51))
                {
                    BonusStats[套装编号] = value51.Stats;
                    Character.特殊3套装件数.V = 0;
                    Character.特殊3套装件右戒指数.V = 0;
                    Character.特殊3套装件左戒指数.V = 0;
                    Character.特殊3套装件左手镯数.V = 0;
                    Character.特殊3套装件右手镯数.V = 0;
                    Character.特殊3套装件项链数.V = 0;
                    Character.特殊3套装件衣服数.V = 0;
                    Character.特殊3套装件武器数.V = 0;
                    Character.特殊3套装件头盔数.V = 0;
                }
            }
            else
            {
                if (Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装1)
                {
                    Character.通用套装1件右戒指数.V = 1;
                }
                if (Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装1)
                {
                    Character.通用套装1件左戒指数.V = 1;
                }
                if (Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装1)
                {
                    Character.通用套装1件右手镯数.V = 1;
                }
                if (Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装1)
                {
                    Character.通用套装1件左手镯数.V = 1;
                }
                if (Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装1)
                {
                    Character.通用套装1件衣服数.V = 1;
                }
                if (Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装1)
                {
                    Character.通用套装1件项链数.V = 1;
                }
                if (Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装1)
                {
                    Character.通用套装1件武器数.V = 1;
                }
                if (Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装1)
                {
                    Character.通用套装1件头盔数.V = 1;
                }
                Character.通用套装1件数.V = Character.通用套装1件头盔数.V + Character.通用套装1件武器数.V + Character.通用套装1件项链数.V + Character.通用套装1件衣服数.V + Character.通用套装1件左手镯数.V + Character.通用套装1件左戒指数.V + Character.通用套装1件右手镯数.V + Character.通用套装1件右戒指数.V;
                if (Character.通用套装1件数.V >= Config.通用1装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(49u, out var value52))
                {
                    BonusStats[套装编号] = value52.Stats;
                    Character.通用套装1件数.V = 0;
                    Character.通用套装1件右戒指数.V = 0;
                    Character.通用套装1件左戒指数.V = 0;
                    Character.通用套装1件左手镯数.V = 0;
                    Character.通用套装1件右手镯数.V = 0;
                    Character.通用套装1件项链数.V = 0;
                    Character.通用套装1件衣服数.V = 0;
                    Character.通用套装1件武器数.V = 0;
                    Character.通用套装1件头盔数.V = 0;
                }
                if (Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装2)
                {
                    Character.通用套装2件右戒指数.V = 1;
                }
                if (Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装2)
                {
                    Character.通用套装2件左戒指数.V = 1;
                }
                if (Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装2)
                {
                    Character.通用套装2件右手镯数.V = 1;
                }
                if (Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装2)
                {
                    Character.通用套装2件左手镯数.V = 1;
                }
                if (Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装2)
                {
                    Character.通用套装2件衣服数.V = 1;
                }
                if (Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装2)
                {
                    Character.通用套装2件项链数.V = 1;
                }
                if (Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装2)
                {
                    Character.通用套装2件武器数.V = 1;
                }
                if (Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装2)
                {
                    Character.通用套装2件头盔数.V = 1;
                }
                Character.通用套装2件数.V = Character.通用套装2件头盔数.V + Character.通用套装2件武器数.V + Character.通用套装2件项链数.V + Character.通用套装2件衣服数.V + Character.通用套装2件左手镯数.V + Character.通用套装2件左戒指数.V + Character.通用套装2件右手镯数.V + Character.通用套装2件右戒指数.V;
                if (Character.通用套装2件数.V >= Config.通用2装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(50u, out var value53))
                {
                    BonusStats[套装编号] = value53.Stats;
                    Character.通用套装2件数.V = 0;
                    Character.通用套装2件右戒指数.V = 0;
                    Character.通用套装2件左戒指数.V = 0;
                    Character.通用套装2件左手镯数.V = 0;
                    Character.通用套装2件右手镯数.V = 0;
                    Character.通用套装2件项链数.V = 0;
                    Character.通用套装2件衣服数.V = 0;
                    Character.通用套装2件武器数.V = 0;
                    Character.通用套装2件头盔数.V = 0;
                }
                if (Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装3)
                {
                    Character.通用套装3件右戒指数.V = 1;
                }
                if (Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装3)
                {
                    Character.通用套装3件左戒指数.V = 1;
                }
                if (Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装3)
                {
                    Character.通用套装3件右手镯数.V = 1;
                }
                if (Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装3)
                {
                    Character.通用套装3件左手镯数.V = 1;
                }
                if (Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装3)
                {
                    Character.通用套装3件衣服数.V = 1;
                }
                if (Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装3)
                {
                    Character.通用套装3件项链数.V = 1;
                }
                if (Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装3)
                {
                    Character.通用套装3件武器数.V = 1;
                }
                if (Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装3)
                {
                    Character.通用套装3件头盔数.V = 1;
                }
                Character.通用套装3件数.V = Character.通用套装3件头盔数.V + Character.通用套装3件武器数.V + Character.通用套装3件项链数.V + Character.通用套装3件衣服数.V + Character.通用套装3件左手镯数.V + Character.通用套装3件左戒指数.V + Character.通用套装3件右手镯数.V + Character.通用套装3件右戒指数.V;
                if (Character.通用套装3件数.V >= Config.通用3装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(51u, out var value54))
                {
                    BonusStats[套装编号] = value54.Stats;
                    Character.通用套装3件数.V = 0;
                    Character.通用套装3件右戒指数.V = 0;
                    Character.通用套装3件左戒指数.V = 0;
                    Character.通用套装3件左手镯数.V = 0;
                    Character.通用套装3件右手镯数.V = 0;
                    Character.通用套装3件项链数.V = 0;
                    Character.通用套装3件衣服数.V = 0;
                    Character.通用套装3件武器数.V = 0;
                    Character.通用套装3件头盔数.V = 0;
                }
                if (Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装4)
                {
                    Character.通用套装4件右戒指数.V = 1;
                }
                if (Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装4)
                {
                    Character.通用套装4件左戒指数.V = 1;
                }
                if (Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装4)
                {
                    Character.通用套装4件右手镯数.V = 1;
                }
                if (Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装4)
                {
                    Character.通用套装4件左手镯数.V = 1;
                }
                if (Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装4)
                {
                    Character.通用套装4件衣服数.V = 1;
                }
                if (Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装4)
                {
                    Character.通用套装4件项链数.V = 1;
                }
                if (Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装4)
                {
                    Character.通用套装4件武器数.V = 1;
                }
                if (Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装4)
                {
                    Character.通用套装4件头盔数.V = 1;
                }
                Character.通用套装4件数.V = Character.通用套装4件头盔数.V + Character.通用套装4件武器数.V + Character.通用套装4件项链数.V + Character.通用套装4件衣服数.V + Character.通用套装4件左手镯数.V + Character.通用套装4件左戒指数.V + Character.通用套装4件右手镯数.V + Character.通用套装4件右戒指数.V;
                if (Character.通用套装4件数.V >= Config.通用4装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(52u, out var value55))
                {
                    BonusStats[套装编号] = value55.Stats;
                    Character.通用套装4件数.V = 0;
                    Character.通用套装4件右戒指数.V = 0;
                    Character.通用套装4件左戒指数.V = 0;
                    Character.通用套装4件左手镯数.V = 0;
                    Character.通用套装4件右手镯数.V = 0;
                    Character.通用套装4件项链数.V = 0;
                    Character.通用套装4件衣服数.V = 0;
                    Character.通用套装4件武器数.V = 0;
                    Character.通用套装4件头盔数.V = 0;
                }
                if (Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装5)
                {
                    Character.通用套装5件右戒指数.V = 1;
                }
                if (Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装5)
                {
                    Character.通用套装5件左戒指数.V = 1;
                }
                if (Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装5)
                {
                    Character.通用套装5件右手镯数.V = 1;
                }
                if (Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装5)
                {
                    Character.通用套装5件左手镯数.V = 1;
                }
                if (Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装5)
                {
                    Character.通用套装5件衣服数.V = 1;
                }
                if (Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装5)
                {
                    Character.通用套装5件项链数.V = 1;
                }
                if (Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装5)
                {
                    Character.通用套装5件武器数.V = 1;
                }
                if (Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装5)
                {
                    Character.通用套装5件头盔数.V = 1;
                }
                Character.通用套装5件数.V = Character.通用套装5件头盔数.V + Character.通用套装5件武器数.V + Character.通用套装5件项链数.V + Character.通用套装5件衣服数.V + Character.通用套装5件左手镯数.V + Character.通用套装5件左戒指数.V + Character.通用套装5件右手镯数.V + Character.通用套装5件右戒指数.V;
                if (Character.通用套装5件数.V >= Config.通用5装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(53u, out var value56))
                {
                    BonusStats[套装编号] = value56.Stats;
                    Character.通用套装5件数.V = 0;
                    Character.通用套装5件右戒指数.V = 0;
                    Character.通用套装5件左戒指数.V = 0;
                    Character.通用套装5件左手镯数.V = 0;
                    Character.通用套装5件右手镯数.V = 0;
                    Character.通用套装5件项链数.V = 0;
                    Character.通用套装5件衣服数.V = 0;
                    Character.通用套装5件武器数.V = 0;
                    Character.通用套装5件头盔数.V = 0;
                }
                if (Equipment.TryGetValue(10, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装6)
                {
                    Character.通用套装6件右戒指数.V = 1;
                }
                if (Equipment.TryGetValue(9, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装6)
                {
                    Character.通用套装6件左戒指数.V = 1;
                }
                if (Equipment.TryGetValue(12, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装6)
                {
                    Character.通用套装6件右手镯数.V = 1;
                }
                if (Equipment.TryGetValue(11, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装6)
                {
                    Character.通用套装6件左手镯数.V = 1;
                }
                if (Equipment.TryGetValue(1, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装6)
                {
                    Character.通用套装6件衣服数.V = 1;
                }
                if (Equipment.TryGetValue(8, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装6)
                {
                    Character.通用套装6件项链数.V = 1;
                }
                if (Equipment.TryGetValue(0, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装6)
                {
                    Character.通用套装6件武器数.V = 1;
                }
                if (Equipment.TryGetValue(3, out v3) && v3.Info.属性装备套装 == GameItemSet.通用套装6)
                {
                    Character.通用套装6件头盔数.V = 1;
                }
                Character.通用套装6件数.V = Character.通用套装6件头盔数.V + Character.通用套装6件武器数.V + Character.通用套装6件项链数.V + Character.通用套装6件衣服数.V + Character.通用套装6件左手镯数.V + Character.通用套装6件左戒指数.V + Character.通用套装6件右手镯数.V + Character.通用套装6件右戒指数.V;
                if (Character.通用套装6件数.V >= Config.通用6装备佩戴数量 && ItemSetInfo.DataSheet.TryGetValue(54u, out var value57))
                {
                    BonusStats[套装编号] = value57.Stats;
                    Character.通用套装6件数.V = 0;
                    Character.通用套装6件右戒指数.V = 0;
                    Character.通用套装6件左戒指数.V = 0;
                    Character.通用套装6件左手镯数.V = 0;
                    Character.通用套装6件右手镯数.V = 0;
                    Character.通用套装6件项链数.V = 0;
                    Character.通用套装6件衣服数.V = 0;
                    Character.通用套装6件武器数.V = 0;
                    Character.通用套装6件头盔数.V = 0;
                }
            }
        }
        if (原有装备 != null || 现有装备 != null)
        {
            UpdateCombatPower();
            RefreshStats();
        }
    }

    private void ActivateParalysisRing()
    {
        if (Equipment.TryGetValue(9, out var v) && v.Info.ID == 99930026)
            ParalysisRing = true;
        else if (Equipment.TryGetValue(10, out v) && v.Info.ID == 99930026)
            ParalysisRing = true;
        else
            ParalysisRing = false;
    }

    public void TameTarget(SkillObject skill, C_04_CalculateTargetTemptation task, MapObject target)
    {
        if (target == null || target.Dead || CurrentLevel + 2 < target.CurrentLevel || 
            (!(target is MonsterObject) && !(target is PetObject)) || (target is PetObject && (skill.SkillLevel < 3 || this == (target as PetObject).Master)) || 
            (task.检查铭文技能 && (!Skills.TryGetValue((ushort)(task.检查铭文编号 / 10), out var v) || v.InscriptionID != task.检查铭文编号 % 10)))
        {
            return;
        }
        bool flag = task.特定诱惑列表?.Contains(target.Name) ?? false;
        bool flag2 = flag;
        float num = (flag ? task.特定诱惑概率 : 0f);
        float num2 = ((target is MonsterObject) ? (target as MonsterObject).BaseTemptationProbability : (target as PetObject).BaseTemptationProbability);
        if ((num2 += num) <= 0f)
        {
            return;
        }
        int num3 = ((task.基础诱惑数量?.Length > skill.SkillLevel) ? task.基础诱惑数量[skill.SkillLevel] : 0);
        int num4 = ((task.初始宠物等级?.Length > skill.SkillLevel) ? task.初始宠物等级[skill.SkillLevel] : 0);
        byte 额外诱惑数量 = task.额外诱惑数量;
        float 额外诱惑概率 = task.额外诱惑概率;
        int 额外诱惑时长 = task.额外诱惑时长;
        float num5 = 0f;
        int num6 = 0;
        int num7 = 0;
        foreach (BuffInfo value in Buffs.Values)
        {
            if ((value.BuffEffect & BuffEffectType.TemptationBoost) != 0)
            {
                num5 += value.Template.IncreasedTemptationChance;
                num6 += value.Template.TemptationDurationIncreased;
                num7 += value.Template.TemptationLevelIncreased;
            }
        }
        float num8 = (float)Math.Pow((CurrentLevel >= target.CurrentLevel) ? 1.2 : 0.8, Compute.Clamp(0, Math.Abs(target.CurrentLevel - CurrentLevel), 2));
        if (!Compute.CalculateProbability(num2 * num8 * (1f + 额外诱惑概率 + num5)))
        {
            return;
        }
        if (target.Buffs.ContainsKey(task.狂暴状态编号))
        {
            if (Pets.Count < num3 + 额外诱惑数量)
            {
                int num9 = Math.Min(num4 + num7, 7);
                int 宠物时长 = Config.怪物诱惑时长 + 额外诱惑时长 + num6;
                bool 绑定武器 = flag2 || num4 != 0 || 额外诱惑时长 != 0 || 额外诱惑概率 != 0f || Pets.Count >= num3;
                PetObject 宠物实例2 = ((target is MonsterObject 怪物实例2) ? new PetObject(this, 怪物实例2, (byte)Math.Max(怪物实例2.PetLevel, num9), 绑定武器, 宠物时长) : new PetObject(this, (PetObject)target, (byte)num9, 绑定武器, 宠物时长));
                Enqueue(new SyncPetLevelPacket
                {
                    ObjectID = 宠物实例2.ObjectID,
                    PetLevel = 宠物实例2.PetLevel
                });
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 9473,
                    Param1 = (int)PetMode
                });
                PetInfo.Add(宠物实例2.PInfo);
                Pets.Add(宠物实例2);
            }
        }
        else
        {
            target.AddBuff(task.瘫痪状态编号, this);
        }
    }

    public void UserTeleportSkill(SkillObject skill, C_07_CalculateTargetTeleportation task)
    {
        if (Compute.CalculateProbability(task.每级成功概率[skill.SkillLevel]) && !(CurrentMap.GetRandomTeleportPosition(CurrentPosition) == default(Point)))
        {
            Teleport(ResurrectionMap, AreaType.Random);
        }
        else
        {
            AddBuff(task.瞬移失败提示, this);
            AddBuff(task.失败添加Buff, this);
        }
        if (task.GainSkillExp)
        {
            GainSkillExperience(task.ExpSkillID);
        }
    }

    public void 扣除护盾时间(int 技能伤害)
    {
        foreach (BuffInfo item in Buffs.Values.ToList())
        {
            if (item.Buff分组 == 2535)
            {
                if ((item.RemainingTime.V -= TimeSpan.FromSeconds(Math.Min(15f, (float)技能伤害 * 15f / 50f))) < TimeSpan.Zero)
                {
                    RemoveBuff(item.ID.V);
                    continue;
                }
                SendPacket(new 对象状态变动
                {
                    对象编号 = ObjectID,
                    Buff编号 = item.ID.V,
                    Buff索引 = item.ID.V,
                    当前层数 = item.当前层数.V,
                    剩余时间 = (int)item.RemainingTime.V.TotalMilliseconds,
                    持续时间 = (int)item.Duration.V.TotalMilliseconds
                });
            }
        }
    }

    public void DamageWeapon(int damage)
    {
        if (Equipment.TryGetValue(0, out var v) && 
            (CurrentDegree != 5 || !v.CanRepair) && 
            (CurrentDegree != 4 || !Compute.CalculateProbability(0.5f)))
        {
            DamageItem(v, damage);
        }
    }

    public void DecreaseWeaponLuck()
    {
        if (Config.PK死亡幸运开关 == 1 && Equipment.TryGetValue(0, out var v) && v.Luck.V > -9 && Compute.CalculateProbability(0.1f))
        {
            v.Luck.V--;
            Enqueue(new SyncItemPacket
            {
                Description = v.ToArray()
            });
        }
    }

    public void DamageCombatEquipment(int damage)
    {
        if (Equipment.TryGetValue(15, out var v))
        {
            v.Dura.V = Math.Max(0, v.Dura.V - damage);
            if (v.Dura.V <= 0)
            {
                Enqueue(new DeleteItemPacket
                {
                    Grid = v.Grid.V,
                    Position = v.Location.V
                });
                玩家穿卸装备(装备穿戴部位.战具, v, null);
                Equipment.Remove(v.Location.V);
                v.Remove();
            }
            else
            {
                Enqueue(new DurabilityChangedPacket
                {
                    Grid = v.Grid.V,
                    Location = v.Location.V,
                    Durability = v.Dura.V
                });
            }
        }
    }

    public void DamageAllEquipment(int damage)
    {
        damage = Math.Min(10, damage);
        foreach (var item in Equipment.Values)
        {
            if (item.Dura.V > 0 && (CurrentDegree != 5 || !item.CanRepair) &&
                (CurrentDegree != 4 || !Compute.CalculateProbability(0.5f)) &&
                item.PersistType == PersistentItemType.装备 &&
                Compute.CalculateProbability((item.Type == ItemType.Armour) ? 1f : 0.1f))
            {
                DamageItem(item, damage);
            }
        }
    }

    public void DamageItem(ItemInfo uitem, int damage)
    {
        uitem.Dura.V = Math.Max(0, uitem.Dura.V - damage);
        if (uitem.Dura.V <= 0 && BonusStats.Remove(uitem))
            RefreshStats();

        Enqueue(new DurabilityChangedPacket
        {
            Grid = uitem.Grid.V,
            Location = uitem.Location.V,
            Durability = uitem.Dura.V
        });
    }

    public void ExpirePrivilege()
    {
        if (CurrentDegree == 3)
        {
            玩家称号到期(61);
        }
        else if (CurrentDegree == 4)
        {
            玩家称号到期(124);
        }
        else if (CurrentDegree == 5)
        {
            玩家称号到期(131);
        }
        PreviousDegree = CurrentDegree;
        上期记录 = 本期记录;
        上期日期 = 本期日期;
        CurrentDegree = 0;
        本期记录 = 0u;
        本期日期 = default(DateTime);
        PrivilegeTime = DateTime.MaxValue;
    }

    public void ChangeDegree(byte degree)
    {
        switch (degree)
        {
            case 3: AddTitle(61); break;
            case 4: AddTitle(124); break;
            case 5: AddTitle(131); break;
            default: return;
        }
        CurrentDegree = degree;
        本期记录 = uint.MaxValue;
        本期日期 = SEngine.CurrentTime;
        PrivilegeTime = 本期日期.AddDays(30.0);
    }

    public void 玩家称号到期(byte id)
    {
        if (Titles.Remove(id))
        {
            if (CurrentTitle == id)
            {
                CurrentTitle = 0;
                CombatPowerBonus.Remove(id);
                UpdateCombatPower();
                BonusStats.Remove(id);
                RefreshStats();
                SendPacket(new SyncCurrentTitlePacket
                {
                    ObjectID = ObjectID
                });
            }
            Enqueue(new RemoveTitlePacket
            {
                TitleID = id
            });
        }
    }

    public void AddTitle(byte id)
    {
        if (GameTitle.DataSheet.TryGetValue(id, out var value))
        {
            Titles[id] = SEngine.CurrentTime.AddMinutes(value.Duration);
            Enqueue(new AddTitlePacket
            {
                TitleID = id,
                Duration = (int)(Titles[id] - SEngine.CurrentTime).TotalMinutes
            });
        }
    }

    public void AddTarget(MapObject target)
    {
        foreach (var pet in Pets)
        {
            if (!pet.Neighbors.Contains(target)) continue;
            if (target.CheckStatus(GameObjectState.Invisible | GameObjectState.Stealth)) continue;
            
            pet.Target.Add(target, default(DateTime), 0);
        }
    }

    public bool FindItem(int id, out ItemInfo item)
    {
        for (byte i = 0; i < InventorySize; i++)
        {
            if (Inventory.TryGetValue(i, out item) && item.ID == id)
                return true;
        }

        item = null;
        return false;
    }

    public byte FindEmptyInventoryIndex()
    {
        for (byte i = 0; i < InventorySize; i++)
        {
            if (!Inventory.ContainsKey(i))
                return i;
        }

        return byte.MaxValue;
    }

    public bool FindItem(int quantity, int id, out List<ItemInfo> items)
    {
        items = new List<ItemInfo>();

        for (byte i = 0; i < InventorySize; i++)
        {
            if (Inventory.TryGetValue(i, out var v) && v.ID == id)
            {
                items.Add(v);
                if ((quantity -= v.Dura.V) <= 0)
                    break;
            }
        }
        return items.Count > 0;
    }

    public bool FindItem(int quantity, HashSet<int> ids, out List<ItemInfo> items)
    {
        items = new List<ItemInfo>();

        for (byte i = 0; i < InventorySize; i++)
        {
            if (Inventory.TryGetValue(i, out var v) && ids.Contains(v.ID))
            {
                items.Add(v);
                if ((quantity -= v.Dura.V) <= 0)
                    break;
            }
        }
        return items.Count > 0;
    }

    public bool ConsumeItem(int quantity, ItemInfo item)
    {
        int v = item.Dura.V;
        if ((item.Dura.V -= quantity) <= 0)
        {
            Enqueue(new DeleteItemPacket
            {
                Grid = item.Grid.V,
                Position = item.Location.V
            });
            Inventory.Remove(item.Location.V);
            item.Remove();
            return true;
        }

        Enqueue(new SyncItemPacket
        {
            Description = item.ToArray()
        });

        if (item.Dura.V > 0 && item.Dura.V < v)
            return true;

        Connection?.Disconnect(new Exception("刷取非法道具,强制踢下线"));
        return false;
    }

    public void ConsumeItem(int quantity, List<ItemInfo> list)
    {
        var ordered = list.OrderBy(x => x.Location);
        foreach (var item in ordered)
        {
            int n = Math.Min(quantity, item.Dura.V);
            if (ConsumeItem(n, item) && (quantity -= n) <= 0)
            {
                break;
            }
        }
    }

    public void Disconnect()
    {
        if (ObjectID == 227 || ObjectID == 80 || ObjectID == 72)
        {
            Teleport((CurrentMap.MapID == 147) ? CurrentMap : MapManager.GetMap(147), AreaType.Teleportation);
        }
        if (AutoBattle)
        {
            AutoBattle = false;
            CurrentAutoState = AutoSystem.Disabled;
            挂机参数.Clear();
        }
        CurrentTrade?.BreakTrade();
        Team?.Broadcast(new 同步队员状态
        {
            ObjectID = ObjectID,
            状态编号 = 1
        });
        Guild?.Broadcast(new SyncMemberInfoPacket
        {
            ObjectID = ObjectID,
            对象信息 = Compute.TimeSeconds(SEngine.CurrentTime)
        });
        foreach (CharacterInfo item in 粉丝列表)
        {
            item.Enqueue(new 同步好友列表
            {
                ObjectID = ObjectID,
                Name = Name,
                Job = (byte)Job,
                Gender = (byte)Gender,
                上线下线 = 3
            });
        }
        foreach (CharacterInfo item2 in 仇恨列表)
        {
            item2.Enqueue(new 同步好友列表
            {
                ObjectID = ObjectID,
                Name = Name,
                Job = (byte)Job,
                Gender = (byte)Gender,
                上线下线 = 3
            });
        }
        foreach (PetObject pet in Pets)
        {
            pet.Die();
        }
        foreach (BuffInfo item4 in Buffs.Values)
        {
            if (item4.下线消失)
            {
                RemoveBuff(item4.ID.V);
            }
        }
        Character.Disconnect();
        Despawn();
        CurrentMap.Players.Remove(this);
    }

    public void EnterScene()
    {
        Enqueue(new ObjectStopPacket
        {
            ObjectID = ObjectID,
            Position = CurrentPosition,
            Height = CurrentHeight
        });
        Enqueue(new ObjectEnterScenePacket
        {
            MapID = CurrentMap.MapID,
            Position = CurrentPosition,
            Height = CurrentHeight,
            RouteID = CurrentMap.RouteID,
            RouteStatus = CurrentMap.MapStatus
        });
        Enqueue(new ObjectAppearPacket
        {
            Effect = 1,
            ObjectID = ObjectID,
            Position = CurrentPosition,
            Height = CurrentHeight,
            Direction = (ushort)CurrentDirection,
            现身姿态 = (byte)((!Dead) ? 1u : 13u),
            HealthPercent = (byte)(CurrentHP * 100 / this[Stat.MaxHP])
        });
        Enqueue(new SyncObjectHP
        {
            ObjectID = ObjectID,
            CurrentHP = CurrentHP,
            MaxHP = this[Stat.MaxHP]
        });
        Enqueue(new SyncManaPacket
        {
            CurrentMP = CurrentMP
        });
        Enqueue(new SyncIngotsPacket
        {
            Amount = Ingot
        });
        Enqueue(new 同步冷却列表
        {
            Description = 全部冷却描述()
        });
        Enqueue(new 同步节点数据 { });

        Enqueue(new 同步状态列表
        {
            Description = 全部Buff描述()
        });
        Enqueue(new SwitchBattleStancePacket
        {
            ObjectID = ObjectID
        });

        Enqueue(new 同步日程奖励 { });
        Enqueue(new 更新活动日程 { });

        BindGrid();
        UpdateAllNeighbours();
        if (GameSkill.DataSheet.TryGetValue("通用-玩家取出武器", out var value))
        {
            new SkillObject(this, value, null, base.ActionID, CurrentMap, CurrentPosition, null, CurrentPosition, null);
        }
        if (Pets.Count == PetInfo.Count)
        {
            return;
        }
        foreach (PetInfo item in PetInfo.ToList())
        {
            if (!(SEngine.CurrentTime >= item.MutinyTime.V) && MonsterInfo.DataSheet.ContainsKey(item.Name.V))
            {
                PetObject 宠物实例2 = new PetObject(this, item);
                Pets.Add(宠物实例2);
                Enqueue(new SyncPetLevelPacket
                {
                    ObjectID = 宠物实例2.ObjectID,
                    PetLevel = 宠物实例2.PetLevel
                });
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 9473,
                    Param1 = (int)PetMode
                });
            }
            else
            {
                item.Remove();
                PetInfo.Remove(item);
            }
        }
    }

    public void 玩家退出副本()
    {
        if (Dead)
        {
            Resurrect();
        }
        else
        {
            Teleport(MapManager.GetMap(RespawnMapIndex), AreaType.Resurrection);
        }
    }

    public void Resurrect()
    {
        if (!Dead) return;

        Enqueue(new ObjectRevivePacket
        {
            ObjectID = ObjectID,
            ResurrectionMode = 3
        });

        Dead = false;
        Blocking = true;

        if (Config.CurrentVersion >= 1 && HasResurrectionRing && ResurrectionRingReady && ResurrectionRingDura > 0)
        {
            CurrentHP = (int)this[Stat.MaxHP];
            CurrentMP = (int)this[Stat.MaxMP];

            RemoveAllNeighbors();
            UnbindGrid();
            BindGrid();
            UpdateAllNeighbours();
            ResurrectionRingReady = false;
            AddBuff(47391, this);
            ReviveTime = SEngine.CurrentTime.AddSeconds(Config.ReviveInterval);
            if (Equipment.TryGetValue(ResurrectionRingLocation, out var v))
            {
                v.Dura.V -= 1000;
                Enqueue(new DurabilityChangedPacket
                {
                    Grid = v.Grid.V,
                    Location = v.Location.V,
                    Durability = v.Dura.V
                });
            }
            return;
        }

        CurrentHP = (int)((float)this[Stat.MaxHP] * 0.3f);
        CurrentMP = (int)((float)this[Stat.MaxMP] * 0.3f);

        // TODO: SandCityMap not implemented yet..
        /*if (CurrentMap == MapManager.SandCityMap && MapManager.SandCityStage >= 2)
        {
            if (Guild != null && Guild == SystemInfo.Info.OccupyGuild.V)
            {
                Teleport(CurrentMap, AreaType.Unknown, MapManager.守方传送区域.RandomCoords);
            }
            else if (Guild != null && Guild == MapManager.八卦坛激活行会)
            {
                Teleport(CurrentMap, AreaType.Unknown, MapManager.内城复活区域.RandomCoords);
            }
            else
            {
                Teleport(CurrentMap, AreaType.Unknown, MapManager.外城复活区域.RandomCoords);
            }
        }
        else
        {
            Teleport(ResurrectionMap, (!RedName) ? AreaType.Resurrection : AreaType.RedName);
        }*/
        Teleport(ResurrectionMap, (!RedName) ? AreaType.Resurrection : AreaType.RedName);
    }

    public void EnterTeleportGate(int id)
    {
        if (!BoundToMap) return;

        if (Dead || StallState > 0 || TradeState >= 3)
        {
            Enqueue(new GameErrorMessagePacket { ErrorCode = 769 });
            return;
        }

        if (!CurrentMap.TeleportGates.TryGetValue((byte)id, out var gate))
        {
            Enqueue(new GameErrorMessagePacket { ErrorCode = 775 });
            return;
        }

        if (GetDistance(gate.Coordinates) >= 8)
        {
            Enqueue(new GameErrorMessagePacket { ErrorCode = 4609 });
            return;
        }

        var map = (CurrentMap.MapID == gate.ToMapID) ? CurrentMap : MapManager.GetMap(gate.ToMapID);
        if (map == null)
        {
            Enqueue(new GameErrorMessagePacket { ErrorCode = 775 });
            return;
        }

        if (CurrentLevel < map.MinLevel)
        {
            Enqueue(new GameErrorMessagePacket { ErrorCode = 4624 });
            return;
        }

        Teleport(map, AreaType.Unknown, gate.ToCoordinates);
    }

    public void WalkTo(Point location)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
            return;

        if (CurrentPosition == location)
        {
            Enqueue(new ObjectStopPacket
            {
                ObjectID = ObjectID,
                Position = CurrentPosition,
                Height = CurrentHeight
            });
            return;
        }

        if (!CanWalk())
        {
            Enqueue(new ObjectStopPacket
            {
                ObjectID = ObjectID,
                Position = CurrentPosition,
                Height = CurrentHeight
            });
            return;
        }

        GameDirection dir = Compute.DirectionFromPoint(CurrentPosition, location);
        Point point = Compute.GetNextPosition(CurrentPosition, dir, 1);
        if (!CurrentMap.CanMove(point))
        {
            if (CurrentDirection != (dir = Compute.DirectionFromPoint(CurrentPosition, point)))
            {
                Character.CurrentDirection.V = dir;
                SendPacket(new SyncObjectDirectionPacket
                {
                    ObjectID = ObjectID,
                    Direction = (ushort)dir,
                    ActionTime = 100
                });
            }
            SendPacket(new ObjectStopPacket
            {
                ObjectID = ObjectID,
                Position = CurrentPosition,
                Height = CurrentHeight
            });
            return;
        }

        WalkTime = SEngine.CurrentTime.AddMilliseconds(WalkInterval);
        BusyTime = SEngine.CurrentTime.AddMilliseconds(WalkInterval);
        if (CurrentDirection != (dir = Compute.DirectionFromPoint(CurrentPosition, point)))
        {
            Character.CurrentDirection.V = dir;
            SendPacket(new SyncObjectDirectionPacket
            {
                ObjectID = ObjectID,
                Direction = (ushort)dir,
                ActionTime = 100
            });
        }

        SendPacket(new ObjectWalkPacket
        {
            ObjectID = ObjectID,
            Position = point,
            Speed = base.WalkSpeed
        });
        OnLocationChanged(point);
    }

    public void RunTo(Point location)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        if (CurrentPosition == location)
        {
            Enqueue(new ObjectStopPacket
            {
                ObjectID = ObjectID,
                Position = CurrentPosition,
                Height = CurrentHeight
            });
        }
        else if (CanRun())
        {
            GameDirection dir = Compute.DirectionFromPoint(CurrentPosition, location);
            Point point = Compute.GetNextPosition(CurrentPosition, dir, 1);
            Point point2 = Compute.GetNextPosition(CurrentPosition, dir, 2);
            if (!CurrentMap.CanMove(point))
            {
                if (CurrentDirection != (dir = Compute.DirectionFromPoint(CurrentPosition, point)))
                {
                    Character.CurrentDirection.V = dir;
                    SendPacket(new SyncObjectDirectionPacket
                    {
                        ObjectID = ObjectID,
                        Direction = (ushort)dir,
                        ActionTime = 100
                    });
                }
                SendPacket(new ObjectStopPacket
                {
                    ObjectID = ObjectID,
                    Position = CurrentPosition,
                    Height = CurrentHeight
                });
                return;
            }
            if (!CurrentMap.CanMove(point2))
            {
                WalkTo(location);
                return;
            }
            RunTime = SEngine.CurrentTime.AddMilliseconds(RunInterval);
            BusyTime = SEngine.CurrentTime.AddMilliseconds(RunInterval);
            if (CurrentDirection != (dir = Compute.DirectionFromPoint(CurrentPosition, point2)))
            {
                Character.CurrentDirection.V = dir;
                SendPacket(new SyncObjectDirectionPacket
                {
                    ObjectID = ObjectID,
                    Direction = (ushort)dir,
                    ActionTime = 100
                });
            }
            SendPacket(new ObjectRunPacket
            {
                ObjectID = ObjectID,
                Position = point2,
                MovementSpeed = base.RunSpeed
            });
            OnLocationChanged(point2);
        }
        else if (CanWalk())
        {
            WalkTo(location);
        }
        else
        {
            SendPacket(new ObjectStopPacket
            {
                ObjectID = ObjectID,
                Position = CurrentPosition,
                Height = CurrentHeight
            });
        }
    }

    public void TurnTo(GameDirection dir)
    {
        if (!Dead && StallState <= 0 && TradeState < 3 && CanTurn())
        {
            CurrentDirection = dir;
        }
    }

    public void SwitchStance(byte 姿态编号, byte 触发动作)
    {
        if (!Config.安全区收刀开关 || Config.CurrentVersion < 2)
        {
            return;
        }
        if (姿态编号 == 1 && 触发动作 == 1)
        {
            if (GameSkill.DataSheet.TryGetValue("通用-玩家收起武器", out var value))
            {
                new SkillObject(this, value, null, base.ActionID, CurrentMap, CurrentPosition, null, CurrentPosition, null);
            }
            SendPacket(new SwitchBattleStancePacket
            {
                ObjectID = ObjectID,
                姿态编号 = 姿态编号,
                触发动作 = 1
            });
        }
        else if (姿态编号 == 0 && 触发动作 == 1)
        {
            if (GameSkill.DataSheet.TryGetValue("通用-玩家取出武器", out var value2))
            {
                new SkillObject(this, value2, null, base.ActionID, CurrentMap, CurrentPosition, null, CurrentPosition, null);
            }
            SendPacket(new SwitchBattleStancePacket
            {
                ObjectID = ObjectID,
                姿态编号 = 姿态编号,
                触发动作 = 0
            });
        }
        else
        {
            SendPacket(new SwitchBattleStancePacket
            {
                ObjectID = ObjectID,
                姿态编号 = 姿态编号,
                触发动作 = 0
            });
        }
    }

    public void 玩家开关技能(ushort 技能编号)
    {
        if (Dead)
        {
            return;
        }
        if (!Skills.TryGetValue(技能编号, out var v) && !被动技能.TryGetValue(技能编号, out v))
        {
            Connection?.Disconnect(new Exception("释放未学会的技能, 尝试断开连接."));
            return;
        }
        foreach (string item in v.Inscription.SwitchSkills.ToList())
        {
            if (!GameSkill.DataSheet.TryGetValue(item, out var value))
            {
                continue;
            }
            if (Cooldowns.TryGetValue(技能编号 | 0x1000000, out var v2) && SEngine.CurrentTime < v2)
            {
                Enqueue(new 添加技能冷却
                {
                    冷却编号 = (技能编号 | 0x1000000),
                    冷却时间 = (int)(v2 - SEngine.CurrentTime).TotalMilliseconds
                });
                Enqueue(new 技能释放完成
                {
                    SkillID = 技能编号,
                    ActionID = base.ActionID
                });
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1281,
                    Param1 = 技能编号,
                    Param2 = base.ActionID
                });
                continue;
            }
            if (Skills.TryGetValue(value.BindingLevelID, out var v3) && value.NeedConsumeMagic?.Length > v3.Level.V)
            {
                if (CurrentMP < value.NeedConsumeMagic[v3.Level.V])
                {
                    continue;
                }
                CurrentMP -= value.NeedConsumeMagic[v3.Level.V];
            }
            new SkillObject(this, value, v, 0, CurrentMap, CurrentPosition, this, CurrentPosition, null);
            break;
        }
    }

    public void AttackWithSkill(ushort skillID, byte actionID, int targetID, Point location)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
            return;

        if (!Skills.TryGetValue(skillID, out var skill) && !被动技能.TryGetValue(skillID, out skill))
        {
            Connection?.Disconnect(new Exception($"错误操作: 玩家释放技能. 错误: 没有学会技能. 技能编号:{skillID}"));
            return;
        }

        if (Cooldowns.TryGetValue(skillID | 0x1000000, out var v2) && SEngine.CurrentTime < v2)
        {
            Enqueue(new 添加技能冷却
            {
                冷却编号 = (skillID | 0x1000000),
                冷却时间 = (int)(v2 - SEngine.CurrentTime).TotalMilliseconds
            });
            Enqueue(new 技能释放完成
            {
                SkillID = skillID,
                ActionID = actionID
            });
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1281,
                Param1 = skillID,
                Param2 = actionID
            });
            return;
        }

        if (Job == GameObjectRace.Assassin)
        {
            foreach (BuffInfo item in Buffs.Values.ToList())
            {
                if ((item.BuffEffect & BuffEffectType.StatusFlag) != 0 && (item.Template.PlayerState & GameObjectState.Stealth) != 0)
                {
                    RemoveBuffEx(item.ID.V);
                }
            }
        }

        MapManager.Objects.TryGetValue(targetID, out var target);
        foreach (string item2 in skill.Inscription.MainSkills.ToList())
        {
            int num = 0;
            int amount = 0;
            List<ItemInfo> item = null;
            if (!GameSkill.DataSheet.TryGetValue(item2, out var gskill) || gskill.OwnSkillID != skillID)
                continue;

            if (gskill.GroupID != 0 && Cooldowns.TryGetValue(gskill.GroupID | 0, out var v3) && SEngine.CurrentTime < v3)
            {
                Enqueue(new 添加技能冷却
                {
                    冷却编号 = (skillID | 0x1000000),
                    冷却时间 = (int)(v3 - SEngine.CurrentTime).TotalMilliseconds
                });
                Enqueue(new 技能释放完成
                {
                    SkillID = skillID,
                    ActionID = actionID
                });
                break;
            }
            if (gskill.CheckOccupationalWeapons && (!Equipment.TryGetValue(0, out var v4) || v4.NeedRace != Job))
                break;

            if (gskill.CheckSkillMarks && !Buffs.ContainsKey(gskill.SkillTagID))
                continue;

            if ((gskill.CheckPassiveTags && this[Stat.SkillSign] != 1) || (gskill.CheckSkillCount && skill.RemainingCount.V <= 0))
                break;

            if (gskill.CheckBusyGreen && SEngine.CurrentTime < BusyTime)
            {
                Enqueue(new 添加技能冷却
                {
                    冷却编号 = (skillID | 0x1000000),
                    冷却时间 = (int)(BusyTime - SEngine.CurrentTime).TotalMilliseconds
                });
                Enqueue(new 技能释放完成
                {
                    SkillID = skillID,
                    ActionID = actionID
                });
                break;
            }
            if (gskill.CheckStunStatus && SEngine.CurrentTime < HardStunTime)
            {
                Enqueue(new 添加技能冷却
                {
                    冷却编号 = (skillID | 0x1000000),
                    冷却时间 = (int)(HardStunTime - SEngine.CurrentTime).TotalMilliseconds
                });
                Enqueue(new 技能释放完成
                {
                    SkillID = skillID,
                    ActionID = actionID
                });
                continue;
            }
            if (gskill.CalculateLuckyProbability || gskill.CalculateTriggerProbability < 1f)
            {
                if (gskill.CalculateLuckyProbability)
                {
                    if (!Compute.CalculateProbability(Compute.CalcLuck(this[Stat.Luck])))
                        continue;
                }
                else
                {
                    float rand = 0f;
                    if (gskill.StatBoostProbability != Stat.Unknown)
                        rand = Math.Max(0f, (float)this[gskill.StatBoostProbability] * gskill.StatBoostFactor);

                    if (!Compute.CalculateProbability(gskill.CalculateTriggerProbability + rand))
                        continue;
                }
            }
            if ((gskill.ValidateLearnedSkills != 0 && (!Skills.TryGetValue(gskill.ValidateLearnedSkills, out var v5) ||
                (gskill.VerficationSkillInscription != 0 && gskill.VerficationSkillInscription != v5.InscriptionID))) ||
                (gskill.VerifyPlayerBuff != 0 && (!Buffs.TryGetValue(gskill.VerifyPlayerBuff, out var v6) || v6.当前层数.V < gskill.PlayerBuffStackCount)) ||
                (gskill.VerifyTargetBuff != 0 && (target == null || !target.Buffs.TryGetValue(gskill.VerifyTargetBuff, out var v7) || v7.当前层数.V < gskill.TargetBuffStackCount)) ||
                (gskill.VerifyTargetType != 0 && (target == null || !target.IsValidTarget(this, gskill.VerifyTargetType))) ||
                (Skills.TryGetValue(gskill.BindingLevelID, out var v8) &&
                gskill.NeedConsumeMagic?.Length > v8.Level.V && CurrentMP < (num = gskill.NeedConsumeMagic[v8.Level.V])))
            {
                continue;
            }
            if ((gskill.NeedConsumeItems?.Count ?? 0) != 0)
            {
                if (!Equipment.TryGetValue(15, out var v9) || v9.Dura.V < gskill.GearDeductionPoints)
                {
                    if (!FindItem(gskill.NeedConsumeItemsQuantity, gskill.NeedConsumeItems, out item))
                    {
                        continue;
                    }
                    amount = gskill.NeedConsumeItemsQuantity;
                }
                else
                {
                    item = new List<ItemInfo> { v9 };
                    amount = gskill.GearDeductionPoints;
                }
            }
            if (num >= 0)
            {
                CurrentMP -= num;
            }
            if (item != null && item.Count == 1 && item[0].Type == ItemType.战具)
            {
                DamageCombatEquipment(amount);
            }
            else if (item != null)
            {
                ConsumeItem(amount, item);
            }
            if (gskill.CheckPassiveTags && this[Stat.SkillSign] == 1)
            {
                this[Stat.SkillSign] = 0;
            }
            new SkillObject(this, gskill, skill, actionID, CurrentMap, CurrentPosition, target, location, null);
            break;
        }
    }

    public void ChangeAttackMode(AttackMode mode)
    {
        AttackMode = mode;
    }

    public void ChangePetMode(PetMode mode)
    {
        if (PetCount == 0)
            return;

        if (PetMode == PetMode.Rest && (mode == PetMode.Automatic || mode == PetMode.Attack))
        {
            foreach (var pet in Pets)
                pet.Target.TargetList.Clear();

            PetMode = PetMode.Attack;
        }
        else if (PetMode == PetMode.Attack && (mode == PetMode.Automatic || mode == PetMode.Rest))
        {
            PetMode = PetMode.Rest;
        }
    }

    public void 玩家拖动技能(byte 技能栏位, ushort 技能编号)
    {
        if (技能栏位 <= 7 || 技能栏位 >= 32)
        {
            return;
        }
        if (!Skills.TryGetValue(技能编号, out var v))
        {
            if (HotKeys.TryGetValue(技能栏位, out var v2))
            {
                HotKeys.Remove(技能栏位);
                v2.Shortcut.V = 100;
            }
        }
        else if (!v.自动装配 && v.Shortcut.V != 技能栏位)
        {
            HotKeys.Remove(v.Shortcut.V);
            v.Shortcut.V = 100;
            if (HotKeys.TryGetValue(技能栏位, out var v3) && v3 != null)
            {
                v3.Shortcut.V = 100;
            }
            HotKeys[技能栏位] = v;
            v.Shortcut.V = 技能栏位;
            Enqueue(new 角色拖动技能
            {
                技能栏位 = 技能栏位,
                铭文编号 = v.InscriptionID,
                技能编号 = v.ID.V,
                技能等级 = v.Level.V
            });
        }
    }

    public void SelectObject(int id)
    {
        if (MapManager.Objects.TryGetValue(id, out var target))
        {
            Enqueue(new SelectTargetPacket
            {
                ObjectID = ObjectID,
                TargetObjectID = target.ObjectID
            });
            Enqueue(new SelectTargetDetailsPacket
            {
                ObjectID = target.ObjectID,
                CurrentHP = target.CurrentHP,
                CurrentMP = target.CurrentMP,
                MaxHP = target[Stat.MaxHP],
                MaxMP = target[Stat.MaxMP],
                BuffDescription = target.对象Buff详述()
            });
        }
    }

    public void UserOpenNpcDialogue(int id)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
            return;

        if (!MapManager.Guards.TryGetValue(id, out var guard))
        {
            Connection?.Disconnect(new Exception("错误操作: 开始Npcc对话. 错误: 没有找到对象."));
        }
        else if (CurrentMap != guard.CurrentMap)
        {
            Connection?.Disconnect(new Exception("错误操作: 开始Npcc对话. 错误: 跨越地图对话."));
        }
        else if (GetDistance(guard) > 12)
        {
            Connection?.Disconnect(new Exception("错误操作: 开始Npcc对话. 错误: 超长距离对话."));
        }
        else
        {
            快捷对话模块(guard);
        }
    }

    public void 快捷对话模块(GuardObject guard)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
            return;

        var buffer = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage);
        if (buffer.Length == 0)
        {
            // No text found, is it a store?
            if (!GameStore.DataSheet.ContainsKey(guard.StoreID))
                return;

            buffer = Encoding.UTF8.GetBytes("<#Dft>\0");
        }

        CurrentNPC = guard;
        CurrentStoreID = guard.StoreID;
        CurrentStoreNameID = guard.StoreNameID;
        CurrentNPCTalkTime = SEngine.CurrentTime.AddSeconds(30.0);
        CurrentNPCDialoguePage = guard.GuardID * 100_000;

        Enqueue(new 同步交互结果
        {
            ObjectID = guard.ObjectID,
            Description = buffer
        });
    }

    public void 删除守卫()
    {
        if (CurrentNPC == null) return;

        if (CurrentNPC.Info.GuardID == 8482)
        {
            CurrentNPC.AutoDisappear = false;
            CurrentNPC.Despawn();
            CurrentNPC = null;
        }
        if (CurrentNPC.Info.GuardID == 6581)
        {
            CurrentNPC.AutoDisappear = false;
            CurrentNPC.Despawn();
            CurrentNPC = null;
        }
    }

    public void 玩家充值模块(bool result, int amount)
    {
        if (result)
        {
            if (amount != 0 && Config.平台开关模式 == 19)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}修罗声威", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 18)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}跨服秘宝", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 17)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}勇者金币", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 16)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}武道荣誉", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 13)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}成就点数", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 15)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount * 100;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}绑定元宝", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 12)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}擂台积分", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 11)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}道义点数", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 10)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}修炼点数", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 9)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}公会贡献", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 8)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}战场点数", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 7)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}万法之气", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 6)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}名师声望", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 3)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount * 100;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}元宝", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 5)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}魂值", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 2)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}声威", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 0)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}银币", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
            if (amount != 0 && Config.平台开关模式 == 1)
            {
                Character.Currencies[(CurrencyType)Config.平台开关模式] += Config.平台元宝充值模块 * amount;
                Character.VIPPoints.V += amount;
                NetworkManager.SendAnnouncement($"恭喜玩家【{Name}】充值了{Config.平台元宝充值模块 * amount}金币", rolling: true);
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
        }
    }

    public void 继续Npcc对话(int 选项编号)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
            return;

        if (CurrentNPC == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 继续Npcc对话.  错误: 没有选中守卫."));
        }
        else if (CurrentMap != CurrentNPC.CurrentMap)
        {
            Connection?.Disconnect(new Exception("错误操作: 开始Npcc对话. 错误: 跨越地图对话."));
        }
        else if (GetDistance(CurrentNPC) > 12)
        {
            Connection?.Disconnect(new Exception("错误操作: 开始Npcc对话. 错误: 超长距离对话."));
        }
        else if (!(SEngine.CurrentTime > CurrentNPCTalkTime))
        {
            CurrentNPCTalkTime = SEngine.CurrentTime.AddSeconds(30.0);
            EquipmentInfo v4;
            switch (CurrentNPCDialoguePage)
            {
                case 616200000:
                    if (选项编号 == 1)
                    {
                        CurrentNPCDialoguePage = 616200001;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                            ObjectID = CurrentNPC.ObjectID
                        });
                    }
                    if (选项编号 == 2)
                    {
                        CurrentNPCDialoguePage = 616200002;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                            ObjectID = CurrentNPC.ObjectID
                        });
                    }
                    break;
                case 616200001:
                    if (Config.变性内容控件 == "ASDZWEERRZCQA" || Config.CurrentVersion >= 3)
                    {
                        switch (选项编号)
                        {
                            case 1:
                                {
                                    List<ItemInfo> 物品列表21;
                                    if (Character.Gender.V == GameObjectGender.Man)
                                    {
                                        NetworkManager.SendMessage(this, "您是男儿身!禁止变性。");
                                    }
                                    else if (Character.Currencies[(CurrencyType)Config.变性货币类型] < Config.变性货币值)
                                    {
                                        NetworkManager.SendMessage(this, "货币不足!查看具体货币值。");
                                    }
                                    else if (FindItem(Config.变性物品数量, Config.变性物品ID, out 物品列表21))
                                    {
                                        if (Character.Currencies[(CurrencyType)Config.变性货币类型] >= Config.变性货币值)
                                        {
                                            Character.Currencies[(CurrencyType)Config.变性货币类型] -= Config.变性货币值;
                                            ConsumeItem(Config.变性物品数量, 物品列表21);
                                            Enqueue(new 同步货币数量
                                            {
                                                Description = 全部货币描述()
                                            });
                                            Character.Gender.V = GameObjectGender.Man;
                                            NetworkManager.SendMessage(this, "小退上线后改变性别");
                                            NetworkManager.SendMessage(this, "小退上线后改变性别");
                                            NetworkManager.SendMessage(this, "小退上线后改变性别");
                                        }
                                        else
                                        {
                                            NetworkManager.SendMessage(this, "材料不满足！");
                                        }
                                    }
                                    else
                                    {
                                        NetworkManager.SendMessage(this, "材料不满足！");
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    List<ItemInfo> 物品列表20;
                                    if (Character.Gender.V == GameObjectGender.Woman)
                                    {
                                        NetworkManager.SendMessage(this, "您是女儿身!禁止变性。");
                                    }
                                    else if (Character.Currencies[(CurrencyType)Config.变性货币类型] < Config.变性货币值)
                                    {
                                        NetworkManager.SendMessage(this, "货币不足!查看具体货币值。");
                                    }
                                    else if (FindItem(Config.变性物品数量, Config.变性物品ID, out 物品列表20))
                                    {
                                        if (Character.Currencies[(CurrencyType)Config.变性货币类型] >= Config.变性货币值)
                                        {
                                            Character.Currencies[(CurrencyType)Config.变性货币类型] -= Config.变性货币值;
                                            ConsumeItem(Config.变性物品数量, 物品列表20);
                                            Enqueue(new 同步货币数量
                                            {
                                                Description = 全部货币描述()
                                            });
                                            Character.Gender.V = GameObjectGender.Woman;
                                            NetworkManager.SendMessage(this, "小退上线后改变性别");
                                            NetworkManager.SendMessage(this, "小退上线后改变性别");
                                            NetworkManager.SendMessage(this, "小退上线后改变性别");
                                        }
                                        else
                                        {
                                            NetworkManager.SendMessage(this, "材料不满足！");
                                        }
                                    }
                                    else
                                    {
                                        NetworkManager.SendMessage(this, "材料不满足！");
                                    }
                                    break;
                                }
                        }
                    }
                    else
                    {
                        NetworkManager.SendMessage(this, "不满足当前引擎使用规则,可联系QQ群：634564006");
                    }
                    break;
                case 616200002:
                    if (Config.转职内容控件 == "EWQEQWCXQSADZ" || Config.CurrentVersion >= 3)
                    {
                        switch (选项编号)
                        {
                            case 1:
                                {
                                    List<ItemInfo> 物品列表4;
                                    if (Character.Job.V == GameObjectRace.Warrior)
                                    {
                                        NetworkManager.SendMessage(this, "您是战士!禁止职业。");
                                    }
                                    else if (Character.Currencies[(CurrencyType)Config.职业货币类型] < Config.职业货币值)
                                    {
                                        NetworkManager.SendMessage(this, "货币不足!查看具体货币值。");
                                    }
                                    else if (FindItem(Config.职业物品数量, Config.职业物品ID, out 物品列表4))
                                    {
                                        if (Character.Currencies[(CurrencyType)Config.职业货币类型] >= Config.职业货币值)
                                        {
                                            Character.Currencies[(CurrencyType)Config.职业货币类型] -= Config.职业货币值;
                                            ConsumeItem(Config.职业物品数量, 物品列表4);
                                            Enqueue(new 同步货币数量
                                            {
                                                Description = 全部货币描述()
                                            });
                                            Character.Job.V = GameObjectRace.Warrior;
                                            for (ushort num8 = 0; num8 < 26000; num8++)
                                            {
                                                RemoveSkill(num8);
                                            }
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                        }
                                        else
                                        {
                                            NetworkManager.SendMessage(this, "材料不满足！");
                                        }
                                    }
                                    else
                                    {
                                        NetworkManager.SendMessage(this, "材料不满足！");
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    List<ItemInfo> 物品列表3;
                                    if (Character.Job.V == GameObjectRace.Wizard)
                                    {
                                        NetworkManager.SendMessage(this, "您是法师!禁止职业。");
                                    }
                                    else if (Character.Currencies[(CurrencyType)Config.职业货币类型] < Config.职业货币值)
                                    {
                                        NetworkManager.SendMessage(this, "货币不足!查看具体货币值。");
                                    }
                                    else if (FindItem(Config.职业物品数量, Config.职业物品ID, out 物品列表3))
                                    {
                                        if (Character.Currencies[(CurrencyType)Config.职业货币类型] >= Config.职业货币值)
                                        {
                                            Character.Currencies[(CurrencyType)Config.职业货币类型] -= Config.职业货币值;
                                            ConsumeItem(Config.职业物品数量, 物品列表3);
                                            Enqueue(new 同步货币数量
                                            {
                                                Description = 全部货币描述()
                                            });
                                            Character.Job.V = GameObjectRace.Wizard;
                                            for (ushort num7 = 0; num7 < 26000; num7++)
                                            {
                                                RemoveSkill(num7);
                                            }
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                        }
                                        else
                                        {
                                            NetworkManager.SendMessage(this, "材料不满足！");
                                        }
                                    }
                                    else
                                    {
                                        NetworkManager.SendMessage(this, "材料不满足！");
                                    }
                                    break;
                                }
                            case 3:
                                {
                                    List<ItemInfo> 物品列表5;
                                    if (Character.Job.V == GameObjectRace.Assassin)
                                    {
                                        NetworkManager.SendMessage(this, "您是刺客!禁止职业。");
                                    }
                                    else if (Character.Currencies[(CurrencyType)Config.职业货币类型] < Config.职业货币值)
                                    {
                                        NetworkManager.SendMessage(this, "货币不足!查看具体货币值。");
                                    }
                                    else if (FindItem(Config.职业物品数量, Config.职业物品ID, out 物品列表5))
                                    {
                                        if (Character.Currencies[(CurrencyType)Config.职业货币类型] >= Config.职业货币值)
                                        {
                                            Character.Currencies[(CurrencyType)Config.职业货币类型] -= Config.职业货币值;
                                            ConsumeItem(Config.职业物品数量, 物品列表5);
                                            Enqueue(new 同步货币数量
                                            {
                                                Description = 全部货币描述()
                                            });
                                            Character.Job.V = GameObjectRace.Assassin;
                                            for (ushort num9 = 0; num9 < 26000; num9++)
                                            {
                                                RemoveSkill(num9);
                                            }
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                        }
                                        else
                                        {
                                            NetworkManager.SendMessage(this, "材料不满足！");
                                        }
                                    }
                                    else
                                    {
                                        NetworkManager.SendMessage(this, "材料不满足！");
                                    }
                                    break;
                                }
                            case 4:
                                {
                                    List<ItemInfo> 物品列表6;
                                    if (Character.Job.V == GameObjectRace.Archer)
                                    {
                                        NetworkManager.SendMessage(this, "您是弓手!禁止职业。");
                                    }
                                    else if (Character.Currencies[(CurrencyType)Config.职业货币类型] < Config.职业货币值)
                                    {
                                        NetworkManager.SendMessage(this, "货币不足!查看具体货币值。");
                                    }
                                    else if (FindItem(Config.职业物品数量, Config.职业物品ID, out 物品列表6))
                                    {
                                        if (Character.Currencies[(CurrencyType)Config.职业货币类型] >= Config.职业货币值)
                                        {
                                            Character.Currencies[(CurrencyType)Config.职业货币类型] -= Config.职业货币值;
                                            ConsumeItem(Config.职业物品数量, 物品列表6);
                                            Enqueue(new 同步货币数量
                                            {
                                                Description = 全部货币描述()
                                            });
                                            Character.Job.V = GameObjectRace.Archer;
                                            for (ushort num10 = 0; num10 < 26000; num10++)
                                            {
                                                RemoveSkill(num10);
                                            }
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                        }
                                        else
                                        {
                                            NetworkManager.SendMessage(this, "材料不满足！");
                                        }
                                    }
                                    else
                                    {
                                        NetworkManager.SendMessage(this, "材料不满足！");
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    List<ItemInfo> 物品列表2;
                                    if (Character.Job.V == GameObjectRace.Taoist)
                                    {
                                        NetworkManager.SendMessage(this, "您是道士!禁止职业。");
                                    }
                                    else if (Character.Currencies[(CurrencyType)Config.职业货币类型] < Config.职业货币值)
                                    {
                                        NetworkManager.SendMessage(this, "货币不足!查看具体货币值。");
                                    }
                                    else if (FindItem(Config.职业物品数量, Config.职业物品ID, out 物品列表2))
                                    {
                                        if (Character.Currencies[(CurrencyType)Config.职业货币类型] >= Config.职业货币值)
                                        {
                                            Character.Currencies[(CurrencyType)Config.职业货币类型] -= Config.职业货币值;
                                            ConsumeItem(Config.职业物品数量, 物品列表2);
                                            Enqueue(new 同步货币数量
                                            {
                                                Description = 全部货币描述()
                                            });
                                            Character.Job.V = GameObjectRace.Taoist;
                                            for (ushort num6 = 0; num6 < 26000; num6++)
                                            {
                                                RemoveSkill(num6);
                                            }
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                        }
                                        else
                                        {
                                            NetworkManager.SendMessage(this, "材料不满足！");
                                        }
                                    }
                                    else
                                    {
                                        NetworkManager.SendMessage(this, "材料不满足！");
                                    }
                                    break;
                                }
                            case 6:
                                {
                                    List<ItemInfo> 物品列表;
                                    if (Character.Job.V == GameObjectRace.DragonLance)
                                    {
                                        NetworkManager.SendMessage(this, "您是道士!禁止职业。");
                                    }
                                    else if (Character.Currencies[(CurrencyType)Config.职业货币类型] < Config.职业货币值)
                                    {
                                        NetworkManager.SendMessage(this, "货币不足!查看具体货币值。");
                                    }
                                    else if (FindItem(Config.职业物品数量, Config.职业物品ID, out 物品列表))
                                    {
                                        if (Character.Currencies[(CurrencyType)Config.职业货币类型] >= Config.职业货币值)
                                        {
                                            Character.Currencies[(CurrencyType)Config.职业货币类型] -= Config.职业货币值;
                                            ConsumeItem(Config.职业物品数量, 物品列表);
                                            Enqueue(new 同步货币数量
                                            {
                                                Description = 全部货币描述()
                                            });
                                            Character.Job.V = GameObjectRace.DragonLance;
                                            for (ushort num5 = 0; num5 < 26000; num5++)
                                            {
                                                RemoveSkill(num5);
                                            }
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                            NetworkManager.SendMessage(this, "小退上线后改变职业");
                                        }
                                        else
                                        {
                                            NetworkManager.SendMessage(this, "材料不满足！");
                                        }
                                    }
                                    else
                                    {
                                        NetworkManager.SendMessage(this, "材料不满足！");
                                    }
                                    break;
                                }
                        }
                    }
                    else
                    {
                        NetworkManager.SendMessage(this, "不满足当前引擎使用规则,可联系QQ群：634564006");
                    }
                    break;
                case 692300000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int num40 = 152;
                        int 沙巴克皇宫传送等级 = Config.沙巴克皇宫传送等级;
                        if (Team != null)
                        {
                            CurrentNPCDialoguePage = 692301000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (Character.Level.V < 沙巴克皇宫传送等级)
                        {
                            CurrentNPCDialoguePage = 692301000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙巴克皇宫传送等级}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (Config.沙巴克皇宫传送物品 == 0)
                        {
                            if (Gold >= Config.沙巴克皇宫传送数量)
                            {
                                Gold -= Config.沙巴克皇宫传送数量;
                                Teleport((CurrentMap.MapID == num40) ? CurrentMap : MapManager.GetMap(num40), AreaType.传送区域皇宫);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 692302000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                        }
                        if (Config.沙巴克皇宫传送物品 == 1)
                        {
                            if (Ingot >= Config.沙巴克皇宫传送数量)
                            {
                                Ingot -= Config.沙巴克皇宫传送数量;
                                Teleport((CurrentMap.MapID == num40) ? CurrentMap : MapManager.GetMap(num40), AreaType.传送区域皇宫);
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 692302000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                        }
                        if (Config.沙巴克皇宫传送物品 >= 2)
                        {
                            if (FindItem(Config.沙巴克皇宫传送数量, Config.沙巴克皇宫传送物品, out var 物品列表19))
                            {
                                ConsumeItem(Config.沙巴克皇宫传送数量, 物品列表19);
                                Teleport((CurrentMap.MapID == num40) ? CurrentMap : MapManager.GetMap(num40), AreaType.传送区域皇宫);
                                break;
                            }
                            CurrentNPCDialoguePage = 692302000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 715100000:
                    switch (选项编号)
                    {
                        case 1:
                            if (Character.Level.V >= (byte)Config.直升等级1 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 0)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级1}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验1;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value44 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品1, out value44))
                                {
                                    break;
                                }
                                byte b26 = FindEmptyInventoryIndex();
                                if (b26 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b26] = new ItemInfo(value44, Character, 1, b26, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b26].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                        case 2:
                            if (Character.Level.V >= (byte)Config.直升等级2 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 1)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级2}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验2;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value43 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品2, out value43))
                                {
                                    break;
                                }
                                byte b24 = FindEmptyInventoryIndex();
                                if (b24 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b24] = new ItemInfo(value43, Character, 1, b24, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b24].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                        case 3:
                            if (Character.Level.V >= (byte)Config.直升等级3 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 2)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级3}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验3;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value39 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品3, out value39))
                                {
                                    break;
                                }
                                byte b16 = FindEmptyInventoryIndex();
                                if (b16 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b16] = new ItemInfo(value39, Character, 1, b16, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b16].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                        case 4:
                            if (Character.Level.V >= (byte)Config.直升等级4 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 3)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级4}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验4;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value41 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品4, out value41))
                                {
                                    break;
                                }
                                byte b20 = FindEmptyInventoryIndex();
                                if (b20 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b20] = new ItemInfo(value41, Character, 1, b20, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b20].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                        case 5:
                            if (Character.Level.V >= (byte)Config.直升等级5 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 4)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级5}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验5;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value45 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品5, out value45))
                                {
                                    break;
                                }
                                byte b28 = FindEmptyInventoryIndex();
                                if (b28 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b28] = new ItemInfo(value45, Character, 1, b28, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b28].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                            }
                            break;
                        case 6:
                            if (Character.Level.V >= (byte)Config.直升等级6 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 5)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级6}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验6;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value40 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品6, out value40))
                                {
                                    break;
                                }
                                byte b18 = FindEmptyInventoryIndex();
                                if (b18 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b18] = new ItemInfo(value40, Character, 1, b18, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b18].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                        case 7:
                            if (Character.Level.V >= (byte)Config.直升等级7 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 6)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级7}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验7;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value46 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品7, out value46))
                                {
                                    break;
                                }
                                byte b30 = FindEmptyInventoryIndex();
                                if (b30 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b30] = new ItemInfo(value46, Character, 1, b30, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b30].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                        case 8:
                            if (Character.Level.V >= (byte)Config.直升等级8 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 7)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级8}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验8;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value42 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品8, out value42))
                                {
                                    break;
                                }
                                byte b22 = FindEmptyInventoryIndex();
                                if (b22 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b22] = new ItemInfo(value42, Character, 1, b22, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b22].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                        case 9:
                            if (Character.Level.V >= (byte)Config.直升等级9 && SEngine.CurrentTime > NPC间隔 && Character.升级直升变量.V == 8)
                            {
                                NetworkManager.SendAnnouncement($"{Name}成功领取了{Config.直升等级9}等级奖励！", rolling: true);
                                ExperienceRate += Config.直升经验9;
                                Character.升级直升变量.V++;
                                NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                GameItem value38 = null;
                                if (!GameItem.DataSheet.TryGetValue(Config.直升物品9, out value38))
                                {
                                    break;
                                }
                                byte b14 = FindEmptyInventoryIndex();
                                if (b14 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1793
                                    });
                                }
                                else
                                {
                                    Inventory[b14] = new ItemInfo(value38, Character, 1, b14, 1);
                                    Enqueue(new SyncItemPacket
                                    {
                                        Description = Inventory[b14].ToArray()
                                    });
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 715100001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                    }
                    break;
                case 634000000:
                    switch (选项编号)
                    {
                        case 1:
                            {
                                if (FindItem(Config.自定义元宝兑换01, out var 物品4) && SEngine.CurrentTime > NPC间隔)
                                {
                                    Ingot += 100;
                                    Enqueue(new SyncIngotsPacket
                                    {
                                        Amount = Ingot
                                    });
                                    ConsumeItem(1, 物品4);
                                    NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                }
                                else
                                {
                                    CurrentNPCDialoguePage = 634000001;
                                    Enqueue(new 同步交互结果
                                    {
                                        ObjectID = CurrentNPC.ObjectID,
                                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                    });
                                }
                                break;
                            }
                        case 2:
                            {
                                if (FindItem(Config.自定义元宝兑换02, out var 物品6) && SEngine.CurrentTime > NPC间隔)
                                {
                                    Ingot += 1000;
                                    Enqueue(new SyncIngotsPacket
                                    {
                                        Amount = Ingot
                                    });
                                    ConsumeItem(1, 物品6);
                                    NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                }
                                else
                                {
                                    CurrentNPCDialoguePage = 634000001;
                                    Enqueue(new 同步交互结果
                                    {
                                        ObjectID = CurrentNPC.ObjectID,
                                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                    });
                                }
                                break;
                            }
                        case 3:
                            {
                                if (FindItem(Config.自定义元宝兑换03, out var 物品7) && SEngine.CurrentTime > NPC间隔)
                                {
                                    Ingot += 10000;
                                    Enqueue(new SyncIngotsPacket
                                    {
                                        Amount = Ingot
                                    });
                                    ConsumeItem(1, 物品7);
                                    NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                }
                                else
                                {
                                    CurrentNPCDialoguePage = 634000001;
                                    Enqueue(new 同步交互结果
                                    {
                                        ObjectID = CurrentNPC.ObjectID,
                                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                    });
                                }
                                break;
                            }
                        case 4:
                            {
                                if (FindItem(Config.自定义元宝兑换04, out var 物品5) && SEngine.CurrentTime > NPC间隔)
                                {
                                    Ingot += 100000;
                                    Enqueue(new SyncIngotsPacket
                                    {
                                        Amount = Ingot
                                    });
                                    ConsumeItem(1, 物品5);
                                    NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                }
                                else
                                {
                                    CurrentNPCDialoguePage = 634000001;
                                    Enqueue(new 同步交互结果
                                    {
                                        ObjectID = CurrentNPC.ObjectID,
                                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                    });
                                }
                                break;
                            }
                        case 5:
                            {
                                if (FindItem(Config.自定义元宝兑换05, out var 物品3) && SEngine.CurrentTime > NPC间隔)
                                {
                                    Ingot += 1000000;
                                    Enqueue(new SyncIngotsPacket
                                    {
                                        Amount = Ingot
                                    });
                                    ConsumeItem(1, 物品3);
                                    NPC间隔 = SEngine.CurrentTime.AddSeconds(2.0);
                                }
                                else
                                {
                                    CurrentNPCDialoguePage = 634000001;
                                    Enqueue(new 同步交互结果
                                    {
                                        ObjectID = CurrentNPC.ObjectID,
                                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                    });
                                }
                                break;
                            }
                    }
                    break;
                case 710100000:
                    if (选项编号 == 1 && Config.CurrentVersion >= 1 && Config.充值模块格式 == 0)
                    {
                        FileOperation.Path = Config.平台接入目录 + "\\1.txt";
                        bool flag = FileOperation.Read1(Character.Account.V.ToString());
                        if (flag)
                        {
                            int 充值价值 = 1;
                            玩家充值模块(flag, 充值价值);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\2.txt";
                        bool flag2 = FileOperation.Read2(Character.Account.V.ToString());
                        if (flag2)
                        {
                            int 充值价值2 = 2;
                            玩家充值模块(flag2, 充值价值2);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\3.txt";
                        bool flag3 = FileOperation.Read3(Character.Account.V.ToString());
                        if (flag3)
                        {
                            int 充值价值3 = 3;
                            玩家充值模块(flag3, 充值价值3);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\4.txt";
                        bool flag4 = FileOperation.Read4(Character.Account.V.ToString());
                        if (flag4)
                        {
                            int 充值价值4 = 4;
                            玩家充值模块(flag4, 充值价值4);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\5.txt";
                        bool flag5 = FileOperation.Read5(Character.Account.V.ToString());
                        if (flag5)
                        {
                            int 充值价值5 = 5;
                            玩家充值模块(flag5, 充值价值5);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\6.txt";
                        bool flag6 = FileOperation.Read6(Character.Account.V.ToString());
                        if (flag6)
                        {
                            int 充值价值6 = 6;
                            玩家充值模块(flag6, 充值价值6);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\7.txt";
                        bool flag7 = FileOperation.Read7(Character.Account.V.ToString());
                        if (flag7)
                        {
                            int 充值价值7 = 7;
                            玩家充值模块(flag7, 充值价值7);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\8.txt";
                        bool flag8 = FileOperation.Read8(Character.Account.V.ToString());
                        if (flag8)
                        {
                            int 充值价值8 = 8;
                            玩家充值模块(flag8, 充值价值8);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\9.txt";
                        bool flag9 = FileOperation.Read9(Character.Account.V.ToString());
                        if (flag9)
                        {
                            int 充值价值9 = 9;
                            玩家充值模块(flag9, 充值价值9);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\10.txt";
                        bool flag10 = FileOperation.Read10(Character.Account.V.ToString());
                        if (flag10)
                        {
                            int 充值价值10 = 10;
                            玩家充值模块(flag10, 充值价值10);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\20.txt";
                        bool flag11 = FileOperation.Read20(Character.Account.V.ToString());
                        if (flag11)
                        {
                            int 充值价值11 = 20;
                            玩家充值模块(flag11, 充值价值11);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\30.txt";
                        bool flag12 = FileOperation.Read30(Character.Account.V.ToString());
                        if (flag12)
                        {
                            int 充值价值12 = 30;
                            玩家充值模块(flag12, 充值价值12);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\40.txt";
                        bool flag13 = FileOperation.Read40(Character.Account.V.ToString());
                        if (flag13)
                        {
                            int 充值价值13 = 40;
                            玩家充值模块(flag13, 充值价值13);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\50.txt";
                        bool flag14 = FileOperation.Read50(Character.Account.V.ToString());
                        if (flag14)
                        {
                            int 充值价值14 = 50;
                            玩家充值模块(flag14, 充值价值14);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\60.txt";
                        bool flag15 = FileOperation.Read60(Character.Account.V.ToString());
                        if (flag15)
                        {
                            int 充值价值15 = 60;
                            玩家充值模块(flag15, 充值价值15);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\70.txt";
                        bool flag16 = FileOperation.Read70(Character.Account.V.ToString());
                        if (flag16)
                        {
                            int 充值价值16 = 70;
                            玩家充值模块(flag16, 充值价值16);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\80.txt";
                        bool flag17 = FileOperation.Read80(Character.Account.V.ToString());
                        if (flag17)
                        {
                            int 充值价值17 = 80;
                            玩家充值模块(flag17, 充值价值17);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\90.txt";
                        bool flag18 = FileOperation.Read90(Character.Account.V.ToString());
                        if (flag18)
                        {
                            int 充值价值18 = 90;
                            玩家充值模块(flag18, 充值价值18);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\100.txt";
                        bool flag19 = FileOperation.Read100(Character.Account.V.ToString());
                        if (flag19)
                        {
                            int 充值价值19 = 100;
                            玩家充值模块(flag19, 充值价值19);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\200.txt";
                        bool flag20 = FileOperation.Read200(Character.Account.V.ToString());
                        if (flag20)
                        {
                            int 充值价值20 = 200;
                            玩家充值模块(flag20, 充值价值20);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\300.txt";
                        bool flag21 = FileOperation.Read300(Character.Account.V.ToString());
                        if (flag21)
                        {
                            int 充值价值21 = 300;
                            玩家充值模块(flag21, 充值价值21);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\400.txt";
                        bool flag22 = FileOperation.Read400(Character.Account.V.ToString());
                        if (flag22)
                        {
                            int 充值价值22 = 400;
                            玩家充值模块(flag22, 充值价值22);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\500.txt";
                        bool flag23 = FileOperation.Read500(Character.Account.V.ToString());
                        if (flag23)
                        {
                            int 充值价值23 = 500;
                            玩家充值模块(flag23, 充值价值23);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\600.txt";
                        bool flag24 = FileOperation.Read600(Character.Account.V.ToString());
                        if (flag24)
                        {
                            int 充值价值24 = 600;
                            玩家充值模块(flag24, 充值价值24);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\700.txt";
                        bool flag25 = FileOperation.Read700(Character.Account.V.ToString());
                        if (flag25)
                        {
                            int 充值价值25 = 700;
                            玩家充值模块(flag25, 充值价值25);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\800.txt";
                        bool flag26 = FileOperation.Read800(Character.Account.V.ToString());
                        if (flag26)
                        {
                            int 充值价值26 = 800;
                            玩家充值模块(flag26, 充值价值26);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\900.txt";
                        bool flag27 = FileOperation.Read900(Character.Account.V.ToString());
                        if (flag27)
                        {
                            int 充值价值27 = 900;
                            玩家充值模块(flag27, 充值价值27);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\1000.txt";
                        bool flag28 = FileOperation.Read1000(Character.Account.V.ToString());
                        if (flag28)
                        {
                            int 充值价值28 = 1000;
                            玩家充值模块(flag28, 充值价值28);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\2000.txt";
                        bool flag29 = FileOperation.Read2000(Character.Account.V.ToString());
                        if (flag29)
                        {
                            int 充值价值29 = 2000;
                            玩家充值模块(flag29, 充值价值29);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\3000.txt";
                        bool flag30 = FileOperation.Read3000(Character.Account.V.ToString());
                        if (flag30)
                        {
                            int 充值价值30 = 3000;
                            玩家充值模块(flag30, 充值价值30);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\4000.txt";
                        bool flag31 = FileOperation.Read4000(Character.Account.V.ToString());
                        if (flag31)
                        {
                            int 充值价值31 = 4000;
                            玩家充值模块(flag31, 充值价值31);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\5000.txt";
                        bool flag32 = FileOperation.Read5000(Character.Account.V.ToString());
                        if (flag32)
                        {
                            int 充值价值32 = 5000;
                            玩家充值模块(flag32, 充值价值32);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\6000.txt";
                        bool flag33 = FileOperation.Read6000(Character.Account.V.ToString());
                        if (flag33)
                        {
                            int 充值价值33 = 6000;
                            玩家充值模块(flag33, 充值价值33);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\7000.txt";
                        bool flag34 = FileOperation.Read7000(Character.Account.V.ToString());
                        if (flag34)
                        {
                            int 充值价值34 = 7000;
                            玩家充值模块(flag34, 充值价值34);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\8000.txt";
                        bool flag35 = FileOperation.Read8000(Character.Account.V.ToString());
                        if (flag35)
                        {
                            int 充值价值35 = 8000;
                            玩家充值模块(flag35, 充值价值35);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\9000.txt";
                        bool flag36 = FileOperation.Read9000(Character.Account.V.ToString());
                        if (flag36)
                        {
                            int 充值价值36 = 9000;
                            玩家充值模块(flag36, 充值价值36);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\10000.txt";
                        bool flag37 = FileOperation.Read10000(Character.Account.V.ToString());
                        if (!flag37)
                        {
                            CurrentNPCDialoguePage = 710100001;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        int 充值价值37 = 10000;
                        玩家充值模块(flag37, 充值价值37);
                    }
                    if (选项编号 == 1 && Config.CurrentVersion >= 1 && Config.充值模块格式 == 1)
                    {
                        FileOperation.Path = Config.平台接入目录 + "\\yb1.txt";
                        bool flag38 = FileOperation.Read1(Character.Account.V.ToString());
                        if (flag38)
                        {
                            int 充值价值38 = 1;
                            玩家充值模块(flag38, 充值价值38);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb2.txt";
                        bool flag39 = FileOperation.Read2(Character.Account.V.ToString());
                        if (flag39)
                        {
                            int 充值价值39 = 2;
                            玩家充值模块(flag39, 充值价值39);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb3.txt";
                        bool flag40 = FileOperation.Read3(Character.Account.V.ToString());
                        if (flag40)
                        {
                            int 充值价值40 = 3;
                            玩家充值模块(flag40, 充值价值40);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb4.txt";
                        bool flag41 = FileOperation.Read4(Character.Account.V.ToString());
                        if (flag41)
                        {
                            int 充值价值41 = 4;
                            玩家充值模块(flag41, 充值价值41);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb5.txt";
                        bool flag42 = FileOperation.Read5(Character.Account.V.ToString());
                        if (flag42)
                        {
                            int 充值价值42 = 5;
                            玩家充值模块(flag42, 充值价值42);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb6.txt";
                        bool flag43 = FileOperation.Read6(Character.Account.V.ToString());
                        if (flag43)
                        {
                            int 充值价值43 = 6;
                            玩家充值模块(flag43, 充值价值43);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb7.txt";
                        bool flag44 = FileOperation.Read7(Character.Account.V.ToString());
                        if (flag44)
                        {
                            int 充值价值44 = 7;
                            玩家充值模块(flag44, 充值价值44);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb8.txt";
                        bool flag45 = FileOperation.Read8(Character.Account.V.ToString());
                        if (flag45)
                        {
                            int 充值价值45 = 8;
                            玩家充值模块(flag45, 充值价值45);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb9.txt";
                        bool flag46 = FileOperation.Read9(Character.Account.V.ToString());
                        if (flag46)
                        {
                            int 充值价值46 = 9;
                            玩家充值模块(flag46, 充值价值46);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb10.txt";
                        bool flag47 = FileOperation.Read10(Character.Account.V.ToString());
                        if (flag47)
                        {
                            int 充值价值47 = 10;
                            玩家充值模块(flag47, 充值价值47);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb20.txt";
                        bool flag48 = FileOperation.Read20(Character.Account.V.ToString());
                        if (flag48)
                        {
                            int 充值价值48 = 20;
                            玩家充值模块(flag48, 充值价值48);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb30.txt";
                        bool flag49 = FileOperation.Read30(Character.Account.V.ToString());
                        if (flag49)
                        {
                            int 充值价值49 = 30;
                            玩家充值模块(flag49, 充值价值49);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb40.txt";
                        bool flag50 = FileOperation.Read40(Character.Account.V.ToString());
                        if (flag50)
                        {
                            int 充值价值50 = 40;
                            玩家充值模块(flag50, 充值价值50);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb50.txt";
                        bool flag51 = FileOperation.Read50(Character.Account.V.ToString());
                        if (flag51)
                        {
                            int 充值价值51 = 50;
                            玩家充值模块(flag51, 充值价值51);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb60.txt";
                        bool flag52 = FileOperation.Read60(Character.Account.V.ToString());
                        if (flag52)
                        {
                            int 充值价值52 = 60;
                            玩家充值模块(flag52, 充值价值52);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb70.txt";
                        bool flag53 = FileOperation.Read70(Character.Account.V.ToString());
                        if (flag53)
                        {
                            int 充值价值53 = 70;
                            玩家充值模块(flag53, 充值价值53);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb80.txt";
                        bool flag54 = FileOperation.Read80(Character.Account.V.ToString());
                        if (flag54)
                        {
                            int 充值价值54 = 80;
                            玩家充值模块(flag54, 充值价值54);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb90.txt";
                        bool flag55 = FileOperation.Read90(Character.Account.V.ToString());
                        if (flag55)
                        {
                            int 充值价值55 = 90;
                            玩家充值模块(flag55, 充值价值55);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb100.txt";
                        bool flag56 = FileOperation.Read100(Character.Account.V.ToString());
                        if (flag56)
                        {
                            int 充值价值56 = 100;
                            玩家充值模块(flag56, 充值价值56);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb200.txt";
                        bool flag57 = FileOperation.Read200(Character.Account.V.ToString());
                        if (flag57)
                        {
                            int 充值价值57 = 200;
                            玩家充值模块(flag57, 充值价值57);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb300.txt";
                        bool flag58 = FileOperation.Read300(Character.Account.V.ToString());
                        if (flag58)
                        {
                            int 充值价值58 = 300;
                            玩家充值模块(flag58, 充值价值58);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb400.txt";
                        bool flag59 = FileOperation.Read400(Character.Account.V.ToString());
                        if (flag59)
                        {
                            int 充值价值59 = 400;
                            玩家充值模块(flag59, 充值价值59);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb500.txt";
                        bool flag60 = FileOperation.Read500(Character.Account.V.ToString());
                        if (flag60)
                        {
                            int 充值价值60 = 500;
                            玩家充值模块(flag60, 充值价值60);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb600.txt";
                        bool flag61 = FileOperation.Read600(Character.Account.V.ToString());
                        if (flag61)
                        {
                            int 充值价值61 = 600;
                            玩家充值模块(flag61, 充值价值61);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb700.txt";
                        bool flag62 = FileOperation.Read700(Character.Account.V.ToString());
                        if (flag62)
                        {
                            int 充值价值62 = 700;
                            玩家充值模块(flag62, 充值价值62);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb800.txt";
                        bool flag63 = FileOperation.Read800(Character.Account.V.ToString());
                        if (flag63)
                        {
                            int 充值价值63 = 800;
                            玩家充值模块(flag63, 充值价值63);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb900.txt";
                        bool flag64 = FileOperation.Read900(Character.Account.V.ToString());
                        if (flag64)
                        {
                            int 充值价值64 = 900;
                            玩家充值模块(flag64, 充值价值64);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb1000.txt";
                        bool flag65 = FileOperation.Read1000(Character.Account.V.ToString());
                        if (flag65)
                        {
                            int 充值价值65 = 1000;
                            玩家充值模块(flag65, 充值价值65);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb2000.txt";
                        bool flag66 = FileOperation.Read2000(Character.Account.V.ToString());
                        if (flag66)
                        {
                            int 充值价值66 = 2000;
                            玩家充值模块(flag66, 充值价值66);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb3000.txt";
                        bool flag67 = FileOperation.Read3000(Character.Account.V.ToString());
                        if (flag67)
                        {
                            int 充值价值67 = 3000;
                            玩家充值模块(flag67, 充值价值67);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb4000.txt";
                        bool flag68 = FileOperation.Read4000(Character.Account.V.ToString());
                        if (flag68)
                        {
                            int 充值价值68 = 4000;
                            玩家充值模块(flag68, 充值价值68);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb5000.txt";
                        bool flag69 = FileOperation.Read5000(Character.Account.V.ToString());
                        if (flag69)
                        {
                            int 充值价值69 = 5000;
                            玩家充值模块(flag69, 充值价值69);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb6000.txt";
                        bool flag70 = FileOperation.Read6000(Character.Account.V.ToString());
                        if (flag70)
                        {
                            int 充值价值70 = 6000;
                            玩家充值模块(flag70, 充值价值70);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb7000.txt";
                        bool flag71 = FileOperation.Read7000(Character.Account.V.ToString());
                        if (flag71)
                        {
                            int 充值价值71 = 7000;
                            玩家充值模块(flag71, 充值价值71);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb8000.txt";
                        bool flag72 = FileOperation.Read8000(Character.Account.V.ToString());
                        if (flag72)
                        {
                            int 充值价值72 = 8000;
                            玩家充值模块(flag72, 充值价值72);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb9000.txt";
                        bool flag73 = FileOperation.Read9000(Character.Account.V.ToString());
                        if (flag73)
                        {
                            int 充值价值73 = 9000;
                            玩家充值模块(flag73, 充值价值73);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\yb10000.txt";
                        bool flag74 = FileOperation.Read10000(Character.Account.V.ToString());
                        if (!flag74)
                        {
                            CurrentNPCDialoguePage = 710100001;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        int 充值价值74 = 10000;
                        玩家充值模块(flag74, 充值价值74);
                    }
                    if (选项编号 == 1 && Config.CurrentVersion >= 1 && Config.充值模块格式 == 2)
                    {
                        FileOperation.Path = Config.平台接入目录 + "\\cz1.txt";
                        bool flag75 = FileOperation.Read1(Character.Account.V.ToString());
                        if (flag75)
                        {
                            int 充值价值75 = 1;
                            玩家充值模块(flag75, 充值价值75);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz2.txt";
                        bool flag76 = FileOperation.Read2(Character.Account.V.ToString());
                        if (flag76)
                        {
                            int 充值价值76 = 2;
                            玩家充值模块(flag76, 充值价值76);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz3.txt";
                        bool flag77 = FileOperation.Read3(Character.Account.V.ToString());
                        if (flag77)
                        {
                            int 充值价值77 = 3;
                            玩家充值模块(flag77, 充值价值77);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz4.txt";
                        bool flag78 = FileOperation.Read4(Character.Account.V.ToString());
                        if (flag78)
                        {
                            int 充值价值78 = 4;
                            玩家充值模块(flag78, 充值价值78);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz5.txt";
                        bool flag79 = FileOperation.Read5(Character.Account.V.ToString());
                        if (flag79)
                        {
                            int 充值价值79 = 5;
                            玩家充值模块(flag79, 充值价值79);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz6.txt";
                        bool flag80 = FileOperation.Read6(Character.Account.V.ToString());
                        if (flag80)
                        {
                            int 充值价值80 = 6;
                            玩家充值模块(flag80, 充值价值80);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz7.txt";
                        bool flag81 = FileOperation.Read7(Character.Account.V.ToString());
                        if (flag81)
                        {
                            int 充值价值81 = 7;
                            玩家充值模块(flag81, 充值价值81);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz8.txt";
                        bool flag82 = FileOperation.Read8(Character.Account.V.ToString());
                        if (flag82)
                        {
                            int 充值价值82 = 8;
                            玩家充值模块(flag82, 充值价值82);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz9.txt";
                        bool flag83 = FileOperation.Read9(Character.Account.V.ToString());
                        if (flag83)
                        {
                            int 充值价值83 = 9;
                            玩家充值模块(flag83, 充值价值83);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz10.txt";
                        bool flag84 = FileOperation.Read10(Character.Account.V.ToString());
                        if (flag84)
                        {
                            int 充值价值84 = 10;
                            玩家充值模块(flag84, 充值价值84);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz20.txt";
                        bool flag85 = FileOperation.Read20(Character.Account.V.ToString());
                        if (flag85)
                        {
                            int 充值价值85 = 20;
                            玩家充值模块(flag85, 充值价值85);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz30.txt";
                        bool flag86 = FileOperation.Read30(Character.Account.V.ToString());
                        if (flag86)
                        {
                            int 充值价值86 = 30;
                            玩家充值模块(flag86, 充值价值86);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz40.txt";
                        bool flag87 = FileOperation.Read40(Character.Account.V.ToString());
                        if (flag87)
                        {
                            int 充值价值87 = 40;
                            玩家充值模块(flag87, 充值价值87);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz50.txt";
                        bool flag88 = FileOperation.Read50(Character.Account.V.ToString());
                        if (flag88)
                        {
                            int 充值价值88 = 50;
                            玩家充值模块(flag88, 充值价值88);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz60.txt";
                        bool flag89 = FileOperation.Read60(Character.Account.V.ToString());
                        if (flag89)
                        {
                            int 充值价值89 = 60;
                            玩家充值模块(flag89, 充值价值89);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz70.txt";
                        bool flag90 = FileOperation.Read70(Character.Account.V.ToString());
                        if (flag90)
                        {
                            int 充值价值90 = 70;
                            玩家充值模块(flag90, 充值价值90);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz80.txt";
                        bool flag91 = FileOperation.Read80(Character.Account.V.ToString());
                        if (flag91)
                        {
                            int 充值价值91 = 80;
                            玩家充值模块(flag91, 充值价值91);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz90.txt";
                        bool flag92 = FileOperation.Read90(Character.Account.V.ToString());
                        if (flag92)
                        {
                            int 充值价值92 = 90;
                            玩家充值模块(flag92, 充值价值92);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz100.txt";
                        bool flag93 = FileOperation.Read100(Character.Account.V.ToString());
                        if (flag93)
                        {
                            int 充值价值93 = 100;
                            玩家充值模块(flag93, 充值价值93);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz200.txt";
                        bool flag94 = FileOperation.Read200(Character.Account.V.ToString());
                        if (flag94)
                        {
                            int 充值价值94 = 200;
                            玩家充值模块(flag94, 充值价值94);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz300.txt";
                        bool flag95 = FileOperation.Read300(Character.Account.V.ToString());
                        if (flag95)
                        {
                            int 充值价值95 = 300;
                            玩家充值模块(flag95, 充值价值95);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz400.txt";
                        bool flag96 = FileOperation.Read400(Character.Account.V.ToString());
                        if (flag96)
                        {
                            int 充值价值96 = 400;
                            玩家充值模块(flag96, 充值价值96);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz500.txt";
                        bool flag97 = FileOperation.Read500(Character.Account.V.ToString());
                        if (flag97)
                        {
                            int 充值价值97 = 500;
                            玩家充值模块(flag97, 充值价值97);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz600.txt";
                        bool flag98 = FileOperation.Read600(Character.Account.V.ToString());
                        if (flag98)
                        {
                            int 充值价值98 = 600;
                            玩家充值模块(flag98, 充值价值98);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz700.txt";
                        bool flag99 = FileOperation.Read700(Character.Account.V.ToString());
                        if (flag99)
                        {
                            int 充值价值99 = 700;
                            玩家充值模块(flag99, 充值价值99);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz800.txt";
                        bool flag100 = FileOperation.Read800(Character.Account.V.ToString());
                        if (flag100)
                        {
                            int 充值价值100 = 800;
                            玩家充值模块(flag100, 充值价值100);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz900.txt";
                        bool flag101 = FileOperation.Read900(Character.Account.V.ToString());
                        if (flag101)
                        {
                            int 充值价值101 = 900;
                            玩家充值模块(flag101, 充值价值101);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz1000.txt";
                        bool flag102 = FileOperation.Read1000(Character.Account.V.ToString());
                        if (flag102)
                        {
                            int 充值价值102 = 1000;
                            玩家充值模块(flag102, 充值价值102);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz2000.txt";
                        bool flag103 = FileOperation.Read2000(Character.Account.V.ToString());
                        if (flag103)
                        {
                            int 充值价值103 = 2000;
                            玩家充值模块(flag103, 充值价值103);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz3000.txt";
                        bool flag104 = FileOperation.Read3000(Character.Account.V.ToString());
                        if (flag104)
                        {
                            int 充值价值104 = 3000;
                            玩家充值模块(flag104, 充值价值104);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz4000.txt";
                        bool flag105 = FileOperation.Read4000(Character.Account.V.ToString());
                        if (flag105)
                        {
                            int 充值价值105 = 4000;
                            玩家充值模块(flag105, 充值价值105);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz5000.txt";
                        bool flag106 = FileOperation.Read5000(Character.Account.V.ToString());
                        if (flag106)
                        {
                            int 充值价值106 = 5000;
                            玩家充值模块(flag106, 充值价值106);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz6000.txt";
                        bool flag107 = FileOperation.Read6000(Character.Account.V.ToString());
                        if (flag107)
                        {
                            int 充值价值107 = 6000;
                            玩家充值模块(flag107, 充值价值107);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz7000.txt";
                        bool flag108 = FileOperation.Read7000(Character.Account.V.ToString());
                        if (flag108)
                        {
                            int 充值价值108 = 7000;
                            玩家充值模块(flag108, 充值价值108);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz8000.txt";
                        bool flag109 = FileOperation.Read8000(Character.Account.V.ToString());
                        if (flag109)
                        {
                            int 充值价值109 = 8000;
                            玩家充值模块(flag109, 充值价值109);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz9000.txt";
                        bool flag110 = FileOperation.Read9000(Character.Account.V.ToString());
                        if (flag110)
                        {
                            int 充值价值110 = 9000;
                            玩家充值模块(flag110, 充值价值110);
                        }
                        FileOperation.Path = Config.平台接入目录 + "\\cz10000.txt";
                        bool flag111 = FileOperation.Read10000(Character.Account.V.ToString());
                        if (!flag111)
                        {
                            CurrentNPCDialoguePage = 710100001;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        int 充值价值111 = 10000;
                        玩家充值模块(flag111, 充值价值111);
                    }
                    if (选项编号 == 2)
                    {
                        CurrentNPCDialoguePage = 710101000;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"赞助人数：[{Config.沙城捐献赞助人数}] 赞助金额：[{Config.沙城捐献赞助金额}]<br>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                    }
                    if (选项编号 == 3 && Config.CurrentVersion >= 2)
                    {
                        CurrentNPCDialoguePage = 710102000;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                    }
                    break;
                case 710102000:
                    {
                        if (选项编号 == 1 && VIPSystem.DataSheet.TryGetValue(1, out var value13))
                        {
                            if (value13.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 0)
                            {
                                Character.VIPPoints.V -= value13.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 2 && VIPSystem.DataSheet.TryGetValue(2, out var value14))
                        {
                            if (value14.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 1)
                            {
                                Character.VIPPoints.V -= value14.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 3 && VIPSystem.DataSheet.TryGetValue(3, out var value15))
                        {
                            if (value15.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 2)
                            {
                                Character.VIPPoints.V -= value15.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 4 && VIPSystem.DataSheet.TryGetValue(4, out var value16))
                        {
                            if (value16.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 3)
                            {
                                Character.VIPPoints.V -= value16.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 5 && VIPSystem.DataSheet.TryGetValue(5, out var value17))
                        {
                            if (value17.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 4)
                            {
                                Character.VIPPoints.V -= value17.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 6 && VIPSystem.DataSheet.TryGetValue(6, out var value18))
                        {
                            if (value18.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 5)
                            {
                                Character.VIPPoints.V -= value18.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 7 && VIPSystem.DataSheet.TryGetValue(7, out var value19))
                        {
                            if (value19.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 6)
                            {
                                Character.VIPPoints.V -= value19.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 8 && VIPSystem.DataSheet.TryGetValue(8, out var value20))
                        {
                            if (value20.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 7)
                            {
                                Character.VIPPoints.V -= value20.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 9 && VIPSystem.DataSheet.TryGetValue(9, out var value21))
                        {
                            if (value21.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 8)
                            {
                                Character.VIPPoints.V -= value21.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        if (选项编号 == 10 && VIPSystem.DataSheet.TryGetValue(10, out var value22))
                        {
                            if (value22.NeedVIPPoints <= Character.VIPPoints.V && Character.VIPLevel.V == 9)
                            {
                                Character.VIPPoints.V -= value22.NeedVIPPoints;
                                Character.VIPLevel.V++;
                                NetworkManager.SendMessage(this, $"恭喜您,激活VIP{Character.VIPLevel.V}");
                                CurrentNPCDialoguePage = 710102000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"当前VIP积分：[{Character.VIPPoints}] VIP等级：[{Character.VIPLevel}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else
                            {
                                NetworkManager.SendMessage(this, "您可以已经激活过了,或者积分不足!");
                            }
                        }
                        break;
                    }
                case 710101000:
                    if (选项编号 != 1 || Config.CurrentVersion < 2)
                    {
                        break;
                    }
                    if (Character.Currencies[(CurrencyType)Config.沙城捐献货币类型] >= Config.沙城捐献支付数量 && Character.保底参数1.V == 0)
                    {
                        Character.Currencies[(CurrencyType)Config.沙城捐献货币类型] -= Config.沙城捐献支付数量;
                        Character.保底参数1.V++;
                        Config.沙城捐献赞助金额 += Config.沙城捐献支付数量;
                        Config.沙城捐献赞助人数++;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        CurrentNPCDialoguePage = 710101000;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"赞助人数：[{Config.沙城捐献赞助人数}] 赞助金额：[{Config.沙城捐献赞助金额}]<br>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        NetworkManager.SendAnnouncement("勇士【" + Name + "】进行了一次沙捐(我司给与奖励)!", rolling: true);
                        if (!Directory.Exists(".\\3DMIR文本\\沙城捐献系统"))
                        {
                            Directory.CreateDirectory(".\\3DMIR文本\\沙城捐献系统");
                        }
                        File.WriteAllText(".\\3DMIR文本\\沙城捐献系统\\总捐献.txt", "赞助总人数:\r\n" + Config.沙城捐献赞助人数 + "\r\n赞助总金额:\r\n" + Config.沙城捐献赞助金额);
                        SMain.AddSystemLog($"{Name}捐献{Config.沙城捐献货币类型}货币类型,捐献金额{Config.沙城捐献支付数量},累积捐献{Config.沙城捐献赞助金额},赞助总人数{Config.沙城捐献赞助人数}");
                        if (GameItem.DataSheet.TryGetValue(Config.沙城捐献获得物品1, out var value33))
                        {
                            byte b7 = FindEmptyInventoryIndex();
                            if (b7 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 1793
                                });
                                break;
                            }
                            if (value33 != null)
                            {
                                Inventory[b7] = new ItemInfo(value33, Character, 1, b7, Config.沙城捐献物品数量1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b7].ToArray()
                                });
                            }
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.沙城捐献获得物品2, out var value34))
                        {
                            byte b9 = byte.MaxValue;
                            byte b10 = 0;
                            while (b10 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b10))
                                {
                                    b10 = (byte)(b10 + 2);
                                    continue;
                                }
                                b9 = b10;
                                break;
                            }
                            if (b9 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 1793
                                });
                                break;
                            }
                            if (value34 != null)
                            {
                                Inventory[b9] = new ItemInfo(value34, Character, 1, b9, Config.沙城捐献物品数量2);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b9].ToArray()
                                });
                            }
                        }
                        if (!GameItem.DataSheet.TryGetValue(Config.沙城捐献获得物品3, out var value35))
                        {
                            break;
                        }
                        byte b11 = byte.MaxValue;
                        byte b12 = 0;
                        while (b12 < InventorySize)
                        {
                            if (Inventory.ContainsKey(b12))
                            {
                                b12 = (byte)(b12 + 3);
                                continue;
                            }
                            b11 = b12;
                            break;
                        }
                        if (b11 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                        }
                        else if (value35 != null)
                        {
                            Inventory[b11] = new ItemInfo(value35, Character, 1, b11, Config.沙城捐献物品数量3);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b11].ToArray()
                            });
                        }
                    }
                    else
                    {
                        CurrentNPCDialoguePage = 710101001;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                        });
                    }
                    break;
                case 658100000:
                    if (选项编号 != 1)
                    {
                        break;
                    }
                    switch (SEngine.Random.Next(1, 4))
                    {
                        case 1:
                            {
                                if (MapManager.Maps.TryGetValue(Config.暗之门地图1 * 16 + 1, out var value27))
                                {
                                    Map map = new Map(GameMap.DataSheet[(byte)Config.暗之门地图1]);
                                    map.Terrain = value27.Terrain;
                                    map.Areas = value27.Areas;
                                    map.Spawns = value27.Spawns;
                                    map.Guards = value27.Guards;
                                    map.TeleportationArea = value27.TeleportationArea;
                                    map.Cells = new HashSet<MapObject>[value27.MapSize.Width, value27.MapSize.Height];
                                    
                                    MapManager.ReplicaMaps.Add(map);
                                    Teleport(map, AreaType.Teleportation);
                                    NetworkManager.SendAnnouncement($"玩家：{Name}进入【{map}】魔渊历练", rolling: true);
                                    if (MonsterInfo.DataSheet.TryGetValue(Config.暗之门地图1BOSS, out var value28))
                                    {
                                        MonsterObject mon = new MonsterObject(value28, map, int.MaxValue, new Point(Config.暗之门地图1X, Config.暗之门地图1Y), 1,
                                            forbidResurrection: true, 立即刷新: true);
                                        mon.CurrentDirection = GameDirection.UpRight;
                                        mon.SurvivalTime = SEngine.CurrentTime.AddMinutes(30.0);
                                        九层妖塔BOSS1 = mon;
                                    }
                                    删除守卫();
                                }
                                break;
                            }
                        case 2:
                            {
                                if (MapManager.Maps.TryGetValue(Config.暗之门地图2 * 16 + 1, out var value29))
                                {
                                    Map map = new Map(GameMap.DataSheet[(byte)Config.暗之门地图2]);
                                    map.Terrain = value29.Terrain;
                                    map.Areas = value29.Areas;
                                    map.Spawns = value29.Spawns;
                                    map.Guards = value29.Guards;
                                    map.TeleportationArea = value29.TeleportationArea;
                                    map.Cells = new HashSet<MapObject>[value29.MapSize.Width, value29.MapSize.Height];
                                    
                                    MapManager.ReplicaMaps.Add(map);
                                    Teleport(map, AreaType.Teleportation);
                                    NetworkManager.SendAnnouncement($"玩家：{Name}进入【{map}】魔渊历练", rolling: true);
                                    if (MonsterInfo.DataSheet.TryGetValue(Config.暗之门地图2BOSS, out var value30))
                                    {
                                        MonsterObject mon = new MonsterObject(value30, map, int.MaxValue, new Point(Config.暗之门地图2X, Config.暗之门地图2Y), 1,
                                            forbidResurrection: true, 立即刷新: true);
                                        mon.CurrentDirection = GameDirection.UpRight;
                                        mon.SurvivalTime = SEngine.CurrentTime.AddMinutes(30.0);
                                        九层妖塔BOSS1 = mon;
                                    }
                                    删除守卫();
                                }
                                break;
                            }
                        case 3:
                            {
                                if (MapManager.Maps.TryGetValue(Config.暗之门地图3 * 16 + 1, out var value25))
                                {
                                    Map map = new Map(GameMap.DataSheet[(byte)Config.暗之门地图3]);
                                    map.Terrain = value25.Terrain;
                                    map.Areas = value25.Areas;
                                    map.Spawns = value25.Spawns;
                                    map.Guards = value25.Guards;
                                    map.TeleportationArea = value25.TeleportationArea;
                                    map.Cells = new HashSet<MapObject>[value25.MapSize.Width, value25.MapSize.Height];
                                    
                                    MapManager.ReplicaMaps.Add(map);
                                    Teleport(map, AreaType.Teleportation);
                                    NetworkManager.SendAnnouncement($"玩家：{Name}进入【{map}】魔渊历练", rolling: true);
                                    if (MonsterInfo.DataSheet.TryGetValue(Config.暗之门地图3BOSS, out var value26))
                                    {
                                        MonsterObject mon = new MonsterObject(value26, map, int.MaxValue, new Point(Config.暗之门地图3X, Config.暗之门地图3Y), 1,
                                            forbidResurrection: true, 立即刷新: true);
                                        mon.CurrentDirection = GameDirection.UpRight;
                                        mon.SurvivalTime = SEngine.CurrentTime.AddMinutes(30.0);
                                        九层妖塔BOSS1 = mon;
                                    }
                                    删除守卫();
                                }
                                break;
                            }
                        default:
                            {
                                if (MapManager.Maps.TryGetValue(Config.暗之门地图4 * 16 + 1, out var value23))
                                {
                                    Map map = new Map(GameMap.DataSheet[(byte)Config.暗之门地图4]);
                                    map.Terrain = value23.Terrain;
                                    map.Areas = value23.Areas;
                                    map.Spawns = value23.Spawns;
                                    map.Guards = value23.Guards;
                                    map.TeleportationArea = value23.TeleportationArea;
                                    map.Cells = new HashSet<MapObject>[value23.MapSize.Width, value23.MapSize.Height];
                                    
                                    MapManager.ReplicaMaps.Add(map);
                                    Teleport(map, AreaType.Teleportation);
                                    NetworkManager.SendAnnouncement($"玩家：{Name}进入【{map}】魔渊历练", rolling: true);
                                    if (MonsterInfo.DataSheet.TryGetValue(Config.暗之门地图4BOSS, out var value24))
                                    {
                                        MonsterObject mon = new MonsterObject(value24, map, int.MaxValue, new Point(Config.暗之门地图4X, Config.暗之门地图4Y), 1,
                                            forbidResurrection: true, 立即刷新: true);
                                        mon.CurrentDirection = GameDirection.UpRight;
                                        mon.SurvivalTime = SEngine.CurrentTime.AddMinutes(30.0);
                                        九层妖塔BOSS1 = mon;
                                    }
                                    删除守卫();
                                }
                                break;
                            }
                    }
                    break;
                case 616700000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int 魔虫窟副本等级 = Config.魔虫窟副本等级;
                        if (Team != null)
                        {
                            CurrentNPCDialoguePage = 616701000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (Character.魔虫窟次数.V >= Config.魔虫窟副本次数)
                        {
                            CurrentNPCDialoguePage = 616704000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Config.魔虫窟副本次数}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (Character.Level.V < 魔虫窟副本等级)
                        {
                            CurrentNPCDialoguePage = 616701000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{魔虫窟副本等级}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (SEngine.CurrentTime.Hour <= Config.魔虫窟副本时间小)
                        {
                            CurrentNPCDialoguePage = 616705000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (SEngine.CurrentTime.Hour >= Config.魔虫窟副本时间大)
                        {
                            CurrentNPCDialoguePage = 616705000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (Config.魔虫窟副本物品 == 0)
                        {
                            if (Gold >= Config.魔虫窟副本数量)
                            {
                                Gold -= Config.魔虫窟副本数量;
                                if (!MapManager.Maps.TryGetValue(1153, out var value48))
                                {
                                    break;
                                }
                                Map map = new Map(GameMap.DataSheet[72]);
                                map.Terrain = value48.Terrain;
                                map.Areas = value48.Areas;
                                map.Spawns = value48.Spawns;
                                map.Guards = value48.Guards;
                                map.TeleportationArea = value48.TeleportationArea;
                                map.Respawns = value48.Spawns.OrderBy((MonsterSpawn O) => O.Coordinates.X).ToList();
                                map.Cells = new HashSet<MapObject>[value48.MapSize.Width, value48.MapSize.Height];
                                
                                MapManager.ReplicaMaps.Add(map);
                                Teleport(map, AreaType.Teleportation);
                                Character.魔虫窟次数.V++;
                                NetworkManager.SendAnnouncement($"玩家：{Name}进入{map}副本历练", rolling: true);
                                foreach (MonsterSpawn spawn in value48.Spawns)
                                {
                                    if (spawn.Spawns == null) continue;

                                    foreach (MonsterSpawnInfo spawni in spawn.Spawns)
                                    {
                                        if (MonsterInfo.DataSheet.TryGetValue(spawni.MonsterName, out var moni))
                                        {
                                            for (int j = 0; j < spawni.SpawnCount; j++)
                                            {
                                                MonsterObject mon = new MonsterObject(moni, map, int.MaxValue, spawn.Coordinates, spawn.AreaRadius, 
                                                    forbidResurrection: true, 立即刷新: true);
                                                mon.CurrentDirection = GameDirection.UpRight;
                                                mon.SurvivalTime = SEngine.CurrentTime.AddHours(Config.魔虫窟分钟限制);
                                                魔虫窟怪物 = mon;
                                            }
                                        }
                                    }
                                }
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 616702000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                        }
                        if (Config.魔虫窟副本物品 == 1)
                        {
                            if (Ingot >= Config.魔虫窟副本数量)
                            {
                                Ingot -= Config.魔虫窟副本数量;
                                if (!MapManager.Maps.TryGetValue(1153, out var value50))
                                {
                                    break;
                                }
                                Map map = new Map(GameMap.DataSheet[72]);
                                map.Terrain = value50.Terrain;
                                map.Areas = value50.Areas;
                                map.Spawns = value50.Spawns;
                                map.Guards = value50.Guards;
                                map.TeleportationArea = value50.TeleportationArea;
                                map.Respawns = value50.Spawns.OrderBy((MonsterSpawn O) => O.Coordinates.X).ToList();
                                map.Cells = new HashSet<MapObject>[value50.MapSize.Width, value50.MapSize.Height];
                               
                                MapManager.ReplicaMaps.Add(map);
                                Teleport(map, AreaType.Teleportation);
                                Character.魔虫窟次数.V++;
                                NetworkManager.SendAnnouncement($"玩家：{Name}进入{map}副本历练", rolling: true);
                                foreach (MonsterSpawn spawn in value50.Spawns)
                                {
                                    if (spawn.Spawns == null) continue;

                                    foreach (MonsterSpawnInfo spawni in spawn.Spawns)
                                    {
                                        if (MonsterInfo.DataSheet.TryGetValue(spawni.MonsterName, out var value51))
                                        {
                                            for (int l = 0; l < spawni.SpawnCount; l++)
                                            {
                                                MonsterObject mon = new MonsterObject(value51, map, int.MaxValue, spawn.Coordinates, spawn.AreaRadius,
                                                    forbidResurrection: true, 立即刷新: true);
                                                mon.CurrentDirection = GameDirection.UpRight;
                                                mon.SurvivalTime = SEngine.CurrentTime.AddHours(Config.魔虫窟分钟限制);
                                                魔虫窟怪物 = mon;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 616702000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                        }
                        if (Config.魔虫窟副本物品 < 2)
                        {
                            break;
                        }
                        if (FindItem(Config.魔虫窟副本数量, Config.魔虫窟副本物品, out var 物品列表24))
                        {
                            ConsumeItem(Config.魔虫窟副本数量, 物品列表24);
                            if (!MapManager.Maps.TryGetValue(1153, out var value52))
                            {
                                break;
                            }
                            Map map = new Map(GameMap.DataSheet[72]);
                            map.Terrain = value52.Terrain;
                            map.Areas = value52.Areas;
                            map.Spawns = value52.Spawns;
                            map.Guards = value52.Guards;
                            map.TeleportationArea = value52.TeleportationArea;
                            map.Respawns = value52.Spawns.OrderBy((MonsterSpawn O) => O.Coordinates.X).ToList();
                            map.Cells = new HashSet<MapObject>[value52.MapSize.Width, value52.MapSize.Height];
                            
                            MapManager.ReplicaMaps.Add(map);
                            Teleport(map, AreaType.Teleportation);
                            Character.魔虫窟次数.V++;
                            NetworkManager.SendAnnouncement($"玩家：{Name}进入{map}副本历练", rolling: true);
                            {
                                foreach (MonsterSpawn spawn in value52.Spawns)
                                {
                                    if (spawn.Spawns == null) continue;

                                    foreach (MonsterSpawnInfo spawni in spawn.Spawns)
                                    {
                                        if (MonsterInfo.DataSheet.TryGetValue(spawni.MonsterName, out var value53))
                                        {
                                            for (int n = 0; n < spawni.SpawnCount; n++)
                                            {
                                                MonsterObject mon = new MonsterObject(value53, map, int.MaxValue, spawn.Coordinates, spawn.AreaRadius,
                                                    forbidResurrection: true, 立即刷新: true);
                                                mon.CurrentDirection = GameDirection.UpRight;
                                                mon.SurvivalTime = SEngine.CurrentTime.AddHours(Config.魔虫窟分钟限制);
                                                魔虫窟怪物 = mon;
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        }
                        CurrentNPCDialoguePage = 616702000;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 848200000:
                    switch (选项编号)
                    {
                        case 1:
                            CurrentNPCDialoguePage = 848201000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 2:
                            CurrentNPCDialoguePage = 848202000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 3:
                            CurrentNPCDialoguePage = 848203000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 4:
                            CurrentNPCDialoguePage = 848204000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 5:
                            CurrentNPCDialoguePage = 848205000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                    }
                    break;
                case 848201000:
                    switch (选项编号)
                    {
                        case 1:
                            if (!沃玛分解开关)
                            {
                                沃玛分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (沃玛分解开关)
                            {
                                沃玛分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 2:
                            if (!祖玛分解开关)
                            {
                                祖玛分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (祖玛分解开关)
                            {
                                祖玛分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 3:
                            if (!赤月分解开关)
                            {
                                赤月分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (赤月分解开关)
                            {
                                赤月分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 4:
                            if (!魔龙分解开关)
                            {
                                魔龙分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (魔龙分解开关)
                            {
                                魔龙分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 5:
                            if (!苍月分解开关)
                            {
                                苍月分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (苍月分解开关)
                            {
                                苍月分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 6:
                            if (!星王分解开关)
                            {
                                星王分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (星王分解开关)
                            {
                                星王分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 7:
                            if (!神秘分解开关)
                            {
                                神秘分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (神秘分解开关)
                            {
                                神秘分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 8:
                            if (!其他分解开关)
                            {
                                其他分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (其他分解开关)
                            {
                                其他分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 9:
                            if (!城主分解开关)
                            {
                                城主分解开关 = true;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (城主分解开关)
                            {
                                城主分解开关 = false;
                                CurrentNPCDialoguePage = 848201000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"沃玛分解：[{沃玛分解开关}] 祖玛分解：[{祖玛分解开关}] 赤月分解：[{赤月分解开关}]<br>" + $"魔龙分解：[{魔龙分解开关}] 苍月分解：[{苍月分解开关}] 星王分解：[{星王分解开关}]<br>" + $"神秘分解：[{神秘分解开关}] 其他分解：[{其他分解开关}] 城主分解：[{城主分解开关}]<br>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            break;
                        case 10:
                            CurrentNPCDialoguePage = 848200000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                    }
                    break;
                case 848202000:
                    if (Config.购买狂暴之力)
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int 狂暴开启物品数量2 = Config.狂暴开启物品数量;
                        int 狂暴开启物品名称2 = Config.狂暴开启物品名称;
                        int 狂暴开启元宝数量2 = Config.狂暴开启元宝数量;
                        int 狂暴开启金币数量2 = Config.狂暴开启金币数量;
                        if (Titles.ContainsKey(Config.狂暴称号格式))
                        {
                            CurrentNPCDialoguePage = 699700002;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                        }
                        else if (Config.狂暴货币格式 == 1)
                        {
                            if (Ingot >= 狂暴开启元宝数量2)
                            {
                                Ingot -= 狂暴开启元宝数量2;
                                AddTitle(Config.狂暴称号格式);
                                if (GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value8))
                                {
                                    CombatPowerBonus.Add(value8, value8.CombatPower);
                                    BonusStats.Add(value8, value8.Stats);
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 699700001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                        }
                        else if (Config.狂暴货币格式 == 0)
                        {
                            if (Gold >= 狂暴开启金币数量2)
                            {
                                Gold -= 狂暴开启金币数量2;
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                                AddTitle(Config.狂暴称号格式);
                                if (GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value9))
                                {
                                    CombatPowerBonus.Add(value9, value9.CombatPower);
                                    BonusStats.Add(value9, value9.Stats);
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 699700001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                        }
                        else if (Config.狂暴货币格式 == 2)
                        {
                            if (FindItem(狂暴开启物品数量2, 狂暴开启物品名称2, out var 物品列表11))
                            {
                                ConsumeItem(狂暴开启物品数量2, 物品列表11);
                                AddTitle(Config.狂暴称号格式);
                                if (GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value10))
                                {
                                    CombatPowerBonus.Add(value10, value10.CombatPower);
                                    BonusStats.Add(value10, value10.Stats);
                                }
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 699700001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 699700001;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                        }
                    }
                    else
                    {
                        NetworkManager.SendMessage(this, "当前功能没有启动,联系QQ群：634564006");
                    }
                    break;
                case 848203000:
                    if (Config.会员满血设置)
                    {
                        if (CurrentMap.IsSafeArea(CurrentPosition))
                        {
                            CurrentHP += this[Stat.MaxHP];
                            CurrentMP += this[Stat.MaxMP];
                            NetworkManager.SendMessage(this, "已经恢复满血状态!（只能在安全区内快速治疗哦!）");
                        }
                    }
                    else
                    {
                        NetworkManager.SendMessage(this, "当前功能没有启动,联系QQ群：634564006");
                    }
                    break;
                case 848204000:
                    if (Config.AutoPickUpAllVisible)
                    {
                        if (Character.AutoPickUpAllVisible.V == false)
                        {
                            Character.AutoPickUpAllVisible.V = true;
                            NetworkManager.SendMessage(this, "全屏拾取开启");
                        }
                        else if (Character.AutoPickUpAllVisible.V == true)
                        {
                            Character.AutoPickUpAllVisible.V = false;
                            NetworkManager.SendMessage(this, "全屏拾取关闭");
                        }
                    }
                    else
                    {
                        NetworkManager.SendMessage(this, "当前功能没有启动,联系QQ群：634564006");
                    }
                    break;
                case 479400000:
                    if (选项编号 != 1)
                    {
                        break;
                    }
                    if (Config.监狱货币类型 == 0 && Config.CurrentVersion >= 1)
                    {
                        if (Gold >= Config.监狱货币)
                        {
                            Gold -= Config.监狱货币;
                            Teleport((CurrentMap.MapID == 147) ? CurrentMap : MapManager.GetMap(147), AreaType.Resurrection);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 479400001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                    }
                    else if (Config.监狱货币类型 == 1 && Config.CurrentVersion >= 1)
                    {
                        if (Ingot >= Config.监狱货币)
                        {
                            Ingot -= Config.监狱货币;
                            Teleport((CurrentMap.MapID == 147) ? CurrentMap : MapManager.GetMap(147), AreaType.Resurrection);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 479400001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                    }
                    else
                    {
                        CurrentNPCDialoguePage = 479400001;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                            ObjectID = CurrentNPC.ObjectID
                        });
                    }
                    break;
                case 611200000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int 九层妖塔副本等级 = Config.九层妖塔副本等级;
                        if (Team != null)
                        {
                            CurrentNPCDialoguePage = 611203000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (Character.九层妖塔次数.V >= Config.九层妖塔副本次数)
                        {
                            CurrentNPCDialoguePage = 611204000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Config.九层妖塔副本次数}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (Character.Level.V < 九层妖塔副本等级)
                        {
                            CurrentNPCDialoguePage = 611201000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{九层妖塔副本等级}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (SEngine.CurrentTime.Hour <= Config.九层妖塔副本时间小)
                        {
                            CurrentNPCDialoguePage = 611205000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (SEngine.CurrentTime.Hour >= Config.九层妖塔副本时间大)
                        {
                            CurrentNPCDialoguePage = 611205000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }

                        MonsterObject ZenDemonTowerMonster(Map map, string monName, Point position)
                        {
                            if (MonsterInfo.DataSheet.TryGetValue(monName, out var moni))
                            {
                                MonsterObject mon = new MonsterObject(moni, map, int.MaxValue, position, 1,
                                    true, true);
                                mon.CurrentDirection = GameDirection.UpRight;
                                mon.SurvivalTime = SEngine.CurrentTime.AddMinutes(60.0);
                                CurrentMap.TotalSurvivingMonsters++;
                                return mon;
                            }
                            return null;
                        }

                        if (Config.九层妖塔副本物品 == 0)
                        {
                            if (Gold >= Config.九层妖塔副本数量)
                            {
                                Gold -= Config.九层妖塔副本数量;
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                                if (!MapManager.Maps.TryGetValue(3633, out var value58))
                                {
                                    break;
                                }
                                Map map = new Map(GameMap.DataSheet[227]);
                                map.Terrain = value58.Terrain;
                                map.Areas = value58.Areas;
                                map.Spawns = value58.Spawns;
                                map.Guards = value58.Guards;
                                map.TeleportationArea = value58.TeleportationArea;
                                map.ProcessTime = SEngine.CurrentTime.AddSeconds(20.0);
                                map.Respawns = value58.Spawns.OrderBy((MonsterSpawn O) => O.Coordinates.X).ToList();
                                map.Cells = new HashSet<MapObject>[value58.MapSize.Width, value58.MapSize.Height];
                                
                                MapManager.ReplicaMaps.Add(map);
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6123], map, GameDirection.DownLeft, new Point(1028, 160));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6183], map, GameDirection.DownLeft, new Point(881, 307));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6184], map, GameDirection.DownLeft, new Point(733, 454));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6185], map, GameDirection.DownLeft, new Point(1148, 280));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6243], map, GameDirection.DownLeft, new Point(1001, 427));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6244], map, GameDirection.DownLeft, new Point(853, 575));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6215], map, GameDirection.DownLeft, new Point(1291, 423));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6342], map, GameDirection.DownLeft, new Point(1144, 570));
                                Teleport(map, AreaType.Teleportation);
                                Character.九层妖塔次数.V++;
                                NetworkManager.SendAnnouncement($"玩家：{Name}进入{map}副本历练", rolling: true);

                                九层妖塔BOSS1 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS1, new Point(1028, 160));
                                九层妖塔BOSS2 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS2, new Point(881, 301));
                                九层妖塔BOSS3 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS3, new Point(733, 454));
                                九层妖塔BOSS4 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS4, new Point(1148, 280));
                                九层妖塔BOSS5 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS5, new Point(1001, 427));
                                九层妖塔BOSS6 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS6, new Point(853, 575));
                                九层妖塔BOSS7 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS7, new Point(1291, 423));
                                九层妖塔BOSS8 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS8, new Point(1144, 570));
                                九层妖塔BOSS9 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS9, new Point(996, 702));

                                for (var i = 0; i <= Config.九层妖塔数量1; i++)
                                    九层妖塔精英1 = ZenDemonTowerMonster(map, Config.九层妖塔精英1, new Point(1028, 160));
                                
                                for (var i = 0; i <= Config.九层妖塔数量2; i++)
                                    九层妖塔精英2 = ZenDemonTowerMonster(map, Config.九层妖塔精英2, new Point(881, 301));

                                for (var i = 0; i <= Config.九层妖塔数量3; i++)
                                    九层妖塔精英3 = ZenDemonTowerMonster(map, Config.九层妖塔精英3, new Point(733, 454));

                                for (var i = 0; i <= Config.九层妖塔数量4; i++)
                                    九层妖塔精英4 = ZenDemonTowerMonster(map, Config.九层妖塔精英4, new Point(1148, 280));

                                for (var i = 0; i <= Config.九层妖塔数量5; i++)
                                    九层妖塔精英5 = ZenDemonTowerMonster(map, Config.九层妖塔精英5, new Point(1001, 427));

                                for (var i = 0; i <= Config.九层妖塔数量6; i++)
                                    九层妖塔精英6 = ZenDemonTowerMonster(map, Config.九层妖塔精英6, new Point(853, 575));

                                for (var i = 0; i <= Config.九层妖塔数量7; i++)
                                    九层妖塔精英7 = ZenDemonTowerMonster(map, Config.九层妖塔精英7, new Point(1291, 423));

                                for (var i = 0; i <= Config.九层妖塔数量8; i++)
                                    九层妖塔精英8 = ZenDemonTowerMonster(map, Config.九层妖塔精英8, new Point(1144, 570));

                                for (var i = 0; i <= Config.九层妖塔数量9; i++)
                                    九层妖塔精英9 = ZenDemonTowerMonster(map, Config.九层妖塔精英9, new Point(996, 702));
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 611202000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                        }
                        if (Config.九层妖塔副本物品 == 1)
                        {
                            if (Ingot >= Config.九层妖塔副本数量)
                            {
                                Ingot -= Config.九层妖塔副本数量;
                                if (!MapManager.Maps.TryGetValue(3633, out var value77))
                                {
                                    break;
                                }
                                Map map = new Map(GameMap.DataSheet[227]);
                                map.Terrain = value77.Terrain;
                                map.Areas = value77.Areas;
                                map.Spawns = value77.Spawns;
                                map.Guards = value77.Guards;
                                map.TeleportationArea = value77.TeleportationArea;
                                map.ProcessTime = SEngine.CurrentTime.AddSeconds(20.0);
                                map.Respawns = value77.Spawns.OrderBy((MonsterSpawn O) => O.Coordinates.X).ToList();
                                map.Cells = new HashSet<MapObject>[value77.MapSize.Width, value77.MapSize.Height];

                                MapManager.ReplicaMaps.Add(map);
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6123], map, GameDirection.DownLeft, new Point(1028, 160));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6183], map, GameDirection.DownLeft, new Point(881, 307));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6184], map, GameDirection.DownLeft, new Point(733, 454));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6185], map, GameDirection.DownLeft, new Point(1148, 280));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6243], map, GameDirection.DownLeft, new Point(1001, 427));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6244], map, GameDirection.DownLeft, new Point(853, 575));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6215], map, GameDirection.DownLeft, new Point(1291, 423));
                                map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6342], map, GameDirection.DownLeft, new Point(1144, 570));
                                Teleport(map, AreaType.Teleportation);
                                Character.九层妖塔次数.V++;
                                NetworkManager.SendAnnouncement($"玩家：{Name}进入{map}副本历练", rolling: true);

                                九层妖塔BOSS1 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS1, new Point(1028, 160));
                                九层妖塔BOSS2 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS2, new Point(881, 301));
                                九层妖塔BOSS3 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS3, new Point(733, 454));
                                九层妖塔BOSS4 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS4, new Point(1148, 280));
                                九层妖塔BOSS5 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS5, new Point(1001, 427));
                                九层妖塔BOSS6 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS6, new Point(853, 575));
                                九层妖塔BOSS7 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS7, new Point(1291, 423));
                                九层妖塔BOSS8 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS8, new Point(1144, 570));
                                九层妖塔BOSS9 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS9, new Point(996, 702));

                                for (var i = 0; i <= Config.九层妖塔数量1; i++)
                                    九层妖塔精英1 = ZenDemonTowerMonster(map, Config.九层妖塔精英1, new Point(1028, 160));

                                for (var i = 0; i <= Config.九层妖塔数量2; i++)
                                    九层妖塔精英2 = ZenDemonTowerMonster(map, Config.九层妖塔精英2, new Point(881, 301));

                                for (var i = 0; i <= Config.九层妖塔数量3; i++)
                                    九层妖塔精英3 = ZenDemonTowerMonster(map, Config.九层妖塔精英3, new Point(733, 454));

                                for (var i = 0; i <= Config.九层妖塔数量4; i++)
                                    九层妖塔精英4 = ZenDemonTowerMonster(map, Config.九层妖塔精英4, new Point(1148, 280));

                                for (var i = 0; i <= Config.九层妖塔数量5; i++)
                                    九层妖塔精英5 = ZenDemonTowerMonster(map, Config.九层妖塔精英5, new Point(1001, 427));

                                for (var i = 0; i <= Config.九层妖塔数量6; i++)
                                    九层妖塔精英6 = ZenDemonTowerMonster(map, Config.九层妖塔精英6, new Point(853, 575));

                                for (var i = 0; i <= Config.九层妖塔数量7; i++)
                                    九层妖塔精英7 = ZenDemonTowerMonster(map, Config.九层妖塔精英7, new Point(1291, 423));

                                for (var i = 0; i <= Config.九层妖塔数量8; i++)
                                    九层妖塔精英8 = ZenDemonTowerMonster(map, Config.九层妖塔精英8, new Point(1144, 570));

                                for (var i = 0; i <= Config.九层妖塔数量9; i++)
                                    九层妖塔精英9 = ZenDemonTowerMonster(map, Config.九层妖塔精英9, new Point(996, 702));
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 611202000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                        }
                        if (Config.九层妖塔副本物品 < 2)
                        {
                            break;
                        }
                        if (FindItem(Config.九层妖塔副本数量, Config.九层妖塔副本物品, out var 物品列表29))
                        {
                            ConsumeItem(Config.九层妖塔副本数量, 物品列表29);
                            if (!MapManager.Maps.TryGetValue(3633, out var value96))
                            {
                                break;
                            }
                            Map map = new Map(GameMap.DataSheet[227]);
                            map.Terrain = value96.Terrain;
                            map.Areas = value96.Areas;
                            map.Spawns = value96.Spawns;
                            map.Guards = value96.Guards;
                            map.TeleportationArea = value96.TeleportationArea;
                            map.ProcessTime = SEngine.CurrentTime.AddSeconds(20.0);
                            map.Respawns = value96.Spawns.OrderBy((MonsterSpawn O) => O.Coordinates.X).ToList();
                            map.Cells = new HashSet<MapObject>[value96.MapSize.Width, value96.MapSize.Height];
                            
                            MapManager.ReplicaMaps.Add(map);
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6123], map, GameDirection.DownLeft, new Point(1028, 160));
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6183], map, GameDirection.DownLeft, new Point(881, 307));
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6184], map, GameDirection.DownLeft, new Point(733, 454));
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6185], map, GameDirection.DownLeft, new Point(1148, 280));
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6243], map, GameDirection.DownLeft, new Point(1001, 427));
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6244], map, GameDirection.DownLeft, new Point(853, 575));
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6215], map, GameDirection.DownLeft, new Point(1291, 423));
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6342], map, GameDirection.DownLeft, new Point(1144, 570));
                            Teleport(map, AreaType.Teleportation);
                            Character.九层妖塔次数.V++;
                            NetworkManager.SendAnnouncement($"玩家：{Name}进入{map}副本历练", rolling: true);

                            九层妖塔BOSS1 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS1, new Point(1028, 160));
                            九层妖塔BOSS2 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS2, new Point(881, 301));
                            九层妖塔BOSS3 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS3, new Point(733, 454));
                            九层妖塔BOSS4 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS4, new Point(1148, 280));
                            九层妖塔BOSS5 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS5, new Point(1001, 427));
                            九层妖塔BOSS6 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS6, new Point(853, 575));
                            九层妖塔BOSS7 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS7, new Point(1291, 423));
                            九层妖塔BOSS8 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS8, new Point(1144, 570));
                            九层妖塔BOSS9 = ZenDemonTowerMonster(map, Config.九层妖塔BOSS9, new Point(996, 702));

                            for (var i = 0; i <= Config.九层妖塔数量1; i++)
                                九层妖塔精英1 = ZenDemonTowerMonster(map, Config.九层妖塔精英1, new Point(1028, 160));

                            for (var i = 0; i <= Config.九层妖塔数量2; i++)
                                九层妖塔精英2 = ZenDemonTowerMonster(map, Config.九层妖塔精英2, new Point(881, 301));

                            for (var i = 0; i <= Config.九层妖塔数量3; i++)
                                九层妖塔精英3 = ZenDemonTowerMonster(map, Config.九层妖塔精英3, new Point(733, 454));

                            for (var i = 0; i <= Config.九层妖塔数量4; i++)
                                九层妖塔精英4 = ZenDemonTowerMonster(map, Config.九层妖塔精英4, new Point(1148, 280));

                            for (var i = 0; i <= Config.九层妖塔数量5; i++)
                                九层妖塔精英5 = ZenDemonTowerMonster(map, Config.九层妖塔精英5, new Point(1001, 427));

                            for (var i = 0; i <= Config.九层妖塔数量6; i++)
                                九层妖塔精英6 = ZenDemonTowerMonster(map, Config.九层妖塔精英6, new Point(853, 575));

                            for (var i = 0; i <= Config.九层妖塔数量7; i++)
                                九层妖塔精英7 = ZenDemonTowerMonster(map, Config.九层妖塔精英7, new Point(1291, 423));

                            for (var i = 0; i <= Config.九层妖塔数量8; i++)
                                九层妖塔精英8 = ZenDemonTowerMonster(map, Config.九层妖塔精英8, new Point(1144, 570));

                            for (var i = 0; i <= Config.九层妖塔数量9; i++)
                                九层妖塔精英9 = ZenDemonTowerMonster(map, Config.九层妖塔精英9, new Point(996, 702));
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 611202000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 612300000:
                    {
                        int num4 = Config.九层妖塔数量2 + Config.九层妖塔数量3 + Config.九层妖塔数量4 + Config.九层妖塔数量5 + Config.九层妖塔数量6 + Config.九层妖塔数量7 + Config.九层妖塔数量8 + Config.九层妖塔数量9 + 16;
                        if (选项编号 == 1)
                        {
                            Map value4;
                            if (CurrentMap.TotalSurvivingMonsters != num4 && Config.九层妖塔统计开关 == 1)
                            {
                                CurrentNPCDialoguePage = 612301000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (MapManager.Maps.TryGetValue(3633, out value4))
                            {
                                Teleport(value4, AreaType.DemonTower1);
                                NetworkManager.SendAnnouncement($"玩家：{Name}闯入{CurrentMap}二层副本历练", rolling: true);
                            }
                        }
                        break;
                    }
                case 618300000:
                    {
                        int num30 = Config.九层妖塔数量3 + Config.九层妖塔数量4 + Config.九层妖塔数量5 + Config.九层妖塔数量6 + Config.九层妖塔数量7 + Config.九层妖塔数量8 + Config.九层妖塔数量9 + 14;
                        if (选项编号 == 1)
                        {
                            Map value36;
                            if (CurrentMap.TotalSurvivingMonsters != num30 && Config.九层妖塔统计开关 == 1)
                            {
                                CurrentNPCDialoguePage = 612301000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (MapManager.Maps.TryGetValue(3633, out value36))
                            {
                                Teleport(value36, AreaType.DemonTower2);
                                NetworkManager.SendAnnouncement($"玩家：{Name}闯入{CurrentMap}三层副本历练");
                            }
                        }
                        break;
                    }
                case 618400000:
                    {
                        int num14 = Config.九层妖塔数量4 + Config.九层妖塔数量5 + Config.九层妖塔数量6 + Config.九层妖塔数量7 + Config.九层妖塔数量8 + Config.九层妖塔数量9 + 12;
                        if (选项编号 == 1)
                        {
                            Map value11;
                            if (CurrentMap.TotalSurvivingMonsters != num14 && Config.九层妖塔统计开关 == 1)
                            {
                                CurrentNPCDialoguePage = 612301000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (MapManager.Maps.TryGetValue(3633, out value11))
                            {
                                Teleport(value11, AreaType.DemonTower3);
                                NetworkManager.SendAnnouncement($"玩家：{Name}闯入{CurrentMap}四层副本历练");
                            }
                        }
                        break;
                    }
                case 618500000:
                    {
                        int num66 = Config.九层妖塔数量5 + Config.九层妖塔数量6 + Config.九层妖塔数量7 + Config.九层妖塔数量8 + Config.九层妖塔数量9 + 10;
                        if (选项编号 == 1)
                        {
                            Map value57;
                            if (CurrentMap.TotalSurvivingMonsters != num66 && Config.九层妖塔统计开关 == 1)
                            {
                                CurrentNPCDialoguePage = 612301000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (MapManager.Maps.TryGetValue(3633, out value57))
                            {
                                Teleport(value57, AreaType.DemonTower4);
                                NetworkManager.SendAnnouncement($"玩家：{Name}闯入{CurrentMap}五层副本历练");
                            }
                        }
                        break;
                    }
                case 624300000:
                    {
                        int num31 = Config.九层妖塔数量6 + Config.九层妖塔数量7 + Config.九层妖塔数量8 + Config.九层妖塔数量9 + 8;
                        if (选项编号 == 1)
                        {
                            Map value37;
                            if (CurrentMap.TotalSurvivingMonsters != num31 && Config.九层妖塔统计开关 == 1)
                            {
                                CurrentNPCDialoguePage = 612301000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (MapManager.Maps.TryGetValue(3633, out value37))
                            {
                                Teleport(value37, AreaType.DemonTower5);
                                NetworkManager.SendAnnouncement($"玩家：{Name}闯入{CurrentMap}六层副本历练");
                            }
                        }
                        break;
                    }
                case 624400000:
                    {
                        int num18 = Config.九层妖塔数量7 + Config.九层妖塔数量8 + Config.九层妖塔数量9 + 6;
                        if (选项编号 == 1)
                        {
                            Map value12;
                            if (CurrentMap.TotalSurvivingMonsters != num18 && Config.九层妖塔统计开关 == 1)
                            {
                                CurrentNPCDialoguePage = 612301000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (MapManager.Maps.TryGetValue(3633, out value12))
                            {
                                Teleport(value12, AreaType.DemonTower6);
                                NetworkManager.SendAnnouncement($"玩家：{Name}闯入{CurrentMap}七层副本历练");
                            }
                        }
                        break;
                    }
                case 621500000:
                    {
                        int num48 = Config.九层妖塔数量8 + Config.九层妖塔数量9 + 4;
                        if (选项编号 == 1)
                        {
                            Map value47;
                            if (CurrentMap.TotalSurvivingMonsters != num48 && Config.九层妖塔统计开关 == 1)
                            {
                                CurrentNPCDialoguePage = 612301000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (MapManager.Maps.TryGetValue(3633, out value47))
                            {
                                Teleport(value47, AreaType.DemonTower7);
                                NetworkManager.SendAnnouncement($"玩家：{Name}闯入{CurrentMap}八层副本历练");
                            }
                        }
                        break;
                    }
                case 634200000:
                    {
                        int num55 = Config.九层妖塔数量9 + 2;
                        if (选项编号 == 1)
                        {
                            Map value54;
                            if (CurrentMap.TotalSurvivingMonsters != num55 && Config.九层妖塔统计开关 == 1)
                            {
                                CurrentNPCDialoguePage = 612301000;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (MapManager.Maps.TryGetValue(3633, out value54))
                            {
                                Teleport(value54, AreaType.DemonTower8);
                                NetworkManager.SendAnnouncement($"玩家：{Name}闯入{CurrentMap}九层副本历练");
                            }
                        }
                        break;
                    }
                case 479600000:
                    if (选项编号 == 1)
                    {
                        Teleport(MapManager.GetMap(RespawnMapIndex), AreaType.Resurrection);
                    }
                    break;
                case 479500000:
                    if (选项编号 != 1)
                    {
                        break;
                    }
                    if (SEngine.CurrentTime.Hour != Config.武斗场时间一 && SEngine.CurrentTime.Hour != Config.武斗场时间二)
                    {
                        CurrentNPCDialoguePage = 479501000;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Config.武斗场时间一}><#P1:{Config.武斗场时间二}>")
                        });
                        break;
                    }
                    if (SEngine.CurrentTime.Hour == Character.武斗日期.V.Hour && Config.武斗场次数限制 == 1)
                    {
                        CurrentNPCDialoguePage = 479502000;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                        });
                        break;
                    }
                    if (CurrentLevel < 25)
                    {
                        CurrentNPCDialoguePage = 711900001;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{25}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                    }
                    if (Gold >= 50000)
                    {
                        Gold -= 50000;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        Character.武斗日期.V = SEngine.CurrentTime;
                        Teleport((CurrentMap.MapID == 183) ? CurrentMap : MapManager.GetMap(183), AreaType.Teleportation);
                    }
                    else
                    {
                        CurrentNPCDialoguePage = 479503000;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{50000}>")
                        });
                    }
                    break;
                case 612800000:
                    {
                        int num15;
                        int num16;
                        int 物品编号;
                        int num17;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num15 = 74;
                                num16 = 2;
                                物品编号 = 91127;
                                num17 = 10;
                                break;
                            case 2:
                                num15 = 74;
                                num16 = 2;
                                物品编号 = 91127;
                                num17 = 15;
                                break;
                            case 3:
                                num15 = 74;
                                num16 = 2;
                                物品编号 = 91127;
                                num17 = 19;
                                break;
                            case 4:
                                num15 = 74;
                                num16 = 2;
                                物品编号 = 91127;
                                num17 = 22;
                                break;
                        }
                        List<ItemInfo> 物品列表12;
                        if (SEngine.CurrentTime.Hour != num17)
                        {
                            CurrentNPCDialoguePage = 612800001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num17}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (FindItem(num16, 物品编号, out 物品列表12))
                        {
                            ConsumeItem(num16, 物品列表12);
                            Teleport((CurrentMap.MapID == num15) ? CurrentMap : MapManager.GetMap(num15), AreaType.Teleportation);
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 691900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num16}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 699700000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int 狂暴开启物品数量 = Config.狂暴开启物品数量;
                        int 狂暴开启物品名称 = Config.狂暴开启物品名称;
                        int 狂暴开启元宝数量 = Config.狂暴开启元宝数量;
                        int 狂暴开启金币数量 = Config.狂暴开启金币数量;
                        if (Titles.ContainsKey(Config.狂暴称号格式))
                        {
                            CurrentNPCDialoguePage = 699700002;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                        }
                        else if (Config.狂暴货币格式 == 1)
                        {
                            if (Ingot >= 狂暴开启元宝数量 && Config.称号叠加开关 == 1)
                            {
                                Ingot -= 狂暴开启元宝数量;
                                AddTitle(Config.狂暴称号格式);
                                if (GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value5))
                                {
                                    CombatPowerBonus.Add(value5, value5.CombatPower);
                                    BonusStats.Add(value5, value5.Stats);
                                }
                            }
                            else if (Ingot >= 狂暴开启元宝数量 && Config.称号叠加开关 == 0)
                            {
                                Ingot -= 狂暴开启元宝数量;
                                AddTitle(Config.狂暴称号格式);
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 699700001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                        }
                        else if (Config.狂暴货币格式 == 0)
                        {
                            if (Gold >= 狂暴开启金币数量 && Config.称号叠加开关 == 1)
                            {
                                Gold -= 狂暴开启金币数量;
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                                AddTitle(Config.狂暴称号格式);
                                if (GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value6))
                                {
                                    CombatPowerBonus.Add(value6, value6.CombatPower);
                                    BonusStats.Add(value6, value6.Stats);
                                }
                            }
                            else if (Gold >= 狂暴开启金币数量 && Config.称号叠加开关 == 0)
                            {
                                Gold -= 狂暴开启金币数量;
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                                AddTitle(Config.狂暴称号格式);
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 699700001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                        }
                        else if (Config.狂暴货币格式 == 2)
                        {
                            List<ItemInfo> 物品列表8;
                            if (FindItem(狂暴开启物品数量, 狂暴开启物品名称, out var 物品列表7) && Config.称号叠加开关 == 1)
                            {
                                ConsumeItem(狂暴开启物品数量, 物品列表7);
                                AddTitle(Config.狂暴称号格式);
                                if (GameTitle.DataSheet.TryGetValue(Config.狂暴称号格式, out var value7))
                                {
                                    CombatPowerBonus.Add(value7, value7.CombatPower);
                                    BonusStats.Add(value7, value7.Stats);
                                }
                            }
                            else if (FindItem(狂暴开启物品数量, 狂暴开启物品名称, out 物品列表8) && Config.称号叠加开关 == 0)
                            {
                                ConsumeItem(狂暴开启物品数量, 物品列表8);
                                AddTitle(Config.狂暴称号格式);
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 699700001;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 699700001;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                        }
                        break;
                    }
                case 643500000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        byte b36 = FindEmptyInventoryIndex();
                        GameItem value55 = null;
                        GameItem value56 = null;
                        if (FindItem(31031, out var 物品9) || FindItem(31032, out 物品9) || FindItem(31033, out 物品9) || FindItem(31034, out 物品9) || FindItem(31035, out 物品9) || FindItem(31036, out 物品9) || FindItem(31037, out 物品9) || FindItem(31038, out 物品9) || FindItem(31042, out 物品9) || FindItem(31043, out 物品9) || FindItem(31044, out 物品9) || FindItem(31045, out 物品9) || FindItem(31046, out 物品9) || FindItem(32531, out 物品9) || FindItem(32532, out 物品9) || FindItem(32533, out 物品9) || FindItem(32534, out 物品9) || FindItem(32535, out 物品9) || FindItem(32536, out 物品9) || FindItem(32537, out 物品9) || FindItem(32538, out 物品9) || FindItem(32539, out 物品9) || FindItem(32540, out 物品9) || FindItem(32541, out 物品9) || FindItem(32544, out 物品9) || FindItem(32545, out 物品9) || FindItem(32546, out 物品9) || FindItem(32547, out 物品9) || FindItem(32548, out 物品9) || FindItem(32549, out 物品9) || FindItem(32550, out 物品9) || FindItem(32551, out 物品9) || FindItem(32552, out 物品9) || FindItem(32553, out 物品9) || FindItem(32554, out 物品9) || FindItem(33001, out 物品9) || FindItem(33002, out 物品9) || FindItem(33003, out 物品9) || FindItem(33004, out 物品9) || FindItem(33005, out 物品9) || FindItem(33006, out 物品9) || FindItem(33007, out 物品9) || FindItem(33008, out 物品9) || FindItem(33009, out 物品9) || FindItem(33010, out 物品9) || FindItem(33011, out 物品9) || FindItem(33012, out 物品9) || FindItem(33014, out 物品9) || FindItem(33015, out 物品9) || FindItem(33016, out 物品9) || FindItem(33017, out 物品9) || FindItem(33018, out 物品9) || FindItem(33019, out 物品9) || FindItem(33020, out 物品9) || FindItem(34001, out 物品9) || FindItem(34002, out 物品9) || FindItem(34003, out 物品9) || FindItem(34004, out 物品9) || FindItem(34005, out 物品9) || FindItem(34006, out 物品9) || FindItem(34007, out 物品9) || FindItem(34008, out 物品9) || FindItem(34009, out 物品9) || FindItem(34010, out 物品9) || FindItem(34011, out 物品9) || FindItem(34012, out 物品9) || FindItem(34013, out 物品9) || FindItem(34014, out 物品9) || FindItem(34015, out 物品9) || FindItem(35001, out 物品9) || FindItem(35002, out 物品9) || FindItem(35003, out 物品9) || FindItem(35004, out 物品9) || FindItem(35005, out 物品9) || FindItem(35006, out 物品9) || FindItem(35007, out 物品9) || FindItem(35008, out 物品9) || FindItem(35009, out 物品9) || FindItem(35010, out 物品9) || FindItem(35011, out 物品9) || FindItem(35012, out 物品9) || FindItem(35013, out 物品9) || FindItem(35014, out 物品9) || FindItem(35015, out 物品9) || FindItem(36001, out 物品9) || FindItem(36002, out 物品9) || FindItem(36003, out 物品9) || FindItem(36004, out 物品9) || FindItem(36005, out 物品9) || FindItem(36006, out 物品9) || FindItem(36007, out 物品9) || FindItem(36008, out 物品9) || FindItem(36009, out 物品9) || FindItem(36010, out 物品9) || FindItem(36011, out 物品9) || FindItem(36012, out 物品9) || FindItem(36013, out 物品9) || FindItem(36014, out 物品9) || FindItem(36015, out 物品9))
                        {
                            GameItem.DataSheetByName.TryGetValue($"{物品9}", out value55);
                            if (value55.书页分解 > 0 && GameItem.DataSheetByName.TryGetValue(Config.书店商贩物品, out value56))
                            {
                                Character.Inventory[b36] = new ItemInfo(value56, Character, 1, b36, 1);
                                Character.Inventory[b36].Dura.V = value55.书页分解;
                                ConsumeItem(1, 物品9);
                                Character.Enqueue(new SyncItemPacket
                                {
                                    Description = Character.Inventory[b36].ToArray()
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 643500001;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                        }
                        break;
                    }
                case 700100000:
                    {
                        EquipmentInfo v5;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                Equipment.TryGetValue(13, out v5);
                                break;
                            case 2:
                                Equipment.TryGetValue(14, out v5);
                                break;
                            case 3:
                                Equipment.TryGetValue(2, out v5);
                                break;
                            case 4:
                                Equipment.TryGetValue(4, out v5);
                                break;
                            case 5:
                                Equipment.TryGetValue(5, out v5);
                                break;
                        }
                        if (v5 == null)
                        {
                            CurrentNPCDialoguePage = 700103000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        if (!FindItem(Config.雕爷使用物品, out var 物品8))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1835
                            });
                            break;
                        }
                        if (Gold < Config.雕爷使用金币)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1821
                            });
                            break;
                        }
                        Gold -= Config.雕爷使用金币;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        ConsumeItem(1, 物品8);
                        CurrentNPCDialoguePage = 700101000;
                        if (v5.FirstInscription != null)
                        {
                            玩家装卸铭文(v5.FirstInscription.SkillID, 0);
                        }
                        if (Job == GameObjectRace.Warrior)
                        {
                            v5.FirstInscription = InscriptionSkill.RandomRefinement(Job);
                            玩家装卸铭文(v5.FirstInscription.SkillID, v5.FirstInscription.ID);
                            NetworkManager.SendAnnouncement($"[{this}]成功洗出来【{v5}】[{v5.FirstInscription.SkillName.Split('-').Last()}]");
                            Enqueue(new SyncItemPacket
                            {
                                Description = v5.ToArray()
                            });
                            Enqueue(new 玩家普通洗练
                            {
                                铭文位一 = (v5.FirstInscription?.Index ?? 0)
                            });
                        }
                        if (Job == GameObjectRace.Wizard)
                        {
                            v5.FirstInscription = InscriptionSkill.RandomRefinement(Job);
                            玩家装卸铭文(v5.FirstInscription.SkillID, v5.FirstInscription.ID);
                            NetworkManager.SendAnnouncement($"[{this}]成功洗出来【{v5}】[{v5.FirstInscription.SkillName.Split('-').Last()}]");
                            Enqueue(new SyncItemPacket
                            {
                                Description = v5.ToArray()
                            });
                            Enqueue(new 玩家普通洗练
                            {
                                铭文位一 = (v5.FirstInscription?.Index ?? 0)
                            });
                        }
                        if (Job == GameObjectRace.Assassin)
                        {
                            v5.FirstInscription = InscriptionSkill.RandomRefinement(Job);
                            玩家装卸铭文(v5.FirstInscription.SkillID, v5.FirstInscription.ID);
                            NetworkManager.SendAnnouncement($"[{this}]成功洗出来【{v5}】[{v5.FirstInscription.SkillName.Split('-').Last()}]");
                            Enqueue(new SyncItemPacket
                            {
                                Description = v5.ToArray()
                            });
                            Enqueue(new 玩家普通洗练
                            {
                                铭文位一 = (v5.FirstInscription?.Index ?? 0)
                            });
                        }
                        if (Job == GameObjectRace.Archer)
                        {
                            v5.FirstInscription = InscriptionSkill.RandomRefinement(Job);
                            玩家装卸铭文(v5.FirstInscription.SkillID, v5.FirstInscription.ID);
                            NetworkManager.SendAnnouncement($"[{this}]成功洗出来【{v5}】[{v5.FirstInscription.SkillName.Split('-').Last()}]");
                            Enqueue(new SyncItemPacket
                            {
                                Description = v5.ToArray()
                            });
                            Enqueue(new 玩家普通洗练
                            {
                                铭文位一 = (v5.FirstInscription?.Index ?? 0)
                            });
                        }
                        if (Job == GameObjectRace.Taoist)
                        {
                            v5.FirstInscription = InscriptionSkill.RandomRefinement(Job);
                            玩家装卸铭文(v5.FirstInscription.SkillID, v5.FirstInscription.ID);
                            NetworkManager.SendAnnouncement($"[{this}]成功洗出来【{v5}】[{v5.FirstInscription.SkillName.Split('-').Last()}]");
                            Enqueue(new SyncItemPacket
                            {
                                Description = v5.ToArray()
                            });
                            Enqueue(new 玩家普通洗练
                            {
                                铭文位一 = (v5.FirstInscription?.Index ?? 0)
                            });
                        }
                        if (Job == GameObjectRace.DragonLance)
                        {
                            v5.FirstInscription = InscriptionSkill.RandomRefinement(Job);
                            玩家装卸铭文(v5.FirstInscription.SkillID, v5.FirstInscription.ID);
                            NetworkManager.SendAnnouncement($"[{this}]成功洗出来【{v5}】[{v5.FirstInscription.SkillName.Split('-').Last()}]");
                            Enqueue(new SyncItemPacket
                            {
                                Description = v5.ToArray()
                            });
                            Enqueue(new 玩家普通洗练
                            {
                                铭文位一 = (v5.FirstInscription?.Index ?? 0)
                            });
                        }
                        break;
                    }
                case 699900000:
                    {
                        int 物品编号2;
                        byte b4;
                        int num22;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                物品编号2 = Config.猎魔暗使材料一;
                                b4 = Config.猎魔暗使称号一;
                                num22 = Config.猎魔暗使数量一;
                                break;
                            case 2:
                                物品编号2 = Config.猎魔暗使材料二;
                                b4 = Config.猎魔暗使称号二;
                                num22 = Config.猎魔暗使数量二;
                                break;
                            case 3:
                                物品编号2 = Config.猎魔暗使材料三;
                                b4 = Config.猎魔暗使称号三;
                                num22 = Config.猎魔暗使数量三;
                                break;
                            case 4:
                                物品编号2 = Config.猎魔暗使材料四;
                                b4 = Config.猎魔暗使称号四;
                                num22 = Config.猎魔暗使数量四;
                                break;
                            case 5:
                                物品编号2 = Config.猎魔暗使材料五;
                                b4 = Config.猎魔暗使称号五;
                                num22 = Config.猎魔暗使数量五;
                                break;
                            case 6:
                                物品编号2 = Config.猎魔暗使材料六;
                                b4 = Config.猎魔暗使称号六;
                                num22 = Config.猎魔暗使数量六;
                                break;
                        }
                        List<ItemInfo> 物品列表14;
                        if (!FindItem(物品编号2, out var _))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1835
                            });
                        }
                        else if (FindItem(num22, 物品编号2, out 物品列表14))
                        {
                            ConsumeItem(num22, 物品列表14);
                            if (GameTitle.DataSheet.TryGetValue(b4, out var value32))
                            {
                                Character.Titles[b4] = SEngine.CurrentTime.AddMinutes(value32.Duration);
                                int 剩余时间 = 65920000;
                                Enqueue(new AddTitlePacket
                                {
                                    TitleID = b4,
                                    Duration = 剩余时间
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 699900001;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                        }
                        break;
                    }
                case 611400000:
                    if (选项编号 == 1)
                    {
                        int num69 = 223;
                        int 幽冥海副本价格 = Config.幽冥海副本价格;
                        int 幽冥海副本等级 = Config.幽冥海副本等级;
                        if (CurrentLevel < 幽冥海副本等级)
                        {
                            CurrentNPCDialoguePage = 611400001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{幽冥海副本等级}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Gold >= 幽冥海副本价格)
                        {
                            Gold -= 幽冥海副本价格;
                            Teleport((CurrentMap.MapID == num69) ? CurrentMap : MapManager.GetMap(num69), AreaType.Teleportation);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 611400002;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{幽冥海副本价格}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                    }
                    break;
                case 611300000:
                    {
                        int num45 = 0;
                        int num46 = 0;
                        int num47 = 147;
                        if (选项编号 == 1)
                        {
                            if (CurrentLevel < num45)
                            {
                                CurrentNPCDialoguePage = 711900001;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num45}><#P1:0>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (Gold >= num46)
                            {
                                Gold -= num46;
                                Teleport((CurrentMap.MapID == num47) ? CurrentMap : MapManager.GetMap(num47), AreaType.Resurrection);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 711900002;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num46}><#P1:0>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                        }
                        break;
                    }
                case 677100000:
                    if (选项编号 == 1)
                    {
                        CurrentNPCDialoguePage = 677100001;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                        });
                    }
                    break;
                case 677100001:
                    switch (选项编号)
                    {
                        case 1:
                            CurrentNPCDialoguePage = 677101000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"目前保底次数[{Character.铭文洗练次数1}]"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        case 2:
                            CurrentNPCDialoguePage = 677102000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"目前保底次数[{Character.铭文洗练次数2}]"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        case 3:
                            CurrentNPCDialoguePage = 677103000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"目前保底次数[{Character.铭文洗练次数3}]"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                    }
                    break;
                case 612600000:
                    switch (选项编号)
                    {
                        case 1:
                            if (!Equipment.TryGetValue(0, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 0;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 2:
                            CurrentNPCDialoguePage = 612601000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 3:
                            CurrentNPCDialoguePage = 612602000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                    }
                    break;
                case 612604000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        if (!Equipment.TryGetValue(重铸部位, out var v7))
                        {
                            CurrentNPCDialoguePage = 612603000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        int num56 = 500000;
                        int num57 = 1;
                        int 重铸所需灵气 = v7.重铸所需灵气;
                        if (Gold < 500000)
                        {
                            CurrentNPCDialoguePage = 612605000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:[{num57}] 个 [{GameItem.DataSheet[重铸所需灵气].Name}]><#P1:{num56 / 10000}>")
                            });
                            break;
                        }
                        if (!FindItem(num57, 重铸所需灵气, out var 物品列表25))
                        {
                            CurrentNPCDialoguePage = 612605000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:[{num57}] 个 [{GameItem.DataSheet[重铸所需灵气].Name}]><#P1:{num56 / 10000}>")
                            });
                            break;
                        }
                        Gold -= num56;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        ConsumeItem(num57, 物品列表25);
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        v7.RandomStats.SetValue(EquipmentStats.生成属性(v7.Type, 重铸装备: true));
                        if (Character.幸运项链保底.V >= Config.幸运洗练次数保底 && 重铸部位 == 8 && Config.CurrentVersion >= 1 && Config.幸运保底开关)
                        {
                            Character.幸运项链保底.V = 0;
                            v7.RandomStats.SetValue(EquipmentStats.生成属性1(v7.Type, 重铸装备: true));
                        }
                        Enqueue(new SyncItemPacket
                        {
                            Description = v7.ToArray()
                        });
                        BonusStats[v7] = v7.Stats;
                        RefreshStats();
                        CurrentNPCDialoguePage = 612606000;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, "<#P1:" + v7.StatDescription + ">")
                        });
                        if (重铸部位 == 8 && Config.CurrentVersion >= 1 && Config.幸运保底开关)
                        {
                            Character.幸运项链保底.V++;
                        }
                        break;
                    }
                case 612602000:
                    switch (选项编号)
                    {
                        case 1:
                            if (!Equipment.TryGetValue(9, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 9;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 2:
                            if (!Equipment.TryGetValue(10, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 10;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 3:
                            if (!Equipment.TryGetValue(11, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 11;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 4:
                            if (!Equipment.TryGetValue(12, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 12;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 5:
                            if (!Equipment.TryGetValue(8, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 8;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 6:
                            if (!Equipment.TryGetValue(14, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 14;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 7:
                            if (!Equipment.TryGetValue(13, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 13;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                    }
                    break;
                case 612601000:
                    switch (选项编号)
                    {
                        case 1:
                            if (!Equipment.TryGetValue(1, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 1;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 2:
                            if (!Equipment.TryGetValue(3, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 3;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 3:
                            if (!Equipment.TryGetValue(6, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 6;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 4:
                            if (!Equipment.TryGetValue(7, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 7;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 5:
                            if (!Equipment.TryGetValue(4, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 4;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 6:
                            if (!Equipment.TryGetValue(5, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 5;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                        case 7:
                            if (!Equipment.TryGetValue(2, out v4))
                            {
                                CurrentNPCDialoguePage = 612603000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 612604000;
                                重铸部位 = 2;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                                });
                            }
                            break;
                    }
                    break;
                case 619200000:
                    switch (选项编号)
                    {
                        default:
                            return;
                        case 1:
                            CurrentNPCDialoguePage = 619201000;
                            break;
                        case 2:
                            CurrentNPCDialoguePage = 619202000;
                            break;
                    }
                    Enqueue(new 同步交互结果
                    {
                        ObjectID = CurrentNPC.ObjectID,
                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                    });
                    break;
                case 612606000:
                    if (选项编号 == 1)
                    {
                        CurrentNPCDialoguePage = 612604000;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(装备穿戴部位)重铸部位}>")
                        });
                    }
                    break;
                case 619202500:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        EquipmentInfo v6 = null;
                        if (雕色部位 == 1)
                        {
                            Equipment.TryGetValue(3, out v6);
                        }
                        else if (雕色部位 == 2)
                        {
                            Equipment.TryGetValue(1, out v6);
                        }
                        else if (雕色部位 == 3)
                        {
                            Equipment.TryGetValue(7, out v6);
                        }
                        else if (雕色部位 == 4)
                        {
                            Equipment.TryGetValue(5, out v6);
                        }
                        else if (雕色部位 == 5)
                        {
                            Equipment.TryGetValue(6, out v6);
                        }
                        else if (雕色部位 == 6)
                        {
                            Equipment.TryGetValue(4, out v6);
                        }
                        else if (雕色部位 == 7)
                        {
                            Equipment.TryGetValue(2, out v6);
                        }
                        else
                        {
                            if (雕色部位 != 8)
                            {
                                break;
                            }
                            Equipment.TryGetValue(14, out v6);
                        }
                        if (v6 == null)
                        {
                            CurrentNPCDialoguePage = 619202100;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        if (v6.SlotColor.Count == 0)
                        {
                            CurrentNPCDialoguePage = 619202400;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        if (v6.镶嵌灵石.Count != 0)
                        {
                            CurrentNPCDialoguePage = 619202300;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        int num38 = 5;
                        int num39 = 100000;
                        if (Gold < 100000)
                        {
                            CurrentNPCDialoguePage = 619202200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num38}><#P1:0><#P1:{num39 / 10000}>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (!FindItem(num38, 91116, out var 物品列表18))
                        {
                            CurrentNPCDialoguePage = 619202200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num38}><#P1:0><#P1:{num39 / 10000}>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        Gold -= num39;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        ConsumeItem(num38, 物品列表18);
                        v6.SlotColor[SEngine.Random.Next(v6.SlotColor.Count)] = (EquipSlotColor)SEngine.Random.Next(1, 8);
                        Enqueue(new SyncItemPacket
                        {
                            Description = v6.ToArray()
                        });
                        if (v6.SlotColor.Count == 1)
                        {
                            CurrentNPCDialoguePage = 619202500;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{v6.SlotColor[0]}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (v6.SlotColor.Count == 2)
                        {
                            CurrentNPCDialoguePage = 619202600;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{v6.SlotColor[0]}><#P1:{v6.SlotColor[1]}>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 619202000:
                    {
                        EquipmentInfo v3 = null;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                Equipment.TryGetValue(3, out v3);
                                break;
                            case 2:
                                Equipment.TryGetValue(1, out v3);
                                break;
                            case 3:
                                Equipment.TryGetValue(7, out v3);
                                break;
                            case 4:
                                Equipment.TryGetValue(5, out v3);
                                break;
                            case 5:
                                Equipment.TryGetValue(6, out v3);
                                break;
                            case 6:
                                Equipment.TryGetValue(4, out v3);
                                break;
                            case 7:
                                Equipment.TryGetValue(2, out v3);
                                break;
                            case 8:
                                Equipment.TryGetValue(14, out v3);
                                break;
                        }
                        if (v3 == null)
                        {
                            CurrentNPCDialoguePage = 619202100;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        if (v3.SlotColor.Count == 0)
                        {
                            CurrentNPCDialoguePage = 619202400;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        if (v3.镶嵌灵石.Count != 0)
                        {
                            CurrentNPCDialoguePage = 619202300;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        雕色部位 = (byte)选项编号;
                        if (v3.SlotColor.Count == 1)
                        {
                            CurrentNPCDialoguePage = 619202500;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{v3.SlotColor[0]}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (v3.SlotColor.Count == 2)
                        {
                            CurrentNPCDialoguePage = 619202600;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{v3.SlotColor[0]}><#P1:{v3.SlotColor[1]}>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 619201000:
                    {
                        EquipmentInfo v = null;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                Equipment.TryGetValue(3, out v);
                                break;
                            case 2:
                                Equipment.TryGetValue(1, out v);
                                break;
                            case 3:
                                Equipment.TryGetValue(7, out v);
                                break;
                            case 4:
                                Equipment.TryGetValue(5, out v);
                                break;
                            case 5:
                                Equipment.TryGetValue(6, out v);
                                break;
                            case 6:
                                Equipment.TryGetValue(4, out v);
                                break;
                            case 7:
                                Equipment.TryGetValue(2, out v);
                                break;
                            case 8:
                                Equipment.TryGetValue(14, out v);
                                break;
                        }
                        if (v == null)
                        {
                            CurrentNPCDialoguePage = 619201100;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        if (v.SlotColor.Count >= 2)
                        {
                            CurrentNPCDialoguePage = 619201300;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        int num13 = ((v.SlotColor.Count == 0) ? 5 : 50);
                        if (!FindItem(num13, 91115, out var 物品列表10))
                        {
                            CurrentNPCDialoguePage = 619201200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num13}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else
                        {
                            ConsumeItem(num13, 物品列表10);
                            v.SlotColor.Add(EquipSlotColor.Yellow);
                            Enqueue(new SyncItemPacket
                            {
                                Description = v.ToArray()
                            });
                        }
                        break;
                    }
                case 619400000:
                    switch (选项编号)
                    {
                        case 1:
                            CurrentNPCDialoguePage = 619401000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 2:
                            CurrentNPCDialoguePage = 619402000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 3:
                            CurrentNPCDialoguePage = 619403000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 4:
                            CurrentNPCDialoguePage = 619404000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 5:
                            CurrentNPCDialoguePage = 619405000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 6:
                            CurrentNPCDialoguePage = 619406000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 7:
                            CurrentNPCDialoguePage = 619407000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        case 8:
                            CurrentNPCDialoguePage = 619408000;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                    }
                    break;
                case 619202600:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        EquipmentInfo v2 = null;
                        if (雕色部位 == 1)
                        {
                            Equipment.TryGetValue(3, out v2);
                        }
                        else if (雕色部位 == 2)
                        {
                            Equipment.TryGetValue(1, out v2);
                        }
                        else if (雕色部位 == 3)
                        {
                            Equipment.TryGetValue(7, out v2);
                        }
                        else if (雕色部位 == 4)
                        {
                            Equipment.TryGetValue(5, out v2);
                        }
                        else if (雕色部位 == 5)
                        {
                            Equipment.TryGetValue(6, out v2);
                        }
                        else if (雕色部位 == 6)
                        {
                            Equipment.TryGetValue(4, out v2);
                        }
                        else if (雕色部位 == 7)
                        {
                            Equipment.TryGetValue(2, out v2);
                        }
                        else
                        {
                            if (雕色部位 != 8)
                            {
                                break;
                            }
                            Equipment.TryGetValue(14, out v2);
                        }
                        if (v2 == null)
                        {
                            CurrentNPCDialoguePage = 619202100;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        if (v2.SlotColor.Count == 0)
                        {
                            CurrentNPCDialoguePage = 619202400;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        if (v2.镶嵌灵石.Count != 0)
                        {
                            CurrentNPCDialoguePage = 619202300;
                            Enqueue(new 同步交互结果
                            {
                                ObjectID = CurrentNPC.ObjectID,
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                            });
                            break;
                        }
                        int num20 = 5;
                        int num21 = 100000;
                        if (Gold < 100000)
                        {
                            CurrentNPCDialoguePage = 619202200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num20}><#P1:{num21 / 10000}>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (!FindItem(num20, 91116, out var 物品列表13))
                        {
                            CurrentNPCDialoguePage = 619202200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num20}><#P1:{num21 / 10000}>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        Gold -= num21;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        ConsumeItem(num20, 物品列表13);
                        v2.SlotColor[SEngine.Random.Next(v2.SlotColor.Count)] = (EquipSlotColor)SEngine.Random.Next(1, 8);
                        Enqueue(new SyncItemPacket
                        {
                            Description = v2.ToArray()
                        });
                        if (v2.SlotColor.Count == 1)
                        {
                            CurrentNPCDialoguePage = 619202500;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{v2.SlotColor[0]}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (v2.SlotColor.Count == 2)
                        {
                            CurrentNPCDialoguePage = 619202600;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{v2.SlotColor[0]}><#P1:{v2.SlotColor[1]}>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 619403000:
                    {
                        int num97 = 10;
                        int num98;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num98 = 10110;
                                break;
                            case 2:
                                num98 = 10111;
                                break;
                        }
                        if (RemainingInventorySpace <= 0)
                        {
                            CurrentNPCDialoguePage = 619400200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (FindItem(num97, num98, out var 物品列表30))
                        {
                            byte b39 = 0;
                            while (b39 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b39))
                                {
                                    b39 = (byte)(b39 + 1);
                                    continue;
                                }
                                ConsumeItem(num97, 物品列表30);
                                Inventory[b39] = new ItemInfo(GameItem.DataSheet[num98 + 1], Character, 1, b39, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b39].ToArray()
                                });
                                Enqueue(new 成功合成灵石
                                {
                                    灵石状态 = 1
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 619400100;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num97}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 619402000:
                    {
                        int num59 = 10;
                        int num60;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num60 = 10320;
                                break;
                            case 2:
                                num60 = 10321;
                                break;
                        }
                        if (RemainingInventorySpace <= 0)
                        {
                            CurrentNPCDialoguePage = 619400200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (FindItem(num59, num60, out var 物品列表26))
                        {
                            byte b34 = 0;
                            while (b34 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b34))
                                {
                                    b34 = (byte)(b34 + 1);
                                    continue;
                                }
                                ConsumeItem(num59, 物品列表26);
                                Inventory[b34] = new ItemInfo(GameItem.DataSheet[num60 + 1], Character, 1, b34, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b34].ToArray()
                                });
                                Enqueue(new 成功合成灵石
                                {
                                    灵石状态 = 1
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 619400100;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num59}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 619401000:
                    {
                        int num36 = 10;
                        int num37;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num37 = 10420;
                                break;
                            case 2:
                                num37 = 10421;
                                break;
                        }
                        if (RemainingInventorySpace <= 0)
                        {
                            CurrentNPCDialoguePage = 619400200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (FindItem(num36, num37, out var 物品列表17))
                        {
                            byte b13 = 0;
                            while (b13 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b13))
                                {
                                    b13 = (byte)(b13 + 1);
                                    continue;
                                }
                                ConsumeItem(num36, 物品列表17);
                                Inventory[b13] = new ItemInfo(GameItem.DataSheet[num37 + 1], Character, 1, b13, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b13].ToArray()
                                });
                                Enqueue(new 成功合成灵石
                                {
                                    灵石状态 = 1
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 619400100;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num36}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 619405000:
                    {
                        int num26 = 10;
                        int num27;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num27 = 10720;
                                break;
                            case 2:
                                num27 = 10721;
                                break;
                        }
                        if (RemainingInventorySpace <= 0)
                        {
                            CurrentNPCDialoguePage = 619400200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (FindItem(num26, num27, out var 物品列表15))
                        {
                            byte b5 = 0;
                            while (b5 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b5))
                                {
                                    b5 = (byte)(b5 + 1);
                                    continue;
                                }
                                ConsumeItem(num26, 物品列表15);
                                Inventory[b5] = new ItemInfo(GameItem.DataSheet[num27 + 1], Character, 1, b5, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b5].ToArray()
                                });
                                Enqueue(new 成功合成灵石
                                {
                                    灵石状态 = 1
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 619400100;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num26}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 619404000:
                    {
                        int num28 = 10;
                        int num29;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num29 = 10620;
                                break;
                            case 2:
                                num29 = 10621;
                                break;
                        }
                        if (RemainingInventorySpace <= 0)
                        {
                            CurrentNPCDialoguePage = 619400200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (FindItem(num28, num29, out var 物品列表16))
                        {
                            byte b6 = 0;
                            while (b6 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b6))
                                {
                                    b6 = (byte)(b6 + 1);
                                    continue;
                                }
                                ConsumeItem(num28, 物品列表16);
                                Inventory[b6] = new ItemInfo(GameItem.DataSheet[num29 + 1], Character, 1, b6, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b6].ToArray()
                                });
                                Enqueue(new 成功合成灵石
                                {
                                    灵石状态 = 1
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 619400100;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num28}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 619408000:
                    {
                        int num11 = 10;
                        int num12;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num12 = 10520;
                                break;
                            case 2:
                                num12 = 10521;
                                break;
                        }
                        if (RemainingInventorySpace <= 0)
                        {
                            CurrentNPCDialoguePage = 619400200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (FindItem(num11, num12, out var 物品列表9))
                        {
                            byte b = 0;
                            while (b < InventorySize)
                            {
                                if (Inventory.ContainsKey(b))
                                {
                                    b = (byte)(b + 1);
                                    continue;
                                }
                                ConsumeItem(num11, 物品列表9);
                                Inventory[b] = new ItemInfo(GameItem.DataSheet[num12 + 1], Character, 1, b, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                                Enqueue(new 成功合成灵石
                                {
                                    灵石状态 = 1
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 619400100;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num11}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 619407000:
                    {
                        int num67 = 10;
                        int num68;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num68 = 10220;
                                break;
                            case 2:
                                num68 = 10221;
                                break;
                        }
                        if (RemainingInventorySpace <= 0)
                        {
                            CurrentNPCDialoguePage = 619400200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (FindItem(num67, num68, out var 物品列表28))
                        {
                            byte b38 = 0;
                            while (b38 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b38))
                                {
                                    b38 = (byte)(b38 + 1);
                                    continue;
                                }
                                ConsumeItem(num67, 物品列表28);
                                Inventory[b38] = new ItemInfo(GameItem.DataSheet[num68 + 1], Character, 1, b38, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b38].ToArray()
                                });
                                Enqueue(new 成功合成灵石
                                {
                                    灵石状态 = 1
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 619400100;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num67}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 619406000:
                    {
                        int num61 = 10;
                        int num62;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num62 = 10120;
                                break;
                            case 2:
                                num62 = 10121;
                                break;
                        }
                        if (RemainingInventorySpace <= 0)
                        {
                            CurrentNPCDialoguePage = 619400200;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (FindItem(num61, num62, out var 物品列表27))
                        {
                            byte b35 = 0;
                            while (b35 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b35))
                                {
                                    b35 = (byte)(b35 + 1);
                                    continue;
                                }
                                ConsumeItem(num61, 物品列表27);
                                Inventory[b35] = new ItemInfo(GameItem.DataSheet[num62 + 1], Character, 1, b35, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b35].ToArray()
                                });
                                Enqueue(new 成功合成灵石
                                {
                                    灵石状态 = 1
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 619400100;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num61}><#P1:0>"),
                            ObjectID = CurrentNPC.ObjectID
                        });
                        break;
                    }
                case 625200000:
                    if (选项编号 == 1)
                    {
                        if (Character.屠魔令回收数量.V >= Config.屠魔令回收数量)
                        {
                            CurrentNPCDialoguePage = 625200001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Character.屠魔令回收数量.V}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        if (FindItem(1, 91127, out var 物品列表22) && Character.屠魔令回收数量.V <= Config.屠魔令回收数量)
                        {
                            ConsumeItem(1, 物品列表22);
                            GainExperience(null, Math.Max(Config.屠魔令回收经验, Config.屠魔令回收经验));
                            Character.屠魔令回收数量.V++;
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 625201000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                    }
                    break;
                case 624200000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int 扣除金币 = 100000;
                        int 需要等级 = Config.屠魔殿等级限制;
                        MapObject value3;
                        if (Team == null)
                        {
                            CurrentNPCDialoguePage = 624201000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Character != Team.Captain)
                        {
                            CurrentNPCDialoguePage = 624202000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Team.Members.Count < Config.屠魔组队人数)
                        {
                            CurrentNPCDialoguePage = 624207000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Config.屠魔组队人数}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Team.Members.FirstOrDefault((CharacterInfo O) => O.Gold < 扣除金币) != null)
                        {
                            CurrentNPCDialoguePage = 624204000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{扣除金币 / 10000}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Team.Members.FirstOrDefault((CharacterInfo O) => O.Connection == null || !MapManager.Objects.TryGetValue(O.ID, out value3) || !CurrentNPC.Neighbors.Contains(value3)) != null)
                        {
                            CurrentNPCDialoguePage = 624203000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Team.Members.FirstOrDefault((CharacterInfo O) => O.屠魔次数.V >= Config.屠魔副本次数) != null)
                        {
                            CurrentNPCDialoguePage = 624209000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Config.屠魔副本次数}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Team.Members.FirstOrDefault((CharacterInfo O) => O.屠魔大厅.V.Date == SEngine.CurrentTime.Date) != null)
                        {
                            CurrentNPCDialoguePage = 624205000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Team.Members.FirstOrDefault((CharacterInfo O) => O.Level.V < 需要等级) != null)
                        {
                            CurrentNPCDialoguePage = 624206000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{需要等级}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Team.Members.FirstOrDefault((CharacterInfo O) => MapManager.ActiveObjects[O.ID].Dead) != null)
                        {
                            CurrentNPCDialoguePage = 624208000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else
                        {
                            if (!MapManager.Maps.TryGetValue(1281, out var value115))
                            {
                                break;
                            }
                            Map map = new Map(GameMap.DataSheet[80]);
                            map.Terrain = value115.Terrain;
                            map.Areas = value115.Areas;
                            map.Spawns = value115.Spawns;
                            map.Guards = value115.Guards;
                            map.TeleportationArea = value115.TeleportationArea;
                            map.ProcessTime = SEngine.CurrentTime.AddSeconds(20.0);
                            map.Respawns = value115.Spawns.OrderBy((MonsterSpawn O) => O.Coordinates.X).ToList();
                            map.Cells = new HashSet<MapObject>[value115.MapSize.Width, value115.MapSize.Height];
                            
                            MapManager.ReplicaMaps.Add(map);
                            map.ReplicaGuards = new GuardObject(GuardInfo.DataSheet[6724], map, GameDirection.DownLeft, new Point(1005, 273));
                            {
                                foreach (CharacterInfo item4 in Team.Members)
                                {
                                    PlayerObject 玩家实例2 = MapManager.ActiveObjects[item4.ID] as PlayerObject;
                                    玩家实例2.CurrentTrade?.BreakTrade();
                                    玩家实例2.Gold -= 扣除金币;
                                    玩家实例2.Teleport(map, AreaType.Teleportation);
                                    玩家实例2.Character.屠魔次数.V++;
                                    Enqueue(new 同步货币数量
                                    {
                                        Description = 全部货币描述()
                                    });
                                }
                                break;
                            }
                        }
                        break;
                    }
                case 635800000:
                    if (选项编号 == 1)
                    {
                        Teleport((CurrentMap.MapID == 147) ? CurrentMap : MapManager.GetMap(147), AreaType.Resurrection);
                    }
                    break;
                case 635000000:
                    {
                        int num52 = 40;
                        int num53 = 100000;
                        int num54 = 87;
                        if (选项编号 == 1)
                        {
                            if (CurrentLevel < num52)
                            {
                                CurrentNPCDialoguePage = 711900001;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num52}><#P1:0>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                            else if (Gold >= num53)
                            {
                                Gold -= num53;
                                Teleport((CurrentMap.MapID == num54) ? CurrentMap : MapManager.GetMap(num54), AreaType.Teleportation);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 711900002;
                                Enqueue(new 同步交互结果
                                {
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num53}><#P1:0>"),
                                    ObjectID = CurrentNPC.ObjectID
                                });
                            }
                        }
                        break;
                    }
                case 627400000:
                    if (选项编号 != 1)
                    {
                        break;
                    }
                    if (Guild != null && SystemInfo.Info.OccupyGuild.V == Guild)
                    {
                        if (Character.攻沙日期.V != SystemInfo.Info.SabakOccupyTime.V)
                        {
                            CurrentNPCDialoguePage = 627403000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (!(Character.领奖日期.V.Date == SEngine.CurrentTime.Date))
                        {
                            if (Config.沙巴克称号领取开关 == 1)
                            {
                                if (Config.CurrentVersion >= 2 && Guild != null && Guild == SystemInfo.Info.OccupyGuild.V && Guild.Members[Character] == GuildRank.President)
                                {
                                    AddTitle(Config.沙巴克城主称号);
                                }
                                else if (Config.CurrentVersion >= 2 && Guild != null && SystemInfo.Info.OccupyGuild.V == Guild)
                                {
                                    AddTitle(Config.沙巴克成员称号);
                                }
                            }
                            byte b2 = byte.MaxValue;
                            byte b3 = 0;
                            while (b3 < InventorySize)
                            {
                                if (Inventory.ContainsKey(b3))
                                {
                                    b3 = (byte)(b3 + 1);
                                    continue;
                                }
                                b2 = b3;
                                if (b2 == byte.MaxValue)
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 6459
                                    });
                                    return;
                                }
                                if (!GameItem.DataSheetByName.TryGetValue("沙城每日宝箱", out var value31))
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 1802
                                    });
                                    return;
                                }
                                Character.领奖日期.V = SEngine.CurrentTime;
                                Inventory[b2] = new ItemInfo(value31, Character, 1, b2, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b2].ToArray()
                                });
                                return;
                            }
                        }
                        CurrentNPCDialoguePage = 627402000;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                            ObjectID = CurrentNPC.ObjectID
                        });
                    }
                    else
                    {
                        CurrentNPCDialoguePage = 627401000;
                        Enqueue(new 同步交互结果
                        {
                            Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                            ObjectID = CurrentNPC.ObjectID
                        });
                    }
                    break;
                case 674001000:
                    if (选项编号 == 1)
                    {
                        ItemInfo 物品;
                        if (Guild == null)
                        {
                            Enqueue(new SocialErrorPacket
                            {
                                ErrorCode = 6668
                            });
                        }
                        else if (Character != Guild.President.V)
                        {
                            Enqueue(new SocialErrorPacket
                            {
                                ErrorCode = 8961
                            });
                        }
                        else if (Guild == SystemInfo.Info.OccupyGuild.V)
                        {
                            Enqueue(new SocialErrorPacket
                            {
                                ErrorCode = 8965
                            });
                        }
                        else if (SystemInfo.Info.申请行会.Values.FirstOrDefault((GuildInfo O) => O == Guild) != null)
                        {
                            Enqueue(new SocialErrorPacket
                            {
                                ErrorCode = 8964
                            });
                        }
                        else if (Gold < 1000000)
                        {
                            Enqueue(new SocialErrorPacket
                            {
                                ErrorCode = 8962
                            });
                        }
                        else if (FindItem(90196, out 物品))
                        {
                            Gold -= 1000000;
                            ConsumeItem(1, 物品);
                            SystemInfo.Info.申请行会.Add(SEngine.CurrentTime, Character.Guild.V);
                            NetworkManager.SendAnnouncement($"战报{SEngine.CurrentTime},[{Guild}]行会已经报名参加今日的沙巴克争夺战", rolling: true);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else
                        {
                            Enqueue(new SocialErrorPacket
                            {
                                ErrorCode = 8963
                            });
                        }
                    }
                    break;
                case 636100000:
                    if (选项编号 == 1)
                    {
                        int num58 = 87;
                        int 未知暗点副本价格 = Config.未知暗点副本价格;
                        int 未知暗点副本等级 = Config.未知暗点副本等级;
                        if (CurrentLevel < 未知暗点副本等级)
                        {
                            CurrentNPCDialoguePage = 636100001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{未知暗点副本等级}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Gold >= 未知暗点副本价格)
                        {
                            Gold -= 未知暗点副本价格;
                            Teleport((CurrentMap.MapID == num58) ? CurrentMap : MapManager.GetMap(num58), AreaType.Teleportation);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 636100002;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{未知暗点副本价格}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                    }
                    break;
                case 635900000:
                    if (选项编号 == 1)
                    {
                        int num44 = 88;
                        int 未知暗点二层价格 = Config.未知暗点二层价格;
                        int 未知暗点二层等级 = Config.未知暗点二层等级;
                        if (CurrentLevel < 未知暗点二层等级)
                        {
                            CurrentNPCDialoguePage = 635900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{未知暗点二层等级}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Gold >= 未知暗点二层价格)
                        {
                            Gold -= 未知暗点二层价格;
                            Teleport((CurrentMap.MapID == num44) ? CurrentMap : MapManager.GetMap(num44), AreaType.Teleportation);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 635900002;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{未知暗点二层价格}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                    }
                    break;
                case 674000000:
                    switch (选项编号)
                    {
                        case 1:
                            CurrentNPCDialoguePage = 674001000;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        case 2:
                            Enqueue(new 查看攻城名单
                            {
                                字节描述 = SystemInfo.Info.沙城申请描述()
                            });
                            break;
                    }
                    break;
                case 670508000:
                    if (Character.升级装备.V == null)
                    {
                        Connection?.Disconnect(new Exception("错误操作: 继续Npcc对话.  错误: 尝试取回武器."));
                        break;
                    }
                    switch (选项编号)
                    {
                        case 1:
                            {
                                if (RemainingInventorySpace <= 0)
                                {
                                    CurrentNPCDialoguePage = 670505000;
                                    Enqueue(new 同步交互结果
                                    {
                                        ObjectID = CurrentNPC.ObjectID,
                                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                    });
                                    break;
                                }
                                int num49 = (Character.升级装备.V.UpgradeCount.V + 1) * 100 * 10000;
                                if (Gold < num49)
                                {
                                    CurrentNPCDialoguePage = 670510000;
                                    Enqueue(new 同步交互结果
                                    {
                                        ObjectID = CurrentNPC.ObjectID,
                                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                    });
                                    break;
                                }
                                int num50 = (Character.升级装备.V.UpgradeCount.V + 1) * 10;
                                if (FindItem(num50, 110012, out var 物品列表23))
                                {
                                    byte b32 = byte.MaxValue;
                                    byte b33 = 0;
                                    while (b33 < InventorySize)
                                    {
                                        if (Inventory.ContainsKey(b33))
                                        {
                                            b33 = (byte)(b33 + 1);
                                            continue;
                                        }
                                        b32 = b33;
                                        if (b32 == byte.MaxValue)
                                        {
                                            CurrentNPCDialoguePage = 670505000;
                                            Enqueue(new 同步交互结果
                                            {
                                                ObjectID = CurrentNPC.ObjectID,
                                                Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                            });
                                            return;
                                        }
                                        Gold -= num49;
                                        Enqueue(new 同步货币数量
                                        {
                                            Description = 全部货币描述()
                                        });
                                        ConsumeItem(num50, 物品列表23);
                                        Inventory[b32] = Character.升级装备.V;
                                        Character.升级装备.V = null;
                                        Inventory[b32].Grid.V = 1;
                                        Inventory[b32].Location.V = b32;
                                        Enqueue(new SyncItemPacket
                                        {
                                            Description = Inventory[b32].ToArray()
                                        });
                                        Enqueue(new 武器升级结果
                                        {
                                            升级结果 = 2
                                        });
                                        Enqueue(new 武器升级结果
                                        {
                                            升级结果 = 2
                                        });
                                        return;
                                    }
                                }
                                CurrentNPCDialoguePage = 670509000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                                break;
                            }
                        case 3:
                            放弃升级武器();
                            break;
                    }
                    break;
                case 670500000:
                    switch (选项编号)
                    {
                        case 1:
                            if (Character.升级装备.V != null)
                            {
                                CurrentNPCDialoguePage = 670501000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentStoreNameID = "UpgradeCurEquippedWepn";
                                CurrentNPCDialoguePage = 670502000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            break;
                        case 2:
                            if (Character.升级装备.V == null)
                            {
                                CurrentNPCDialoguePage = 670503000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else if (SEngine.CurrentTime < Character.取回时间.V)
                            {
                                CurrentNPCDialoguePage = 670504000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{(int)(Character.取回时间.V - SEngine.CurrentTime).TotalMinutes + Config.武器强化取回时间}><#P1:0>")
                                });
                            }
                            else if (RemainingInventorySpace <= 0)
                            {
                                CurrentNPCDialoguePage = 670505000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else if (玩家取回装备(0))
                            {
                                CurrentNPCDialoguePage = 670507000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                CurrentNPCDialoguePage = 670508000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Character.升级装备.V.UpgradeCount.V * 10 + 10}><#P1:{Character.升级装备.V.UpgradeCount.V * 100 + 100}>")
                                });
                            }
                            break;
                        case 3:
                            if (Character.升级装备.V == null)
                            {
                                CurrentNPCDialoguePage = 670503000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else if (Gold < Config.武器强化消耗货币值 && Config.武器强化消耗货币开关 == 0)
                            {
                                CurrentNPCDialoguePage = 670506000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else if (Ingot < Config.武器强化消耗货币值 && Config.武器强化消耗货币开关 == 1)
                            {
                                CurrentNPCDialoguePage = 670506000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else if (RemainingInventorySpace <= 0)
                            {
                                CurrentNPCDialoguePage = 670505000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else if (玩家取回装备(Config.武器强化消耗货币值))
                            {
                                CurrentNPCDialoguePage = 670507000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                                });
                            }
                            else
                            {
                                Character.取回时间.V = SEngine.CurrentTime;
                                CurrentNPCDialoguePage = 670508000;
                                Enqueue(new 同步交互结果
                                {
                                    ObjectID = CurrentNPC.ObjectID,
                                    Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Character.升级装备.V.UpgradeCount.V * 10 + 10}><#P1:{Character.升级装备.V.UpgradeCount.V * 100 + 100}>")
                                });
                            }
                            break;
                    }
                    break;
                case 691900000:
                    switch (选项编号)
                    {
                        default:
                            return;
                        case 1:
                            CurrentNPCDialoguePage = 691901000;
                            break;
                        case 2:
                            CurrentNPCDialoguePage = 691902000;
                            break;
                        case 3:
                            CurrentNPCDialoguePage = 691903000;
                            break;
                        case 4:
                            CurrentNPCDialoguePage = 691904000;
                            break;
                    }
                    Enqueue(new 同步交互结果
                    {
                        ObjectID = CurrentNPC.ObjectID,
                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                    });
                    break;
                case 691901000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int num19 = 152;
                        int 沙城快捷货币一 = Config.沙城快捷货币一;
                        int 沙城快捷等级一 = Config.沙城快捷等级一;
                        if (CurrentLevel < 沙城快捷等级一)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙城快捷等级一}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Config.沙城传送货币开关 == 0)
                        {
                            if (Gold >= 沙城快捷货币一)
                            {
                                Gold -= 沙城快捷货币一;
                                Teleport((CurrentMap.MapID == num19) ? CurrentMap : MapManager.GetMap(num19), AreaType.攻沙快捷);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else if (Config.沙城传送货币开关 == 1)
                        {
                            if (Ingot >= 沙城快捷货币一)
                            {
                                Ingot -= 沙城快捷货币一;
                                Teleport((CurrentMap.MapID == num19) ? CurrentMap : MapManager.GetMap(num19), AreaType.攻沙快捷);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 691900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙城快捷货币一}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 691902000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int num99 = 152;
                        int 沙城快捷货币二 = Config.沙城快捷货币二;
                        int 沙城快捷等级二 = Config.沙城快捷等级二;
                        if (CurrentLevel < 沙城快捷等级二)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙城快捷等级二}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Config.沙城传送货币开关 == 0)
                        {
                            if (Gold >= 沙城快捷货币二)
                            {
                                Gold -= 沙城快捷货币二;
                                Teleport((CurrentMap.MapID == num99) ? CurrentMap : MapManager.GetMap(num99), AreaType.传送区域沙左);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else if (Config.沙城传送货币开关 == 1)
                        {
                            if (Ingot >= 沙城快捷货币二)
                            {
                                Ingot -= 沙城快捷货币二;
                                Teleport((CurrentMap.MapID == num99) ? CurrentMap : MapManager.GetMap(num99), AreaType.传送区域沙左);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 691900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙城快捷货币二}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 691903000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int num51 = 152;
                        int 沙城快捷货币三 = Config.沙城快捷货币三;
                        int 沙城快捷等级三 = Config.沙城快捷等级三;
                        if (CurrentLevel < 沙城快捷等级三)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙城快捷等级三}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Config.沙城传送货币开关 == 0)
                        {
                            if (Gold >= 沙城快捷货币三)
                            {
                                Gold -= 沙城快捷货币三;
                                Teleport((CurrentMap.MapID == num51) ? CurrentMap : MapManager.GetMap(num51), AreaType.传送区域沙右);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else if (Config.沙城传送货币开关 == 1)
                        {
                            if (Ingot >= 沙城快捷货币三)
                            {
                                Ingot -= 沙城快捷货币三;
                                Teleport((CurrentMap.MapID == num51) ? CurrentMap : MapManager.GetMap(num51), AreaType.传送区域沙右);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 691900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙城快捷货币三}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 691904000:
                    {
                        if (选项编号 != 1)
                        {
                            break;
                        }
                        int num32 = 152;
                        int 沙城快捷货币四 = Config.沙城快捷货币四;
                        int 沙城快捷等级四 = Config.沙城快捷等级四;
                        if (CurrentLevel < 沙城快捷等级四)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙城快捷等级四}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Config.沙城传送货币开关 == 0)
                        {
                            if (Gold >= 沙城快捷货币四)
                            {
                                Gold -= 沙城快捷货币四;
                                Teleport((CurrentMap.MapID == num32) ? CurrentMap : MapManager.GetMap(num32), AreaType.传送区域皇宫);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else if (Config.沙城传送货币开关 == 1)
                        {
                            if (Ingot >= 沙城快捷货币四)
                            {
                                Ingot -= 沙城快捷货币四;
                                Teleport((CurrentMap.MapID == num32) ? CurrentMap : MapManager.GetMap(num32), AreaType.传送区域皇宫);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 691900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{沙城快捷货币四}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 711900000:
                    switch (选项编号)
                    {
                        default:
                            return;
                        case 1:
                            CurrentNPCDialoguePage = 711901000;
                            break;
                        case 2:
                            CurrentNPCDialoguePage = 711902000;
                            break;
                        case 3:
                            CurrentNPCDialoguePage = 711903000;
                            break;
                        case 4:
                            CurrentNPCDialoguePage = 711904000;
                            break;
                        case 5:
                            CurrentNPCDialoguePage = 711905000;
                            break;
                        case 6:
                            CurrentNPCDialoguePage = 711906000;
                            break;
                    }
                    Enqueue(new 同步交互结果
                    {
                        ObjectID = CurrentNPC.ObjectID,
                        Description = NpcDialog.GetBufferFromDialogID(CurrentNPCDialoguePage)
                    });
                    break;
                case 711906000:
                    if (Config.CurrentVersion < 3 || 选项编号 != 1)
                    {
                        break;
                    }
                    if (Ingot < Config.秘宝广场元宝)
                    {
                        CurrentNPCDialoguePage = 711900003;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Config.秘宝广场元宝 / 10}>")
                        });
                    }
                    if (SEngine.CurrentTime.Hour == Config.WorldBossTimeHour && Ingot >= Config.秘宝广场元宝)
                    {
                        Ingot -= Config.秘宝广场元宝;
                        Teleport((CurrentMap.MapID == 74) ? CurrentMap : MapManager.GetMap(74), AreaType.Teleportation);
                    }
                    if (SEngine.CurrentTime.Hour + 1 == Config.WorldBossTimeHour)
                    {
                        if (Ingot >= Config.秘宝广场元宝)
                        {
                            Ingot -= Config.秘宝广场元宝;
                            Teleport((CurrentMap.MapID == 74) ? CurrentMap : MapManager.GetMap(74), AreaType.Teleportation);
                        }
                    }
                    else
                    {
                        CurrentNPCDialoguePage = 711900004;
                        Enqueue(new 同步交互结果
                        {
                            ObjectID = CurrentNPC.ObjectID,
                            Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{Config.WorldBossTimeHour}>")
                        });
                    }
                    break;
                case 711905000:
                    {
                        int num63;
                        int num64;
                        int num65;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num63 = Config.快捷传送一等级2;
                                num64 = Config.快捷传送一货币2;
                                num65 = Config.快捷传送一编号2;
                                break;
                            case 2:
                                num63 = Config.快捷传送二等级2;
                                num64 = Config.快捷传送二货币2;
                                num65 = Config.快捷传送二编号2;
                                break;
                            case 3:
                                num63 = Config.快捷传送三等级2;
                                num64 = Config.快捷传送三货币2;
                                num65 = Config.快捷传送三编号2;
                                break;
                            case 4:
                                num63 = Config.快捷传送四等级2;
                                num64 = Config.快捷传送四货币2;
                                num65 = Config.快捷传送四编号2;
                                break;
                            case 5:
                                num63 = Config.快捷传送五等级2;
                                num64 = Config.快捷传送五货币2;
                                num65 = Config.快捷传送五编号2;
                                break;
                            case 6:
                                num63 = Config.快捷传送六等级2;
                                num64 = Config.快捷传送六货币2;
                                num65 = Config.快捷传送六编号2;
                                break;
                        }
                        if (CurrentLevel < num63)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num63}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Config.元宝金币传送设定2 == 0)
                        {
                            if (Gold >= num64)
                            {
                                Gold -= num64;
                                Teleport((CurrentMap.MapID == num65) ? CurrentMap : MapManager.GetMap(num65), AreaType.Teleportation);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else if (Config.元宝金币传送设定2 == 1)
                        {
                            if (Ingot >= num64)
                            {
                                Ingot -= num64;
                                Teleport((CurrentMap.MapID == num65) ? CurrentMap : MapManager.GetMap(num65), AreaType.Teleportation);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 711900002;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num64}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 711904000:
                    {
                        int num41;
                        int num42;
                        int num43;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num41 = Config.快捷传送一等级;
                                num42 = Config.快捷传送一货币;
                                num43 = Config.快捷传送一编号;
                                break;
                            case 2:
                                num41 = Config.快捷传送二等级;
                                num42 = Config.快捷传送二货币;
                                num43 = Config.快捷传送二编号;
                                break;
                            case 3:
                                num41 = Config.快捷传送三等级;
                                num42 = Config.快捷传送三货币;
                                num43 = Config.快捷传送三编号;
                                break;
                            case 4:
                                num41 = Config.快捷传送四等级;
                                num42 = Config.快捷传送四货币;
                                num43 = Config.快捷传送四编号;
                                break;
                            case 5:
                                num41 = Config.快捷传送五等级;
                                num42 = Config.快捷传送五货币;
                                num43 = Config.快捷传送五编号;
                                break;
                        }
                        if (CurrentLevel < num41)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num41}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Config.元宝金币传送设定 == 0)
                        {
                            if (Gold >= num42)
                            {
                                Gold -= num42;
                                Teleport((CurrentMap.MapID == num43) ? CurrentMap : MapManager.GetMap(num43), AreaType.Teleportation);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else if (Config.元宝金币传送设定 == 1)
                        {
                            if (Ingot >= num42)
                            {
                                Ingot -= num42;
                                Teleport((CurrentMap.MapID == num43) ? CurrentMap : MapManager.GetMap(num43), AreaType.Teleportation);
                                Enqueue(new 同步货币数量
                                {
                                    Description = 全部货币描述()
                                });
                            }
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 711900002;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num42}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 711903000:
                    {
                        int num33;
                        int num34;
                        int num35;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num33 = 15;
                                num34 = 2500;
                                num35 = 144;
                                break;
                            case 2:
                                num33 = 20;
                                num34 = 3500;
                                num35 = 148;
                                break;
                            case 3:
                                num33 = 25;
                                num34 = 3500;
                                num35 = 178;
                                break;
                            case 4:
                                num33 = 25;
                                num34 = 4500;
                                num35 = 146;
                                break;
                            case 5:
                                num33 = 30;
                                num34 = 5500;
                                num35 = 175;
                                break;
                            case 6:
                                num33 = 45;
                                num34 = 7500;
                                num35 = 59;
                                break;
                        }
                        if (CurrentLevel < num33)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num33}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Gold >= num34)
                        {
                            Gold -= num34;
                            Teleport((CurrentMap.MapID == num35) ? CurrentMap : MapManager.GetMap(num35), AreaType.Teleportation);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 711900002;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num34}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 711902000:
                    {
                        int num23;
                        int num24;
                        int num25;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num23 = 1;
                                num24 = 2500;
                                num25 = 145;
                                break;
                            case 2:
                                num23 = 40;
                                num24 = 6500;
                                num25 = 187;
                                break;
                            case 3:
                                num23 = 40;
                                num24 = 9500;
                                num25 = 191;
                                break;
                        }
                        if (CurrentLevel < num23)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num23}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        else if (Gold >= num24)
                        {
                            Gold -= num24;
                            Teleport((CurrentMap.MapID == num25) ? CurrentMap : MapManager.GetMap(num25), AreaType.Teleportation);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else
                        {
                            CurrentNPCDialoguePage = 711900002;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num24}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                        }
                        break;
                    }
                case 711901000:
                    {
                        int num;
                        int num2;
                        int num3;
                        switch (选项编号)
                        {
                            default:
                                return;
                            case 1:
                                num = 1;
                                num2 = 1000;
                                num3 = 142;
                                break;
                            case 2:
                                num = 8;
                                num2 = 1500;
                                num3 = 143;
                                break;
                            case 3:
                                num = 14;
                                num2 = 2000;
                                num3 = 147;
                                break;
                            case 4:
                                num = 30;
                                num2 = 3000;
                                num3 = 152;
                                break;
                            case 5:
                                num = 40;
                                num2 = 5000;
                                num3 = 102;
                                break;
                            case 6:
                                num = 45;
                                num2 = 8000;
                                num3 = 50;
                                break;
                            case 7:
                                num = 40;
                                num2 = 10000;
                                num3 = 231;
                                break;
                        }
                        if (CurrentLevel < num)
                        {
                            CurrentNPCDialoguePage = 711900001;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        if (Gold < num2)
                        {
                            CurrentNPCDialoguePage = 711900002;
                            Enqueue(new 同步交互结果
                            {
                                Description = NpcDialog.ConcatData(CurrentNPCDialoguePage, $"<#P0:{num2}><#P1:0>"),
                                ObjectID = CurrentNPC.ObjectID
                            });
                            break;
                        }
                        Gold -= num2;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        if (num3 == 152)
                        {
                            if (Guild != null && Guild == SystemInfo.Info.OccupyGuild.V)
                            {
                                Teleport((CurrentMap.MapID == num3) ? CurrentMap : MapManager.GetMap(num3), AreaType.Teleportation);
                            }
                            else
                            {
                                Teleport((CurrentMap.MapID == num3) ? CurrentMap : MapManager.GetMap(num3), AreaType.Resurrection);
                            }
                        }
                        else
                        {
                            Teleport((CurrentMap.MapID == num3) ? CurrentMap : MapManager.GetMap(num3), AreaType.Resurrection);
                        }
                        break;
                    }
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 3333
            });
        }
    }

    public void ChangeSettings(byte[] settings)
    {
        using var ms = new MemoryStream(settings);
        using var reader = new BinaryReader(ms);
        var count = settings.Length / 5;
        for (var i = 0; i < count; i++)
        {
            byte index = reader.ReadByte();
            uint value = reader.ReadUInt32();
            Character.PlayerSettings[index] = value;
        }
    }

    public void 查询地图路线()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        binaryWriter.Write((ushort)CurrentMap.LimitInstances);
        binaryWriter.Write(CurrentMap.MapID);
        for (int i = 1; i <= CurrentMap.LimitInstances; i++)
        {
            binaryWriter.Write(16777216 + i);
            binaryWriter.Write(MapManager.Maps[CurrentMap.MapID * 16 + i].MapStatus);
        }
        Enqueue(new 查询线路信息
        {
            Description = memoryStream.ToArray()
        });
    }

    public void 切换地图路线()
    {
    }

    public void 玩家同步位置()
    {
    }

    public void 玩家扩展背包(byte 背包类型, byte 扩展大小)
    {
        if (扩展大小 == 0)
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家扩展背包.  错误: 扩展参数错误."));
            return;
        }
        if (背包类型 == 1 && InventorySize + 扩展大小 > 64)
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家扩展背包.  错误: 背包超出限制."));
            return;
        }
        if (背包类型 == 2 && WarehouseSize + 扩展大小 > 144)
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家扩展背包.  错误: 仓库超出限制."));
            return;
        }
        if (背包类型 == 7 && 资源背包大小 + 扩展大小 > 216)
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家扩展资源背包.  错误: 资源背包超出限制."));
            return;
        }
        switch (背包类型)
        {
            case 7:
                if (Config.资源包开关 == 1)
                {
                    int num5 = 10000;
                    int num6 = 扩展大小 * num5;
                    if (Gold < num6)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1821
                        });
                        break;
                    }
                    Gold -= num6;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    资源背包大小 += 扩展大小;
                    Enqueue(new 背包容量改变
                    {
                        Grid = 7,
                        Capacity = 资源背包大小
                    });
                }
                break;
            case 2:
                {
                    int num3 = Compute.扩展仓库(WarehouseSize - 16);
                    int num4 = Compute.扩展仓库(WarehouseSize + 扩展大小 - 16) - num3;
                    if (Gold < num4)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1821
                        });
                        break;
                    }
                    Gold -= num4;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    WarehouseSize += 扩展大小;
                    Enqueue(new 背包容量改变
                    {
                        Grid = 2,
                        Capacity = WarehouseSize
                    });
                    break;
                }
            case 1:
                {
                    int num = Compute.扩展背包(InventorySize - 32);
                    int num2 = Compute.扩展背包(InventorySize + 扩展大小 - 32) - num;
                    if (Gold < num2)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1821
                        });
                        break;
                    }
                    Gold -= num2;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    InventorySize += 扩展大小;
                    Enqueue(new 背包容量改变
                    {
                        Grid = 1,
                        Capacity = InventorySize
                    });
                    break;
                }
        }
    }

    public void 商店特修单件(byte 背包类型, byte 装备位置)
    {
        Connection?.Disconnect(new Exception("错误操作: 特修单件装备.  错误: 功能已经屏蔽."));
    }

    public void 商店修理单件(byte 背包类型, byte 装备位置)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        if (CurrentNPC == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 商店修理单件.  错误: 没有选中Npc."));
        }
        else if (CurrentStoreID == 0)
        {
            Connection?.Disconnect(new Exception("错误操作: 商店修理单件.  错误: 没有打开商店."));
        }
        else if (CurrentMap == CurrentNPC.CurrentMap && GetDistance(CurrentNPC) <= 12)
        {
            switch (背包类型)
            {
                case 1:
                    {
                        if (!Inventory.TryGetValue(装备位置, out var v2))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1802
                            });
                            break;
                        }
                        if (!(v2 is EquipmentInfo 装备数据))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1814
                            });
                            break;
                        }
                        if (!装备数据.CanRepair)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1814
                            });
                            break;
                        }
                        if (Gold < 装备数据.RepairCost)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1821
                            });
                            break;
                        }
                        Gold -= 装备数据.RepairCost;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        装备数据.MaxDura.V = Math.Max(1000, 装备数据.MaxDura.V - 334);
                        装备数据.Dura.V = 装备数据.MaxDura.V;
                        Enqueue(new SyncItemPacket
                        {
                            Description = 装备数据.ToArray()
                        });
                        break;
                    }
                case 0:
                    {
                        if (!Equipment.TryGetValue(装备位置, out var v))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1802
                            });
                            break;
                        }
                        if (!v.CanRepair)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1814
                            });
                            break;
                        }
                        if (Gold < v.RepairCost)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1821
                            });
                            break;
                        }
                        Gold -= v.RepairCost;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        v.MaxDura.V = Math.Max(1000, v.MaxDura.V - (int)((float)(v.MaxDura.V - v.Dura.V) * 0.035f));
                        if (v.Dura.V <= 0)
                        {
                            BonusStats[v] = v.Stats;
                            RefreshStats();
                        }
                        v.Dura.V = v.MaxDura.V;
                        Enqueue(new SyncItemPacket
                        {
                            Description = v.ToArray()
                        });
                        Enqueue(new 修理物品应答());
                        break;
                    }
            }
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 商店修理单件.  错误: 人物距离太远."));
        }
    }

    public void 商店修理全部()
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        if (CurrentNPC == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 商店修理单件.  错误: 没有选中Npc."));
        }
        else if (CurrentStoreID == 0)
        {
            Connection?.Disconnect(new Exception("错误操作: 商店修理单件.  错误: 没有打开商店."));
        }
        else if (CurrentMap == CurrentNPC.CurrentMap && GetDistance(CurrentNPC) <= 12)
        {
            if (Gold < Equipment.Values.Sum((EquipmentInfo O) => O.CanRepair ? O.RepairCost : 0))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1821
                });
                return;
            }
            foreach (EquipmentInfo value in Equipment.Values)
            {
                if (value.CanRepair)
                {
                    Gold -= value.RepairCost;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    value.MaxDura.V = Math.Max(1000, value.MaxDura.V - (int)((float)(value.MaxDura.V - value.Dura.V) * 0.035f));
                    if (value.Dura.V <= 0)
                    {
                        BonusStats[value] = value.Stats;
                        RefreshStats();
                    }
                    value.Dura.V = value.MaxDura.V;
                    Enqueue(new SyncItemPacket
                    {
                        Description = value.ToArray()
                    });
                }
            }
            Enqueue(new 修理物品应答());
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 商店修理单件.  错误: 人物距离太远."));
        }
    }

    public void 随身修理单件(byte 背包类型, byte 装备位置, int 物品编号)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        if (物品编号 != 0)
        {
            Connection?.Disconnect(new Exception("错误操作: 商店修理单件.  错误: 禁止使用物品."));
            return;
        }
        switch (背包类型)
        {
            case 1:
                {
                    if (!Inventory.TryGetValue(装备位置, out var v2))
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1802
                        });
                        break;
                    }
                    if (!(v2 is EquipmentInfo 装备数据))
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1814
                        });
                        break;
                    }
                    if (!装备数据.CanRepair)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1814
                        });
                        break;
                    }
                    if (Gold < 装备数据.SpecialRepairCost)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1821
                        });
                        break;
                    }
                    Gold -= 装备数据.SpecialRepairCost;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    if (装备数据.Dura.V <= 0)
                    {
                        BonusStats[装备数据] = 装备数据.Stats;
                        RefreshStats();
                    }
                    装备数据.Dura.V = 装备数据.MaxDura.V;
                    Enqueue(new SyncItemPacket
                    {
                        Description = 装备数据.ToArray()
                    });
                    Enqueue(new 修理物品应答());
                    break;
                }
            case 0:
                {
                    if (!Equipment.TryGetValue(装备位置, out var v))
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1802
                        });
                        break;
                    }
                    if (!v.CanRepair)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1814
                        });
                        break;
                    }
                    if (Gold < v.SpecialRepairCost)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1821
                        });
                        break;
                    }
                    Gold -= v.SpecialRepairCost;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    v.Dura.V = v.MaxDura.V;
                    Enqueue(new SyncItemPacket
                    {
                        Description = v.ToArray()
                    });
                    break;
                }
        }
    }

    public void 随身修理全部()
    {
        if (Dead || StallState > 0 || TradeState >= 3)
            return;

        if (Gold < Equipment.Values.Sum((EquipmentInfo O) => O.CanRepair ? O.SpecialRepairCost : 0))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1821
            });
            return;
        }
        foreach (EquipmentInfo value in Equipment.Values)
        {
            if (value.CanRepair)
            {
                Gold -= value.SpecialRepairCost;
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
                if (value.Dura.V <= 0)
                {
                    BonusStats[value] = value.Stats;
                    RefreshStats();
                }
                value.Dura.V = value.MaxDura.V;
                Enqueue(new SyncItemPacket
                {
                    Description = value.ToArray()
                });
            }
        }
        Enqueue(new 修理物品应答());
    }

    public void RequestStoreInfo(int version)
    {
        if (version != 0 && version == GameStore.StoreChecksum)
        {
            Enqueue(new 同步商店数据
            {
                版本编号 = GameStore.StoreChecksum,
                商品数量 = 0,
                文件内容 = new byte[0]
            });
        }
        else
        {
            Enqueue(new 同步商店数据
            {
                版本编号 = GameStore.StoreChecksum,
                商品数量 = GameStore.StoreCount,
                文件内容 = GameStore.StoreMemory
            });
        }
    }

    public void 查询珍宝商店(int 数据版本)
    {
        if (数据版本 != 0 && 数据版本 == RareTreasureItem.Checksum)
        {
            Enqueue(new 同步珍宝数据
            {
                版本编号 = RareTreasureItem.Checksum,
                商品数量 = 0,
                商店数据 = new byte[0]
            });
        }
        else
        {
            Enqueue(new 同步珍宝数据
            {
                版本编号 = RareTreasureItem.Checksum,
                商品数量 = RareTreasureItem.TreasureCount,
                商店数据 = RareTreasureItem.Buffer
            });
        }
    }

    public void 查询出售信息()
    {
    }

    public void 购买珍宝商品(int 物品编号, int 购入数量)
    {
        if (!RareTreasureItem.DataSheet.TryGetValue(物品编号, out var value) || !GameItem.DataSheet.TryGetValue(物品编号, out var value2))
        {
            return;
        }
        int num = ((购入数量 == 1 || value2.PersistType != PersistentItemType.Stack) ? 1 : Math.Min(购入数量, value2.MaxDura));
        int num2 = value.CurrentPrice * num;
        int num3 = -1;
        byte b = 0;
        while (b < InventorySize)
        {
            if (Inventory.TryGetValue(b, out var v) && (value2.PersistType != PersistentItemType.Stack || value2.ID != v.ID || v.Dura.V + 购入数量 > value2.MaxDura))
            {
                b = (byte)(b + 1);
                continue;
            }
            num3 = b;
            break;
        }
        if (num < 1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1793
            });
            return;
        }
        if (num3 == -1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1793
            });
            return;
        }
        if (Ingot < num2)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 8451
            });
            return;
        }
        Ingot -= num2;
        Enqueue(new SyncIngotsPacket
        {
            Amount = Ingot
        });
        if (物品编号 <= 1501000 || 物品编号 >= 1501005)
        {
            Character.消耗元宝.V += num2;
        }
        if (Inventory.TryGetValue((byte)num3, out var v2))
        {
            v2.Dura.V += num;
            Enqueue(new SyncItemPacket
            {
                Description = v2.ToArray()
            });
        }
        else
        {
            if (value2 is EquipmentItem 模板)
            {
                Inventory[(byte)num3] = new EquipmentInfo(模板, Character, 1, (byte)num3);
            }
            else
            {
                int 持久 = 0;
                switch (value2.PersistType)
                {
                    case PersistentItemType.Stack:
                        持久 = num;
                        break;
                    case PersistentItemType.容器:
                        持久 = 0;
                        break;
                    case PersistentItemType.消耗:
                    case PersistentItemType.纯度:
                        持久 = value2.MaxDura;
                        break;
                }
                Inventory[(byte)num3] = new ItemInfo(value2, Character, 1, (byte)num3, 持久);
            }
            Enqueue(new SyncItemPacket
            {
                Description = Inventory[(byte)num3].ToArray()
            });
        }
        if (Config.CurrentVersion >= 1 && Config.珍宝阁提示开关 == 1)
        {
            SEngine.AddSystemLog($"[{Name}][{CurrentLevel}级] 购买了 [{value2.Name}] * {num}, 消耗元宝[{num2}]");
        }
        if (Config.CurrentVersion == 0)
        {
            SEngine.AddSystemLog($"[{Name}][{CurrentLevel}级] 购买了 [{value2.Name}] * {num}, 消耗元宝[{num2}]");
        }
    }

    public void 购买每周特惠(int 礼包编号)
    {
        switch (礼包编号)
        {
            case 1:
                if (Ingot < Config.每周特惠礼包一元宝)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 2561
                    });
                }
                else if (Compute.日期同周(Character.补给日期.V, SEngine.CurrentTime))
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 8466
                    });
                }
                else if (RemainingInventorySpace <= 0)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 1793
                    });
                }
                else
                {
                    if (!GameItem.DataSheet.TryGetValue(Config.每周特惠一物品3, out var value) || !GameItem.DataSheet.TryGetValue(Config.每周特惠一物品4, out var value2) || !GameItem.DataSheet.TryGetValue(Config.每周特惠一物品5, out var value3))
                    {
                        break;
                    }
                    byte b = byte.MaxValue;
                    byte b2 = byte.MaxValue;
                    byte b3 = byte.MaxValue;
                    for (byte b4 = 0; b4 < InventorySize; b4 = (byte)(b4 + 1))
                    {
                        if (!Inventory.ContainsKey(b4))
                        {
                            if (b == byte.MaxValue)
                            {
                                b = b4;
                            }
                            else if (b2 == byte.MaxValue)
                            {
                                b2 = b4;
                            }
                            else
                            {
                                b3 = b4;
                            }
                            if (b3 != byte.MaxValue)
                            {
                                break;
                            }
                        }
                    }
                    if (b3 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                        break;
                    }
                    Ingot -= Config.每周特惠礼包一元宝;
                    Gold += Config.每周特惠一物品1;
                    ExperienceRate += Config.每周特惠一物品2;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    Character.消耗元宝.V += Config.每周特惠礼包一元宝;
                    Inventory[b] = new ItemInfo(value, Character, 1, b, 1);
                    Enqueue(new SyncItemPacket
                    {
                        Description = Inventory[b].ToArray()
                    });
                    Inventory[b2] = new ItemInfo(value2, Character, 1, b2, 1);
                    Enqueue(new SyncItemPacket
                    {
                        Description = Inventory[b2].ToArray()
                    });
                    Inventory[b3] = new ItemInfo(value3, Character, 1, b3, 1);
                    Enqueue(new SyncItemPacket
                    {
                        Description = Inventory[b3].ToArray()
                    });
                    Character.补给日期.V = SEngine.CurrentTime;
                    Enqueue(new 同步补充变量
                    {
                        变量类型 = 1,
                        ObjectID = ObjectID,
                        变量索引 = 112,
                        变量内容 = Compute.TimeSeconds(SEngine.CurrentTime)
                    });
                    SEngine.AddSystemLog($"[{Name}][{CurrentLevel}级] 购买了 [每周补给礼包], 消耗元宝[{Config.每周特惠礼包一元宝 / 100}]");
                }
                break;
            case 2:
                if (Ingot < Config.每周特惠礼包二元宝)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 2561
                    });
                }
                else if (Compute.日期同周(Character.战备日期.V, SEngine.CurrentTime))
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 8466
                    });
                }
                else
                {
                    if (!GameItem.DataSheet.TryGetValue(Config.每周特惠二物品3, out var value4) || !GameItem.DataSheet.TryGetValue(Config.每周特惠二物品4, out var value5) || !GameItem.DataSheet.TryGetValue(Config.每周特惠二物品5, out var value6))
                    {
                        break;
                    }
                    if (Character.战备日期.V == default(DateTime))
                    {
                        byte b5 = byte.MaxValue;
                        byte b6 = byte.MaxValue;
                        byte b7 = byte.MaxValue;
                        for (byte b8 = 0; b8 < InventorySize; b8 = (byte)(b8 + 1))
                        {
                            if (!Inventory.ContainsKey(b8))
                            {
                                if (b5 == byte.MaxValue)
                                {
                                    b5 = b8;
                                }
                                else if (b6 == byte.MaxValue)
                                {
                                    b6 = b8;
                                }
                                else
                                {
                                    b7 = b8;
                                }
                                if (b7 != byte.MaxValue)
                                {
                                    break;
                                }
                            }
                        }
                        if (b7 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        Ingot -= Config.每周特惠礼包二元宝;
                        Gold += Config.每周特惠二物品1;
                        ExperienceRate += Config.每周特惠二物品2;
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        Character.消耗元宝.V += Config.每周特惠礼包二元宝;
                        Inventory[b5] = new ItemInfo(value4, Character, 1, b5, 1);
                        Enqueue(new SyncItemPacket
                        {
                            Description = Inventory[b5].ToArray()
                        });
                        Inventory[b6] = new ItemInfo(value5, Character, 1, b6, 1);
                        Enqueue(new SyncItemPacket
                        {
                            Description = Inventory[b6].ToArray()
                        });
                        Inventory[b7] = new ItemInfo(value6, Character, 1, b7, 1);
                        Enqueue(new SyncItemPacket
                        {
                            Description = Inventory[b7].ToArray()
                        });
                        Character.战备日期.V = SEngine.CurrentTime;
                        Enqueue(new 同步补充变量
                        {
                            变量类型 = 1,
                            ObjectID = ObjectID,
                            变量索引 = 975,
                            变量内容 = Compute.TimeSeconds(SEngine.CurrentTime)
                        });
                        SEngine.AddSystemLog($"[{Name}][{CurrentLevel}级] 购买了 [每周战备礼包], 消耗元宝[{Config.每周特惠礼包二元宝 / 100}]");
                        break;
                    }
                    byte b9 = byte.MaxValue;
                    byte b10 = byte.MaxValue;
                    byte b11 = byte.MaxValue;
                    for (byte b12 = 0; b12 < InventorySize; b12 = (byte)(b12 + 1))
                    {
                        if (!Inventory.ContainsKey(b12))
                        {
                            if (b9 == byte.MaxValue)
                            {
                                b9 = b12;
                            }
                            else if (b10 == byte.MaxValue)
                            {
                                b10 = b12;
                            }
                            else
                            {
                                b11 = b12;
                            }
                            if (b11 != byte.MaxValue)
                            {
                                break;
                            }
                        }
                    }
                    if (b11 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                        break;
                    }
                    Ingot -= Config.每周特惠礼包二元宝;
                    Gold += Config.每周特惠二物品1;
                    ExperienceRate += Config.每周特惠二物品2;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    Character.消耗元宝.V += Config.每周特惠礼包二元宝;
                    Inventory[b9] = new ItemInfo(value4, Character, 1, b9, 1);
                    Enqueue(new SyncItemPacket
                    {
                        Description = Inventory[b9].ToArray()
                    });
                    Inventory[b10] = new ItemInfo(value5, Character, 1, b10, 1);
                    Enqueue(new SyncItemPacket
                    {
                        Description = Inventory[b10].ToArray()
                    });
                    Inventory[b11] = new ItemInfo(value6, Character, 1, b11, 1);
                    Enqueue(new SyncItemPacket
                    {
                        Description = Inventory[b11].ToArray()
                    });
                    Character.战备日期.V = SEngine.CurrentTime;
                    Enqueue(new 同步补充变量
                    {
                        变量类型 = 1,
                        ObjectID = ObjectID,
                        变量索引 = 975,
                        变量内容 = Compute.TimeSeconds(SEngine.CurrentTime)
                    });
                    SEngine.AddSystemLog($"[{Name}][{CurrentLevel}级] 购买了 [每周战备礼包], 消耗元宝[{Config.每周特惠礼包二元宝 / 100}]");
                }
                break;
            default:
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 8467
                });
                break;
        }
    }

    public void 购买玛法特权(byte 特权类型, byte 购买数量)
    {
        if (Config.CurrentVersion >= 3)
        {
            int num;
            switch (特权类型)
            {
                default:
                    return;
                case 3:
                    num = Config.特权玛法名俊元宝;
                    break;
                case 4:
                    num = Config.特权玛法豪杰元宝;
                    break;
                case 5:
                    num = Config.特权玛法战将元宝;
                    break;
            }
            if (Ingot < num)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 8451
                });
                return;
            }
            Ingot -= num;
            Character.消耗元宝.V += num;
            if (CurrentDegree != 0)
            {
                剩余特权[特权类型] += 30;
            }
            else
            {
                ChangeDegree(特权类型);
            }
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 65548,
                Param1 = 特权类型
            });
            Enqueue(new 同步特权信息
            {
                字节数组 = 玛法特权描述()
            });
            switch (特权类型)
            {
                case 3:
                    SEngine.AddSystemLog("[" + Name + "] 购买了 [玛法名俊], 消耗元宝[12800]");
                    break;
                case 4:
                    SEngine.AddSystemLog("[" + Name + "] 购买了 [玛法豪杰], 消耗元宝[28800]");
                    break;
                case 5:
                    SEngine.AddSystemLog("[" + Name + "] 购买了 [玛法战将], 消耗元宝[28800]");
                    break;
            }
        }
        if (Config.CurrentVersion > 2)
        {
            return;
        }
        int num2;
        switch (特权类型)
        {
            default:
                return;
            case 3:
                num2 = 12800;
                break;
            case 4:
            case 5:
                num2 = 28800;
                break;
        }
        if (Ingot < num2)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 8451
            });
            return;
        }
        Ingot -= num2;
        Character.消耗元宝.V += num2;
        if (CurrentDegree != 0)
        {
            剩余特权[特权类型] += 30;
        }
        else
        {
            ChangeDegree(特权类型);
        }
        Enqueue(new GameErrorMessagePacket
        {
            ErrorCode = 65548,
            Param1 = 特权类型
        });
        Enqueue(new 同步特权信息
        {
            字节数组 = 玛法特权描述()
        });
        switch (特权类型)
        {
            case 3:
                SEngine.AddSystemLog("[" + Name + "] 购买了 [玛法名俊], 消耗元宝[12800]");
                break;
            case 4:
                SEngine.AddSystemLog("[" + Name + "] 购买了 [玛法豪杰], 消耗元宝[28800]");
                break;
            case 5:
                SEngine.AddSystemLog("[" + Name + "] 购买了 [玛法战将], 消耗元宝[28800]");
                break;
        }
    }

    public void 预定玛法特权(byte 特权类型)
    {
        if (剩余特权[特权类型] <= 0)
        {
            return;
        }
        if (CurrentDegree == 0)
        {
            ChangeDegree(特权类型);
            if ((剩余特权[特权类型] -= 30) <= 0)
            {
                预定特权 = 0;
            }
        }
        else
        {
            预定特权 = 特权类型;
        }
        Enqueue(new GameErrorMessagePacket
        {
            ErrorCode = 65550,
            Param1 = 预定特权
        });
        Enqueue(new 同步特权信息
        {
            字节数组 = 玛法特权描述()
        });
    }

    public void 领取特权礼包(byte 特权类型, byte 礼包位置)
    {
        if (礼包位置 >= 28)
        {
            Connection?.Disconnect(new Exception("错误操作: 领取特权礼包  错误: 礼包位置错误"));
            return;
        }
        switch (特权类型)
        {
            case 1:
                if (CurrentDegree != 3 && CurrentDegree != 4)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 65556
                    });
                    break;
                }
                if ((SEngine.CurrentTime.Date.AddDays(1.0) - 本期日期.Date).TotalDays < (double)(int)礼包位置)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 65547
                    });
                    break;
                }
                if ((本期记录 & (1 << (int)礼包位置)) == 0)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 65546
                    });
                    break;
                }
                switch ((int)礼包位置 % 7)
                {
                    case 0:
                        本期记录 &= (uint)(~(1 << (int)礼包位置));
                        Enqueue(new 同步特权信息
                        {
                            字节数组 = 玛法特权描述()
                        });
                        Gold += ((CurrentDegree == 3) ? 50000 : 100000);
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        break;
                    case 1:
                        {
                            byte b7 = FindEmptyInventoryIndex();
                            GameItem value4;
                            if (b7 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue((CurrentDegree == 3) ? "名俊铭文石礼包" : "豪杰铭文石礼包", out value4))
                            {
                                本期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b7] = new ItemInfo(value4, Character, 1, b7, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b7].ToArray()
                                });
                            }
                            break;
                        }
                    case 2:
                        {
                            byte b11 = FindEmptyInventoryIndex();
                            GameItem value6;
                            if (b11 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue("随机传送石", out value6))
                            {
                                本期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b11] = new ItemInfo(value6, Character, 1, b11, 50);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b11].ToArray()
                                });
                            }
                            break;
                        }
                    case 3:
                        {
                            byte b3 = FindEmptyInventoryIndex();
                            GameItem value2;
                            if (b3 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue((CurrentDegree == 3) ? "名俊灵石宝盒" : "豪杰灵石宝盒", out value2))
                            {
                                本期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b3] = new ItemInfo(value2, Character, 1, b3, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b3].ToArray()
                                });
                            }
                            break;
                        }
                    case 4:
                        {
                            byte b9 = FindEmptyInventoryIndex();
                            GameItem value5;
                            if (b9 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue("雕色石", out value5))
                            {
                                本期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b9] = new ItemInfo(value5, Character, 1, b9, (CurrentDegree == 3) ? 1 : 2);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b9].ToArray()
                                });
                            }
                            break;
                        }
                    case 5:
                        {
                            byte b5 = FindEmptyInventoryIndex();
                            GameItem value3;
                            if (b5 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue("修复油", out value3))
                            {
                                本期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b5] = new ItemInfo(value3, Character, 1, b5, (CurrentDegree == 3) ? 1 : 2);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b5].ToArray()
                                });
                            }
                            break;
                        }
                    case 6:
                        {
                            byte b = FindEmptyInventoryIndex();
                            GameItem value;
                            if (b == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue("祝福油", out value))
                            {
                                本期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b] = new ItemInfo(value, Character, 1, b, (CurrentDegree == 3) ? 2 : 4);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            break;
                        }
                }
                break;
            case 2:
                if (PreviousDegree != 3 && PreviousDegree != 4)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 65556
                    });
                    break;
                }
                if ((上期记录 & (1 << (int)礼包位置)) == 0)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 65546
                    });
                    break;
                }
                switch ((int)礼包位置 % 7)
                {
                    case 0:
                        上期记录 &= (uint)(~(1 << (int)礼包位置));
                        Enqueue(new 同步特权信息
                        {
                            字节数组 = 玛法特权描述()
                        });
                        Gold += ((PreviousDegree == 3) ? 50000 : 100000);
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                        break;
                    case 1:
                        {
                            byte b19 = FindEmptyInventoryIndex();
                            GameItem value10;
                            if (b19 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue((PreviousDegree == 3) ? "名俊铭文石礼包" : "豪杰铭文石礼包", out value10))
                            {
                                上期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b19] = new ItemInfo(value10, Character, 1, b19, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b19].ToArray()
                                });
                            }
                            break;
                        }
                    case 2:
                        {
                            byte b23 = FindEmptyInventoryIndex();
                            GameItem value12;
                            if (b23 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue("随机传送石", out value12))
                            {
                                上期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b23] = new ItemInfo(value12, Character, 1, b23, 50);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b23].ToArray()
                                });
                            }
                            break;
                        }
                    case 3:
                        {
                            byte b15 = FindEmptyInventoryIndex();
                            GameItem value8;
                            if (b15 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue((PreviousDegree == 3) ? "名俊灵石宝盒" : "豪杰灵石宝盒", out value8))
                            {
                                上期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b15] = new ItemInfo(value8, Character, 1, b15, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b15].ToArray()
                                });
                            }
                            break;
                        }
                    case 4:
                        {
                            byte b21 = FindEmptyInventoryIndex();
                            GameItem value11;
                            if (b21 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue("雕色石", out value11))
                            {
                                上期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b21] = new ItemInfo(value11, Character, 1, b21, (PreviousDegree == 3) ? 1 : 2);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b21].ToArray()
                                });
                            }
                            break;
                        }
                    case 5:
                        {
                            byte b17 = FindEmptyInventoryIndex();
                            GameItem value9;
                            if (b17 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue("修复油", out value9))
                            {
                                上期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b17] = new ItemInfo(value9, Character, 1, b17, (PreviousDegree == 3) ? 1 : 2);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b17].ToArray()
                                });
                            }
                            break;
                        }
                    case 6:
                        {
                            byte b13 = FindEmptyInventoryIndex();
                            GameItem value7;
                            if (b13 == byte.MaxValue)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 6459
                                });
                            }
                            else if (GameItem.DataSheetByName.TryGetValue("祝福油", out value7))
                            {
                                上期记录 &= (uint)(~(1 << (int)礼包位置));
                                Enqueue(new 同步特权信息
                                {
                                    字节数组 = 玛法特权描述()
                                });
                                Inventory[b13] = new ItemInfo(value7, Character, 1, b13, (PreviousDegree == 3) ? 2 : 4);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b13].ToArray()
                                });
                            }
                            break;
                        }
                }
                break;
            default:
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 65556
                });
                break;
        }
    }

    public void ChangeTitle(byte id)
    {
        GameTitle value2;
        if (Config.称号叠加开关 == 0)
        {
            if (!Titles.ContainsKey(id))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5377
                });
                return;
            }
            if (!GameTitle.DataSheet.TryGetValue(id, out var value))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5378
                });
                return;
            }
            if (CurrentTitle == id)
            {
                Enqueue(new SyncCurrentTitlePacket
                {
                    ObjectID = ObjectID,
                    TitleID = id
                });
                return;
            }
            if (CurrentTitle != 0)
            {
                CombatPowerBonus.Remove(CurrentTitle);
                BonusStats.Remove(CurrentTitle);
            }
            CurrentTitle = id;
            CombatPowerBonus[id] = value.CombatPower;
            UpdateCombatPower();
            BonusStats[id] = value.Stats;
            RefreshStats();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1500,
                Param1 = id
            });
            SendPacket(new SyncCurrentTitlePacket
            {
                ObjectID = ObjectID,
                TitleID = id
            });
        }
        else if (!Titles.ContainsKey(id))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5377
            });
        }
        else if (!GameTitle.DataSheet.TryGetValue(id, out value2))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5378
            });
        }
        else if (CurrentTitle == id)
        {
            Enqueue(new SyncCurrentTitlePacket
            {
                ObjectID = ObjectID,
                TitleID = id
            });
        }
        else
        {
            CurrentTitle = id;
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1500,
                Param1 = id
            });
            SendPacket(new SyncCurrentTitlePacket
            {
                ObjectID = ObjectID,
                TitleID = id
            });
        }
    }

    public void RemoveCurrentTitle()
    {
        if (Config.称号叠加开关 == 0)
        {
            if (CurrentTitle != 0)
            {
                if (CombatPowerBonus.Remove(CurrentTitle))
                {
                    UpdateCombatPower();
                }
                if (BonusStats.Remove(CurrentTitle))
                {
                    RefreshStats();
                }
            }
        }
        
        if (CurrentTitle != 0)
        {
            CurrentTitle = 0;
            SendPacket(new SyncCurrentTitlePacket
            {
                ObjectID = ObjectID
            });
        }
    }

    public void 玩家整理背包(byte grid)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        if (grid == 1)
        {
            List<ItemInfo> list = Inventory.Values.ToList();
            list.Sort((ItemInfo a, ItemInfo b) => b.ID.CompareTo(a.ID));
            for (byte b2 = 0; b2 < list.Count; b2 = (byte)(b2 + 1))
            {
                if (list[b2].CanStack && list[b2].Dura.V < list[b2].MaxDura.V)
                {
                    for (int i = b2 + 1; i < list.Count; i++)
                    {
                        if (list[b2].ID == list[i].ID)
                        {
                            int num;
                            list[b2].Dura.V += (num = Math.Min(list[b2].MaxDura.V - list[b2].Dura.V, list[i].Dura.V));
                            if ((list[i].Dura.V -= num) <= 0)
                            {
                                list[i].Remove();
                                list.RemoveAt(i);
                                i--;
                            }
                            if (list[b2].Dura.V >= list[b2].MaxDura.V)
                            {
                                break;
                            }
                        }
                    }
                }
            }
            Inventory.Clear();
            for (byte b3 = 0; b3 < list.Count; b3 = (byte)(b3 + 1))
            {
                Inventory[b3] = list[b3];
                Inventory[b3].Position = b3;
            }
            Enqueue(new 同步背包信息
            {
                物品描述 = 背包物品描述()
            });
        }
        if (grid != 2)
        {
            return;
        }
        List<ItemInfo> list2 = Storage.Values.ToList();
        list2.Sort((ItemInfo a, ItemInfo b) => b.ID.CompareTo(a.ID));
        for (byte b4 = 0; b4 < list2.Count; b4 = (byte)(b4 + 1))
        {
            if (list2[b4].CanStack && list2[b4].Dura.V < list2[b4].MaxDura.V)
            {
                for (int j = b4 + 1; j < list2.Count; j++)
                {
                    if (list2[b4].ID == list2[j].ID)
                    {
                        int num2;
                        list2[b4].Dura.V += (num2 = Math.Min(list2[b4].MaxDura.V - list2[b4].Dura.V, list2[j].Dura.V));
                        if ((list2[j].Dura.V -= num2) <= 0)
                        {
                            list2[j].Remove();
                            list2.RemoveAt(j);
                            j--;
                        }
                        if (list2[b4].Dura.V >= list2[b4].MaxDura.V)
                        {
                            break;
                        }
                    }
                }
            }
        }
        Storage.Clear();
        for (byte b5 = 0; b5 < list2.Count; b5 = (byte)(b5 + 1))
        {
            Storage[b5] = list2[b5];
            Storage[b5].Position = b5;
        }
        Enqueue(new 同步背包信息
        {
            物品描述 = 仓库物品描述()
        });
    }

    public void 自动整理背包(byte grid)
    {
        if (Dead || StallState > 0 || TradeState >= 3 || grid != 1)
        {
            return;
        }
        List<ItemInfo> list = Inventory.Values.ToList();
        list.Sort((ItemInfo a, ItemInfo b) => b.ID.CompareTo(a.ID));
        for (byte b2 = 0; b2 < list.Count; b2 = (byte)(b2 + 1))
        {
            if (list[b2].CanStack && list[b2].Dura.V < list[b2].MaxDura.V)
            {
                for (int i = b2 + 1; i < list.Count; i++)
                {
                    if (list[b2].ID == list[i].ID)
                    {
                        int num;
                        list[b2].Dura.V += (num = Math.Min(list[b2].MaxDura.V - list[b2].Dura.V, list[i].Dura.V));
                        if ((list[i].Dura.V -= num) <= 0)
                        {
                            list[i].Remove();
                            list.RemoveAt(i);
                            i--;
                        }
                        if (list[b2].Dura.V >= list[b2].MaxDura.V)
                        {
                            break;
                        }
                    }
                }
            }
        }
        Inventory.Clear();
        for (byte b3 = 0; b3 < list.Count; b3 = (byte)(b3 + 1))
        {
            Inventory[b3] = list[b3];
            Inventory[b3].Position = b3;
        }
        Enqueue(new SyncBackpackSizePacket
        {
            InventorySize = InventorySize,
            WarehouseSize = WarehouseSize,
            资源背包大小 = 资源背包大小
        });
        Enqueue(new 同步背包信息
        {
            物品描述 = 全部物品描述()
        });
    }

    public void PickUpItem(ItemObject item)
    {
        try
        {
            if (Dead || StallState > 0 || TradeState >= 3)
                return;
        }
        catch (Exception ex)
        {
            SEngine.AddSystemLog(ex.Message);
        }

        if (item.IsBound && !item.ItemAttribution.Contains(Character))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2310
            });
            return;
        }
        if (item.ItemAttribution.Count != 0 && !item.ItemAttribution.Contains(Character) && SEngine.CurrentTime < item.归属时间)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2307
            });
            return;
        }
        if (item.Weight != 0 && item.Weight > 最大负重 - InventoryWeight)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1863
            });
            return;
        }
        if (item.MaxDura != 0 && RemainingInventorySpace <= 0)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1793
            });
            return;
        }
        if (item.ItemID == 0 || item.ItemID == 1)
        {
            Enqueue(new UserPickUpCoinPacket
            {
                Amount = item.Quantity
            });

            if (item.ItemID == 0)
                Silver += item.Quantity;
            if (item.ItemID == 1)
                Gold += item.Quantity;

            Enqueue(new 同步货币数量
            {
                Description = 全部货币描述()
            });
            item.PickedUp();
            return;
        }
        byte b = FindEmptyInventoryIndex();
        if (b == byte.MaxValue) return;

        if (item.Item != null)
        {
            Inventory[b] = item.Item;
            item.Item.Location.V = b;
            item.Item.Grid.V = 1;
        }
        else if (item.Info is EquipmentItem 模板)
        {
            Inventory[b] = new EquipmentInfo(模板, Character, 1, b, random: true);
        }
        else if (item.持久类型 == PersistentItemType.容器)
        {
            Inventory[b] = new ItemInfo(item.Info, Character, 1, b, 0);
        }
        else if (item.持久类型 == PersistentItemType.Stack)
        {
            Inventory[b] = new ItemInfo(item.Info, Character, 1, b, item.Quantity);
        }
        else
        {
            Inventory[b] = new ItemInfo(item.Info, Character, 1, b, item.MaxDura);
        }
        Enqueue(new 玩家拾取物品
        {
            物品描述 = Inventory[b].ToArray(),
            角色编号 = ObjectID
        });
        Enqueue(new SyncItemPacket
        {
            Description = Inventory[b].ToArray()
        });
        item.PickedUp();
        if (Config.CurrentVersion >= 1)
        {
            if (item.Info.装备套装提示 == GameItemSet.沃玛装备 && 沃玛分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
            else if (item.Info.装备套装提示 == GameItemSet.祖玛装备 && 祖玛分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
            else if (item.Info.装备套装提示 == GameItemSet.赤月装备 && 赤月分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
            else if (item.Info.装备套装提示 == GameItemSet.魔龙装备 && 魔龙分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
            else if (item.Info.装备套装提示 == GameItemSet.苍月装备 && 苍月分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
            else if (item.Info.装备套装提示 == GameItemSet.星王装备 && 星王分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
            else if (item.Info.装备套装提示 == GameItemSet.神秘装备 && 神秘分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
            else if (item.Info.装备套装提示 == GameItemSet.城主装备 && 城主分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
            else if (item.Info.装备套装提示 == GameItemSet.其他装备 && 其他分解开关)
            {
                UserDisassembleItem(1, b, 1);
            }
        }
    }

    public void DropItem(byte grid, byte location, ushort quantity)
    {
        if (!Dead && StallState <= 0 && TradeState < 3 && CurrentLevel > 7 && grid == 1 && Inventory.TryGetValue(location, out var v))
        {
            if (v.IsBound)
            {
                new ItemObject(v.Info, v, CurrentMap, CurrentPosition, new HashSet<CharacterInfo> { Character }, 0, bind: true);
            }
            else
            {
                new ItemObject(v.Info, v, CurrentMap, CurrentPosition, new HashSet<CharacterInfo>());
            }
            Inventory.Remove(v.Location.V);
            Enqueue(new DeleteItemPacket
            {
                Grid = grid,
                Position = location
            });
        }
    }

    public void UserSplitItem(byte grid, byte location, ushort quantity, byte targetGrid, byte targetLocation)
    {
        if (quantity > 0 && !Dead && StallState <= 0 && TradeState < 3 && grid == 1 && Inventory.TryGetValue(location, out var v) && targetGrid == 1 && targetLocation < InventorySize && v != null && v.PersistType == PersistentItemType.Stack && v.Dura.V > quantity && !Inventory.TryGetValue(targetLocation, out var _))
        {
            v.Dura.V -= quantity;
            Enqueue(new SyncItemPacket
            {
                Description = v.ToArray()
            });
            Inventory[targetLocation] = new ItemInfo(v.Info, Character, targetGrid, targetLocation, quantity);
            Enqueue(new SyncItemPacket
            {
                Description = Inventory[targetLocation].ToArray()
            });
        }
    }

    public void UserDisassembleItem(byte grid, byte location, byte quantity)
    {
        if (!Dead && StallState <= 0 && TradeState < 3)
        {
            ItemInfo v;
            if (grid != 1)
            {
                Connection?.Disconnect(new Exception("错误操作: 玩家分解物品.  错误: 背包类型错误."));
            }
            else if (!Inventory.TryGetValue(location, out v))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1802
                });
            }
            else
            {
                if (!(v is EquipmentInfo equip) || !equip.CanSell)
                {
                    return;
                }
                if (Character.分解日期.V.Date != SEngine.CurrentTime.Date)
                {
                    Character.分解日期.V = SEngine.CurrentTime;
                    Character.分解经验.V = 0;
                }
                Inventory.Remove(equip.Position);
                equip.Remove();
                Enqueue(new DeleteItemPacket
                {
                    Grid = grid,
                    Position = location
                });
                byte b = FindEmptyInventoryIndex();
                if (b == byte.MaxValue)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 1793
                    });
                }
                GameItem value = null;
                int 出售价格 = equip.SalePrice;
                if (Config.元宝金币回收设定 == 1)
                {
                    if (equip.EquipInfo.EquipSet == GameItemSet.沃玛装备)
                    {
                        Ingot += Config.沃玛分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.祖玛装备)
                    {
                        Ingot += Config.祖玛分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.赤月装备)
                    {
                        Ingot += Config.赤月分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.魔龙装备)
                    {
                        Ingot += Config.魔龙分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.苍月装备)
                    {
                        Ingot += Config.苍月分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.星王装备)
                    {
                        Ingot += Config.星王分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.城主装备)
                    {
                        Ingot += Config.城主分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.神秘装备)
                    {
                        Ingot += Config.神秘分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.None)
                    {
                        Gold += Math.Max(1, equip.SalePrice);
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                    }
                }
                if (Config.元宝金币回收设定 == 2)
                {
                    if (Config.CurrentVersion < 1)
                    {
                        return;
                    }
                    if (equip.EquipInfo.EquipSet == GameItemSet.祖玛装备)
                    {
                        if (Config.祖玛分解开关 == 5)
                        {
                            int num = SEngine.Random.Next(100);
                            if (num < Config.祖玛分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num < Config.祖玛分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num < Config.祖玛分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Ingot += Config.祖玛分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.祖玛分解开关 == 4)
                        {
                            int num2 = SEngine.Random.Next(100);
                            if (num2 < Config.祖玛分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num2 < Config.祖玛分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num2 < Config.祖玛分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.祖玛分解开关 == 3)
                        {
                            int num3 = SEngine.Random.Next(100);
                            if (num3 < Config.祖玛分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num3 < Config.祖玛分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num3 < Config.祖玛分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.祖玛分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.祖玛分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                        }
                        else if (Config.祖玛分解开关 == 2)
                        {
                            Ingot += Config.祖玛分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.祖玛分解开关 == 1)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.赤月装备)
                    {
                        if (Config.赤月分解开关 == 5)
                        {
                            int num4 = SEngine.Random.Next(100);
                            if (num4 < Config.赤月分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num4 < Config.赤月分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num4 < Config.赤月分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Ingot += Config.赤月分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.赤月分解开关 == 4)
                        {
                            int num5 = SEngine.Random.Next(100);
                            if (num5 < Config.赤月分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num5 < Config.赤月分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num5 < Config.赤月分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.赤月分解开关 == 3)
                        {
                            int num6 = SEngine.Random.Next(100);
                            if (num6 < Config.赤月分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num6 < Config.赤月分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num6 < Config.赤月分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.赤月分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.赤月分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                        }
                        else if (Config.赤月分解开关 == 2)
                        {
                            Ingot += Config.赤月分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.赤月分解开关 == 1)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.魔龙装备)
                    {
                        if (Config.魔龙分解开关 == 5)
                        {
                            int num7 = SEngine.Random.Next(100);
                            if (num7 < Config.魔龙分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num7 < Config.魔龙分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num7 < Config.魔龙分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Ingot += Config.魔龙分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.魔龙分解开关 == 4)
                        {
                            int num8 = SEngine.Random.Next(100);
                            if (num8 < Config.魔龙分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num8 < Config.魔龙分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num8 < Config.魔龙分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.魔龙分解开关 == 3)
                        {
                            int num9 = SEngine.Random.Next(100);
                            if (num9 < Config.魔龙分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num9 < Config.魔龙分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num9 < Config.魔龙分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.魔龙分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.魔龙分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                        }
                        else if (Config.魔龙分解开关 == 2)
                        {
                            Ingot += Config.魔龙分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.魔龙分解开关 == 1)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.苍月装备)
                    {
                        if (Config.苍月分解开关 == 5)
                        {
                            int num10 = SEngine.Random.Next(100);
                            if (num10 < Config.苍月分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num10 < Config.苍月分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num10 < Config.苍月分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Ingot += Config.苍月分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.苍月分解开关 == 4)
                        {
                            int num11 = SEngine.Random.Next(100);
                            if (num11 < Config.苍月分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num11 < Config.苍月分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num11 < Config.苍月分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.苍月分解开关 == 3)
                        {
                            int num12 = SEngine.Random.Next(100);
                            if (num12 < Config.苍月分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num12 < Config.苍月分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num12 < Config.苍月分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.苍月分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.苍月分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                        }
                        else if (Config.苍月分解开关 == 2)
                        {
                            Ingot += Config.苍月分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.苍月分解开关 == 1)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.星王装备)
                    {
                        if (Config.星王分解开关 == 5)
                        {
                            int num13 = SEngine.Random.Next(100);
                            if (num13 < Config.星王分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num13 < Config.星王分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num13 < Config.星王分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Ingot += Config.星王分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.星王分解开关 == 4)
                        {
                            int num14 = SEngine.Random.Next(100);
                            if (num14 < Config.星王分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num14 < Config.星王分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num14 < Config.星王分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.星王分解开关 == 3)
                        {
                            int num15 = SEngine.Random.Next(100);
                            if (num15 < Config.星王分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num15 < Config.星王分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num15 < Config.星王分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.星王分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.星王分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                        }
                        else if (Config.星王分解开关 == 2)
                        {
                            Ingot += Config.星王分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.星王分解开关 == 1)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.城主装备)
                    {
                        if (Config.城主分解开关 == 5)
                        {
                            int num16 = SEngine.Random.Next(100);
                            if (num16 < Config.城主分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num16 < Config.城主分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num16 < Config.城主分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Ingot += Config.城主分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.城主分解开关 == 4)
                        {
                            int num17 = SEngine.Random.Next(100);
                            if (num17 < Config.城主分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num17 < Config.城主分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num17 < Config.城主分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.城主分解开关 == 3)
                        {
                            int num18 = SEngine.Random.Next(100);
                            if (num18 < Config.城主分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num18 < Config.城主分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num18 < Config.城主分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.城主分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.城主分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                        }
                        else if (Config.城主分解开关 == 2)
                        {
                            Ingot += Config.城主分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.城主分解开关 == 1)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.其他装备)
                    {
                        if (Config.其他分解开关 == 5)
                        {
                            int num19 = SEngine.Random.Next(100);
                            if (num19 < Config.其他分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num19 < Config.其他分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num19 < Config.其他分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.其他分解开关 == 4)
                        {
                            int num20 = SEngine.Random.Next(100);
                            if (num20 < Config.其他分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num20 < Config.其他分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num20 < Config.其他分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.其他分解开关 == 3)
                        {
                            int num21 = SEngine.Random.Next(100);
                            if (num21 < Config.其他分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num21 < Config.其他分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num21 < Config.其他分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.其他分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.其他分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                        }
                        else if (Config.其他分解开关 == 2)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.其他分解开关 == 1)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.沃玛装备)
                    {
                        if (Config.沃玛分解开关 == 5)
                        {
                            int num22 = SEngine.Random.Next(100);
                            if (num22 < Config.沃玛分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num22 < Config.沃玛分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num22 < Config.沃玛分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Ingot += Config.沃玛分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.沃玛分解开关 == 4)
                        {
                            int num23 = SEngine.Random.Next(100);
                            if (num23 < Config.沃玛分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num23 < Config.沃玛分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num23 < Config.沃玛分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                        else if (Config.沃玛分解开关 == 3)
                        {
                            int num24 = SEngine.Random.Next(100);
                            if (num24 < Config.沃玛分解几率一)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品一, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量一;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num24 < Config.沃玛分解几率二)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品二, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量二;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else if (num24 < Config.沃玛分解几率三)
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品三, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量三;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                            else
                            {
                                GameItem.DataSheetByName.TryGetValue(Config.沃玛分解物品四, out value);
                                Inventory[b] = new ItemInfo(value, Character, grid, b, 1);
                                Inventory[b].Dura.V = Config.沃玛分解数量四;
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b].ToArray()
                                });
                            }
                        }
                        else if (Config.沃玛分解开关 == 2)
                        {
                            Ingot += Config.沃玛分解元宝;
                            Enqueue(new SyncIngotsPacket
                            {
                                Amount = Ingot
                            });
                        }
                        else if (Config.沃玛分解开关 == 1)
                        {
                            Gold += Math.Max(1, equip.SalePrice);
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                        }
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.神秘装备)
                    {
                        Ingot += Config.神秘分解元宝;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    else if (equip.EquipInfo.EquipSet == GameItemSet.None)
                    {
                        Gold += Math.Max(1, equip.SalePrice);
                        Enqueue(new 同步货币数量
                        {
                            Description = 全部货币描述()
                        });
                    }
                }
                else if (Config.元宝金币回收设定 == 0)
                {
                    Gold += Math.Max(1, equip.SalePrice);
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                }
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1877
            });
        }
    }

    public void UserMoveItem(byte grid, byte location, byte targetGrid, byte targetLocation)
    {
        if (Dead || StallState > 0 || TradeState >= 3 || 
            (grid == 0 && location >= 16) || 
            (grid == 1 && location >= InventorySize) || 
            (grid == 2 && location >= WarehouseSize) || 
            (targetGrid == 0 && targetLocation >= 16) || 
            (targetGrid == 1 && targetLocation >= InventorySize) || 
            (targetGrid == 2 && targetLocation >= WarehouseSize))
        {
            return;
        }
        ItemInfo 物品数据 = null;
        if (grid == 0)
        {
            物品数据 = (Equipment.TryGetValue(location, out var v) ? v : null);
        }
        if (grid == 1)
        {
            物品数据 = (Inventory.TryGetValue(location, out var v2) ? v2 : null);
        }
        if (grid == 2)
        {
            物品数据 = (Storage.TryGetValue(location, out var v3) ? v3 : null);
        }
        if (grid == 7 && Config.资源包开关 == 1)
        {
            物品数据 = (角色资源背包.TryGetValue(location, out var v4) ? v4 : null);
        }
        if (物品数据.背包锁定)
        {
            return;
        }

        ItemInfo 物品数据2 = null;
        if (targetGrid == 0)
        {
            物品数据2 = (Equipment.TryGetValue(targetLocation, out var v5) ? v5 : null);
        }
        if (targetGrid == 1)
        {
            物品数据2 = (Inventory.TryGetValue(targetLocation, out var v6) ? v6 : null);
        }
        if (targetGrid == 2)
        {
            物品数据2 = (Storage.TryGetValue(targetLocation, out var v7) ? v7 : null);
        }
        if (targetGrid == 7 && Config.资源包开关 == 1)
        {
            物品数据2 = (角色资源背包.TryGetValue(targetLocation, out var v8) ? v8 : null);
        }
        if (物品数据.背包锁定 || (物品数据 == null && 物品数据2 == null) || (grid == 0 && targetGrid == 0) || (grid == 0 && targetGrid == 2) || (grid == 2 && targetGrid == 0) || (物品数据 != null && grid == 0 && (物品数据 as EquipmentInfo).CanRemove) || (物品数据2 != null && targetGrid == 0 && (物品数据2 as EquipmentInfo).CanRemove) || (物品数据 != null && targetGrid == 0 && (!(物品数据 is EquipmentInfo 装备数据) || 装备数据.NeedLevel > CurrentLevel || (装备数据.NeedGender != 0 && 装备数据.NeedGender != Gender) || (装备数据.NeedRace != GameObjectRace.Any && 装备数据.NeedRace != Job) || 装备数据.NeedAttack > this[Stat.MaxDC] || 装备数据.NeedMagic > this[Stat.MaxMC] || 装备数据.NeedTaoism > this[Stat.MaxSC] || 装备数据.NeedPiercing > this[Stat.MaxNC] || 装备数据.NeedArchery > this[Stat.MaxBC] || (targetLocation == 0 && 装备数据.Weight > 最大腕力) || (targetLocation != 0 && 装备数据.Weight - 物品数据2?.Weight > 最大穿戴 - EquipmentWeight) || (targetLocation == 0 && 装备数据.Type != ItemType.Weapon) || (targetLocation == 1 && 装备数据.Type != ItemType.Armour) || (targetLocation == 2 && 装备数据.Type != ItemType.Cloak) || (targetLocation == 3 && 装备数据.Type != ItemType.Helmet) || (targetLocation == 4 && 装备数据.Type != ItemType.ShoulderPad) || (targetLocation == 5 && 装备数据.Type != ItemType.护腕) || (targetLocation == 6 && 装备数据.Type != ItemType.Belt) || (targetLocation == 7 && 装备数据.Type != ItemType.Boots) || (targetLocation == 8 && 装备数据.Type != ItemType.Necklace) || (targetLocation == 13 && 装备数据.Type != ItemType.Medal) || (targetLocation == 14 && 装备数据.Type != ItemType.玉佩) || (targetLocation == 15 && 装备数据.Type != ItemType.战具) || (targetLocation == 9 && 装备数据.Type != ItemType.Ring) || (targetLocation == 10 && 装备数据.Type != ItemType.Ring) || (targetLocation == 11 && 装备数据.Type != ItemType.Bracelet) || (targetLocation == 12 && 装备数据.Type != ItemType.Bracelet))) || (物品数据2 != null && grid == 0 && (!(物品数据2 is EquipmentInfo 装备数据2) || 装备数据2.NeedLevel > CurrentLevel || (装备数据2.NeedGender != 0 && 装备数据2.NeedGender != Gender) || (装备数据2.NeedRace != GameObjectRace.Any && 装备数据2.NeedRace != Job) || 装备数据2.NeedAttack > this[Stat.MaxDC] || 装备数据2.NeedMagic > this[Stat.MaxMC] || 装备数据2.NeedTaoism > this[Stat.MaxSC] || 装备数据2.NeedPiercing > this[Stat.MaxNC] || 装备数据2.NeedArchery > this[Stat.MaxBC] || (location == 0 && 装备数据2.Weight > 最大腕力) || (location != 0 && 装备数据2.Weight - 物品数据?.Weight > 最大穿戴 - EquipmentWeight) || (location == 0 && 装备数据2.Type != ItemType.Weapon) || (location == 1 && 装备数据2.Type != ItemType.Armour) || (location == 2 && 装备数据2.Type != ItemType.Cloak) || (location == 3 && 装备数据2.Type != ItemType.Helmet) || (location == 4 && 装备数据2.Type != ItemType.ShoulderPad) || (location == 5 && 装备数据2.Type != ItemType.护腕) || (location == 6 && 装备数据2.Type != ItemType.Belt) || (location == 7 && 装备数据2.Type != ItemType.Boots) || (location == 8 && 装备数据2.Type != ItemType.Necklace) || (location == 13 && 装备数据2.Type != ItemType.Medal) || (location == 14 && 装备数据2.Type != ItemType.玉佩) || (location == 15 && 装备数据2.Type != ItemType.战具) || (location == 9 && 装备数据2.Type != ItemType.Ring) || (location == 10 && 装备数据2.Type != ItemType.Ring) || (location == 11 && 装备数据2.Type != ItemType.Bracelet) || (location == 12 && 装备数据2.Type != ItemType.Bracelet))))
        {
            return;
        }

        if (物品数据 != null && 物品数据2 != null && 物品数据.CanStack && 物品数据2.ID == 物品数据.ID && 物品数据.StackSize > 物品数据.Dura.V && 物品数据2.StackSize > 物品数据2.Dura.V)
        {
            int num = Math.Min(物品数据.Dura.V, 物品数据2.StackSize - 物品数据2.Dura.V);
            物品数据2.Dura.V += num;
            物品数据.Dura.V -= num;
            Enqueue(new SyncItemPacket
            {
                Description = 物品数据2.ToArray()
            });
            if (物品数据.Dura.V <= 0)
            {
                物品数据.Remove();
                switch (grid)
                {
                    case 7:
                        角色资源背包.Remove(location);
                        break;
                    case 2:
                        Storage.Remove(location);
                        break;
                    case 1:
                        Inventory.Remove(location);
                        break;
                }
                Enqueue(new DeleteItemPacket
                {
                    Grid = grid,
                    Position = location
                });
            }
            else
            {
                Enqueue(new SyncItemPacket
                {
                    Description = 物品数据.ToArray()
                });
            }
            return;
        }
        if (物品数据 != null)
        {
            switch (grid)
            {
                case 0:
                    Equipment.Remove(location);
                    break;
                case 1:
                    Inventory.Remove(location);
                    break;
                case 2:
                    Storage.Remove(location);
                    break;
                case 7:
                    角色资源背包.Remove(location);
                    break;
            }
            物品数据.Grid.V = targetGrid;
            物品数据.Location.V = targetLocation;
        }
        if (物品数据2 != null)
        {
            switch (targetGrid)
            {
                case 0:
                    Equipment.Remove(targetLocation);
                    break;
                case 1:
                    Inventory.Remove(targetLocation);
                    break;
                case 2:
                    Storage.Remove(targetLocation);
                    break;
                case 7:
                    角色资源背包.Remove(location);
                    break;
            }
            物品数据2.Grid.V = grid;
            物品数据2.Location.V = location;
        }
        if (物品数据 != null)
        {
            switch (targetGrid)
            {
                case 0:
                    Equipment[targetLocation] = 物品数据 as EquipmentInfo;
                    break;
                case 1:
                    Inventory[targetLocation] = 物品数据;
                    break;
                case 2:
                    Storage[targetLocation] = 物品数据;
                    break;
                case 7:
                    角色资源背包[targetLocation] = 物品数据;
                    break;
            }
        }
        if (物品数据2 != null)
        {
            switch (grid)
            {
                case 0:
                    Equipment[location] = 物品数据2 as EquipmentInfo;
                    break;
                case 1:
                    Inventory[location] = 物品数据2;
                    break;
                case 2:
                    Storage[location] = 物品数据2;
                    break;
                case 7:
                    角色资源背包[location] = 物品数据2;
                    break;
            }
        }
        Enqueue(new 玩家转移物品
        {
            原有容器 = grid,
            目标容器 = targetGrid,
            原有位置 = location,
            目标位置 = targetLocation
        });
        if (targetGrid == 0)
        {
            玩家穿卸装备((装备穿戴部位)targetLocation, (EquipmentInfo)物品数据2, (EquipmentInfo)物品数据);
        }
        else if (grid == 0)
        {
            玩家穿卸装备((装备穿戴部位)location, (EquipmentInfo)物品数据, (EquipmentInfo)物品数据2);
        }
    }

    public bool AddMount(byte id)
    {
        if (Character.Mounts.Contains(id))
            return false;
        Character.Mounts.Add(id);

        Enqueue(new 同步坐骑数据
        {
            Description = Character.坐骑列表描述()
        });
        return true;
    }

    public void UserUseItem(byte grid, byte location)
    {
        if (!Dead && StallState <= 0 && TradeState < 3)
        {
            if (grid != 1)
            {
                Connection?.Disconnect(new Exception("错误操作: 玩家使用物品.  错误: 背包类型错误."));
                return;
            }
            if (!Inventory.TryGetValue(location, out var v))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1802
                });
                return;
            }
            if (CurrentLevel < v.NeedLevel)
            {
                Connection?.Disconnect(new Exception("错误操作: 玩家使用物品.  错误: 等级无法使用."));
                return;
            }
            if (v.NeedRace != GameObjectRace.Any && Job != v.NeedRace)
            {
                Connection?.Disconnect(new Exception("错误操作: 玩家使用物品.  错误: 职业无法使用."));
                return;
            }
            if (Cooldowns.TryGetValue(v.ID | 0x2000000, out var v2) && SEngine.CurrentTime < v2)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1825
                });
                return;
            }
            if (v.GroupID > 0 && Cooldowns.TryGetValue(v.GroupID | 0, out var v3) && SEngine.CurrentTime < v3)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1825
                });
                return;
            }
            if (v.称号编号值 > 0)
            {
                if (ConsumeItem(1, v))
                {
                    AddTitle((byte)v.称号编号值);
                }
                return;
            }
            if (v.AdditionalSkill > 0 && v.StoreType == SaleType.Book)
            {
                if (!ConsumeItem(1, v))
                {
                    return;
                }
                AddSkill(v.AdditionalSkill);
            }
            if (v.StoreType == SaleType.Pharmacy && v.DrugModel == 1 && v.HealthAmount > 0 && v.ManaAmount > 0)
            {
                if (ConsumeItem(1, v))
                {
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    CurrentHP += (int)Math.Max((float)v.HealthAmount * (1f + (float)this[Stat.HPRatePercent] / 10000f), 0f);
                    CurrentMP += (int)Math.Max((float)v.ManaAmount * (1f + (float)this[Stat.MPRatePercent] / 10000f), 0f);
                }
                return;
            }
            if (v.StoreType == SaleType.Pharmacy && v.DrugModel == 2 && v.MaxUseCount > 0 && v.ManaAmount > 0)
            {
                if (ConsumeItem(1, v))
                {
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ManaRegenTime = SEngine.CurrentTime.AddSeconds(v.DrugIntervalTime);
                    ManaRegenAmount = v.ManaAmount;
                    ManaRestoreCount = v.MaxUseCount;
                }
                return;
            }
            if (v.StoreType == SaleType.Pharmacy && v.DrugModel == 3 && v.MaxUseCount > 0 && v.HealthAmount > 0)
            {
                if (ConsumeItem(1, v))
                {
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    HealthRegenTime = SEngine.CurrentTime.AddSeconds(v.DrugIntervalTime);
                    HealthRegenAmount = v.HealthAmount;
                    HealthRestoreCount = v.MaxUseCount;
                }
                return;
            }
            if (v.StoreType == SaleType.Pharmacy && v.DrugModel == 4 && v.MaxUseCount > 0)
            {
                if (ConsumeItem(1, v))
                {
                    AddBuff((ushort)v.BuffDrugID, this);
                    if (v.Experience > 0)
                    {
                        GainExperience(null, v.Experience);
                    }
                }
                return;
            }
            if (v.StoreType == SaleType.Currency && v.CurrencyModel >= 0 && v.货币面额 > 0)
            {
                if (ConsumeItem(1, v))
                {
                    Character.Currencies[(CurrencyType)v.CurrencyModel] += v.货币面额;
                    int 货币数量 = Character.Currencies[(CurrencyType)v.CurrencyModel];
                    byte 货币类型 = (byte)v.CurrencyModel;
                    Enqueue(new SyncCurrencyPacket
                    {
                        Currency = 货币类型,
                        Amount = 货币数量
                    });
                }
                return;
            }
            if (v.StoreType == SaleType.Mounts && v.MountID > 0)
            {
                if (ConsumeItem(1, v))
                {
                    AddMount(v.MountID);
                }
                return;
            }
            if (v.Experience > 0)
            {
                if (ConsumeItem(1, v))
                {
                    GainExperience(null, v.Experience);
                }
                return;
            }
            if (v.给予物品 > 0 && v.给予物品数量 > 0)
            {
                if (!ConsumeItem(1, v))
                {
                    return;
                }
                GameItem value = null;
                if (!GameItem.DataSheet.TryGetValue(v.给予物品, out value))
                {
                    return;
                }
                byte b = FindEmptyInventoryIndex();
                Character.Inventory[b] = new ItemInfo(value, Character, 1, b, 1);
                Character.Inventory[b].Dura.V = v.给予物品数量;
                Character.Enqueue(new SyncItemPacket
                {
                    Description = Character.Inventory[b].ToArray()
                });
                return;
            }
            if (v.TeleportationAreaID > 0)
            {
                if (ConsumeItem(1, v))
                {
                    Teleport((CurrentMap.MapID == v.TeleportationAreaID) ? CurrentMap : MapManager.GetMap(v.TeleportationAreaID), AreaType.Teleportation);
                }
                return;
            }
            if (v.ChestID > 0 && ConsumeItem(1, v))
            {
                if (!TreasureChestInfo.DataSheet.TryGetValue(v.ChestID, out var value2))
                {
                    return;
                }
                if (GameItem.DataSheet.TryGetValue(value2.Item1ID, out var value3))
                {
                    byte b3 = FindEmptyInventoryIndex();
                    if (b3 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                        return;
                    }
                    Inventory[b3] = new ItemInfo(value3, Character, grid, b3, value2.Item1Quantity);
                    Character.Enqueue(new SyncItemPacket
                    {
                        Description = Character.Inventory[b3].ToArray()
                    });
                }
                if (GameItem.DataSheet.TryGetValue(value2.Item2ID, out var value4))
                {
                    byte b5 = byte.MaxValue;
                    byte b6 = 0;
                    while (b6 < InventorySize)
                    {
                        if (Inventory.ContainsKey(b6))
                        {
                            b6 = (byte)(b6 + 2);
                            continue;
                        }
                        b5 = b6;
                        break;
                    }
                    if (b5 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                        return;
                    }
                    Inventory[b5] = new ItemInfo(value4, Character, grid, b5, value2.Item2Quantity);
                    Character.Enqueue(new SyncItemPacket
                    {
                        Description = Character.Inventory[b5].ToArray()
                    });
                }
                if (GameItem.DataSheet.TryGetValue(value2.Item3ID, out var value5))
                {
                    byte b7 = byte.MaxValue;
                    byte b8 = 0;
                    while (b8 < InventorySize)
                    {
                        if (Inventory.ContainsKey(b8))
                        {
                            b8 = (byte)(b8 + 3);
                            continue;
                        }
                        b7 = b8;
                        break;
                    }
                    if (b7 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                        return;
                    }
                    Inventory[b7] = new ItemInfo(value5, Character, grid, b7, value2.Item3Quantity);
                    Character.Enqueue(new SyncItemPacket
                    {
                        Description = Character.Inventory[b7].ToArray()
                    });
                }
                if (GameItem.DataSheet.TryGetValue(value2.Item4ID, out var value6))
                {
                    byte b9 = byte.MaxValue;
                    byte b10 = 0;
                    while (b10 < InventorySize)
                    {
                        if (Inventory.ContainsKey(b10))
                        {
                            b10 = (byte)(b10 + 4);
                            continue;
                        }
                        b9 = b10;
                        break;
                    }
                    if (b9 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                        return;
                    }
                    Inventory[b9] = new ItemInfo(value6, Character, grid, b9, value2.Item4Quantity);
                    Character.Enqueue(new SyncItemPacket
                    {
                        Description = Character.Inventory[b9].ToArray()
                    });
                }
                if (GameItem.DataSheet.TryGetValue(value2.Item5ID, out var value7))
                {
                    byte b11 = byte.MaxValue;
                    byte b12 = 0;
                    while (b12 < InventorySize)
                    {
                        if (Inventory.ContainsKey(b12))
                        {
                            b12 = (byte)(b12 + 5);
                            continue;
                        }
                        b11 = b12;
                        break;
                    }
                    if (b11 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                        return;
                    }
                    Inventory[b11] = new ItemInfo(value7, Character, grid, b11, value2.Item5Quantity);
                    Character.Enqueue(new SyncItemPacket
                    {
                        Description = Character.Inventory[b11].ToArray()
                    });
                }
                if (GameItem.DataSheet.TryGetValue(value2.Item6ID, out var value8))
                {
                    byte b13 = byte.MaxValue;
                    byte b14 = 0;
                    while (b14 < InventorySize)
                    {
                        if (Inventory.ContainsKey(b14))
                        {
                            b14 = (byte)(b14 + 6);
                            continue;
                        }
                        b13 = b14;
                        break;
                    }
                    if (b13 == byte.MaxValue)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                        return;
                    }
                    Inventory[b13] = new ItemInfo(value8, Character, grid, b13, value2.Item6Quantity);
                    Character.Enqueue(new SyncItemPacket
                    {
                        Description = Character.Inventory[b13].ToArray()
                    });
                }
            }
            if (v.ID == Config.会员物品对接)
            {
                GuardObject 守卫实例2 = null;
                foreach (int key in MapManager.Guards.Keys)
                {
                    if (MapManager.Guards[key].GuardID == 8482)
                    {
                        守卫实例2 = MapManager.Guards[key];
                        break;
                    }
                }
                if (守卫实例2 != null)
                {
                    守卫实例2 = new GuardObject(GuardInfo.DataSheet[8482], CurrentMap, GameDirection.Down, new Point(CurrentPosition.X, CurrentPosition.Y + 1));
                    守卫实例2.AutoDisappear = true;
                    守卫实例2.ExistenceTime = SEngine.CurrentTime.AddSeconds(15.0);
                }
                if (守卫实例2 == null)
                {
                    return;
                }
                快捷对话模块(守卫实例2);
            }
            switch (v.Name)
            {
                case "预言三件套":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b105 = FindEmptyInventoryIndex();
                        if (b105 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value75 = null;
                        switch (SEngine.Random.Next(18))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("预言头盔(圣战)", out value75);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("预言头盔(天尊)", out value75);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("预言头盔(法神)", out value75);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("预言头盔(影刺)", out value75);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("预言头盔(箭灵)", out value75);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("预言头盔(龙枪)", out value75);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("预言腰带(圣战)", out value75);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("预言腰带(天尊)", out value75);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("预言腰带(法神)", out value75);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("预言腰带(影刺)", out value75);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("预言腰带(箭灵)", out value75);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("预言腰带(龙枪)", out value75);
                                break;
                            case 12:
                                GameItem.DataSheetByName.TryGetValue("预言靴子(圣战)", out value75);
                                break;
                            case 13:
                                GameItem.DataSheetByName.TryGetValue("预言靴子(天尊)", out value75);
                                break;
                            case 14:
                                GameItem.DataSheetByName.TryGetValue("预言靴子(法神)", out value75);
                                break;
                            case 15:
                                GameItem.DataSheetByName.TryGetValue("预言靴子(影刺)", out value75);
                                break;
                            case 16:
                                GameItem.DataSheetByName.TryGetValue("预言靴子(箭灵)", out value75);
                                break;
                            case 17:
                                GameItem.DataSheetByName.TryGetValue("预言靴子(龙枪)", out value75);
                                break;
                        }
                        if (value75 != null && value75 is EquipmentItem 模板11)
                        {
                            Inventory[b105] = new EquipmentInfo(模板11, Character, grid, b105);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b105].ToArray()
                            });
                        }
                        break;
                    }
                case "魔龙档两件套":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b79 = FindEmptyInventoryIndex();
                        if (b79 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value52 = null;
                        switch (SEngine.Random.Next(12))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("雷霆腰带", out value52);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("雷霆战靴", out value52);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("烈焰腰带", out value52);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("烈焰魔靴", out value52);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("光芒腰带", out value52);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("光芒道靴", out value52);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("风行腰带", out value52);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("风行灵靴", out value52);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("玄冰腰带", out value52);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("玄冰猎靴", out value52);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("天诛腰带", out value52);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("天诛暗靴", out value52);
                                break;
                        }
                        if (value52 != null && value52 is EquipmentItem 模板9)
                        {
                            Inventory[b79] = new EquipmentInfo(模板9, Character, grid, b79);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b79].ToArray()
                            });
                        }
                        break;
                    }
                case "铭文石福袋3":
                    {
                        byte b75 = FindEmptyInventoryIndex();
                        if (b75 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value50 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("战士铭文石", out value50);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("法师铭文石", out value50);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("道士铭文石", out value50);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("刺客铭文石", out value50);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("弓手铭文石", out value50);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙枪铭文石", out value50);
                        }
                        if (value50 != null)
                        {
                            ConsumeItem(1, v);
                            Inventory[b75] = new ItemInfo(value50, Character, grid, b75, 100);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b75].ToArray()
                            });
                        }
                        break;
                    }
                case "铭文石福袋2":
                    {
                        byte b155 = FindEmptyInventoryIndex();
                        if (b155 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value115 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("战士铭文石", out value115);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("法师铭文石", out value115);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("道士铭文石", out value115);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("刺客铭文石", out value115);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("弓手铭文石", out value115);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙枪铭文石", out value115);
                        }
                        if (value115 != null)
                        {
                            ConsumeItem(1, v);
                            Inventory[b155] = new ItemInfo(value115, Character, grid, b155, 50);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b155].ToArray()
                            });
                        }
                        break;
                    }
                case "铭文石福袋1":
                    {
                        byte b143 = FindEmptyInventoryIndex();
                        if (b143 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value108 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("战士铭文石", out value108);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("法师铭文石", out value108);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("道士铭文石", out value108);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("刺客铭文石", out value108);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("弓手铭文石", out value108);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙枪铭文石", out value108);
                        }
                        if (value108 != null)
                        {
                            ConsumeItem(1, v);
                            Inventory[b143] = new ItemInfo(value108, Character, grid, b143, 10);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b143].ToArray()
                            });
                        }
                        break;
                    }
                case "铭文石福袋":
                    {
                        byte b113 = FindEmptyInventoryIndex();
                        if (b113 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value80 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("战士铭文石", out value80);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("法师铭文石", out value80);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("道士铭文石", out value80);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("刺客铭文石", out value80);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("弓手铭文石", out value80);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙枪铭文石", out value80);
                        }
                        if (value80 != null)
                        {
                            ConsumeItem(1, v);
                            Inventory[b113] = new ItemInfo(value80, Character, grid, b113, 1);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b113].ToArray()
                            });
                        }
                        break;
                    }
                case "传说三件套":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b139 = FindEmptyInventoryIndex();
                        if (b139 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value105 = null;
                        switch (SEngine.Random.Next(18))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("传说头盔(圣战)", out value105);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("传说头盔(天尊)", out value105);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("传说头盔(法神)", out value105);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("传说头盔(影刺)", out value105);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("传说头盔(箭灵)", out value105);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("传说头盔(龙枪)", out value105);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("传说腰带(圣战)", out value105);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("传说腰带(天尊)", out value105);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("传说腰带(法神)", out value105);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("传说腰带(影刺)", out value105);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("传说腰带(箭灵)", out value105);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("传说腰带(龙枪)", out value105);
                                break;
                            case 12:
                                GameItem.DataSheetByName.TryGetValue("传说靴子(圣战)", out value105);
                                break;
                            case 13:
                                GameItem.DataSheetByName.TryGetValue("传说靴子(天尊)", out value105);
                                break;
                            case 14:
                                GameItem.DataSheetByName.TryGetValue("传说靴子(法神)", out value105);
                                break;
                            case 15:
                                GameItem.DataSheetByName.TryGetValue("传说靴子(影刺)", out value105);
                                break;
                            case 16:
                                GameItem.DataSheetByName.TryGetValue("传说靴子(箭灵)", out value105);
                                break;
                            case 17:
                                GameItem.DataSheetByName.TryGetValue("传说靴子(龙枪)", out value105);
                                break;
                        }
                        if (value105 != null && value105 is EquipmentItem 模板13)
                        {
                            Inventory[b139] = new EquipmentInfo(模板13, Character, grid, b139);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b139].ToArray()
                            });
                        }
                        break;
                    }
                case "初级装备礼包":
                    {
                        byte b109 = FindEmptyInventoryIndex();
                        if (b109 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value77 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("战士初级装备礼包", out value77);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("法师初级装备礼包", out value77);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("道士初级装备礼包", out value77);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("刺客初级装备礼包", out value77);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("弓手初级装备礼包", out value77);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙枪初级装备礼包", out value77);
                        }
                        if (value77 != null)
                        {
                            ConsumeItem(1, v);
                            Inventory[b109] = new ItemInfo(value77, Character, grid, b109, 1);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b109].ToArray()
                            });
                        }
                        break;
                    }
                case "初级技能礼包":
                    {
                        byte b59 = FindEmptyInventoryIndex();
                        if (b59 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value33 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("战士初级技能礼包", out value33);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("法师初级技能礼包", out value33);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("道士初级技能礼包", out value33);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("刺客初级技能礼包", out value33);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("弓手初级技能礼包", out value33);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙枪初级技能礼包", out value33);
                        }
                        if (value33 != null)
                        {
                            ConsumeItem(1, v);
                            Inventory[b59] = new ItemInfo(value33, Character, grid, b59, 1);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b59].ToArray()
                            });
                        }
                        break;
                    }
                case "豪杰灵石宝盒":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b161 = FindEmptyInventoryIndex();
                        if (b161 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value119 = null;
                        switch (SEngine.Random.Next(8))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("驭朱灵石1级", out value119);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("命朱灵石1级", out value119);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("守阳灵石1级", out value119);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("蔚蓝灵石1级", out value119);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("精绿灵石1级", out value119);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("纯紫灵石1级", out value119);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("深灰灵石1级", out value119);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("橙黄灵石1级", out value119);
                                break;
                        }
                        if (value119 != null)
                        {
                            Inventory[b161] = new ItemInfo(value119, Character, grid, b161, 2);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b161].ToArray()
                            });
                        }
                        break;
                    }
                case "元素宝箱":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b19 = FindEmptyInventoryIndex();
                        if (b19 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value11 = null;
                        switch (SEngine.Random.Next(19))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("星王项链(圣战)", out value11);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("星王项链(法神)", out value11);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("星王项链(天尊)", out value11);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("星王项链(影刺)", out value11);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("星王项链(箭灵)", out value11);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("星王项链(龙枪)", out value11);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("星王戒指(圣战)", out value11);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("星王戒指(法神)", out value11);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("星王戒指(天尊)", out value11);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("星王戒指(影刺)", out value11);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("星王戒指(箭灵)", out value11);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("星王戒指(龙枪)", out value11);
                                break;
                            case 12:
                                GameItem.DataSheetByName.TryGetValue("星王手镯(圣战)", out value11);
                                break;
                            case 13:
                                GameItem.DataSheetByName.TryGetValue("星王手镯(天尊)", out value11);
                                break;
                            case 14:
                                GameItem.DataSheetByName.TryGetValue("星王手镯(法神)", out value11);
                                break;
                            case 15:
                                GameItem.DataSheetByName.TryGetValue("星王手镯(影刺)", out value11);
                                break;
                            case 16:
                                GameItem.DataSheetByName.TryGetValue("星王戒指(法神)", out value11);
                                break;
                            case 17:
                                GameItem.DataSheetByName.TryGetValue("星王手镯(箭灵)", out value11);
                                break;
                            case 18:
                                GameItem.DataSheetByName.TryGetValue("星王手镯(龙枪)", out value11);
                                break;
                        }
                        if (value11 != null && value11 is EquipmentItem 模板3)
                        {
                            Inventory[b19] = new EquipmentInfo(模板3, Character, grid, b19);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b19].ToArray()
                            });
                        }
                        break;
                    }
                case "苍月档首饰":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b147 = FindEmptyInventoryIndex();
                        if (b147 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value110 = null;
                        switch (SEngine.Random.Next(18))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("战神项链", out value110);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("战神戒指", out value110);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("战神手镯", out value110);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("真魂项链", out value110);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("真魂戒指", out value110);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("真魂手镯", out value110);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("圣魔项链", out value110);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("圣魔戒指", out value110);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("圣魔手镯", out value110);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("龙王项链", out value110);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("龙王之戒", out value110);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("龙王之腕", out value110);
                                break;
                            case 12:
                                GameItem.DataSheetByName.TryGetValue("冥王项链", out value110);
                                break;
                            case 13:
                                GameItem.DataSheetByName.TryGetValue("冥王戒指", out value110);
                                break;
                            case 14:
                                GameItem.DataSheetByName.TryGetValue("冥王手镯", out value110);
                                break;
                            case 15:
                                GameItem.DataSheetByName.TryGetValue("晶爪项链", out value110);
                                break;
                            case 16:
                                GameItem.DataSheetByName.TryGetValue("晶喙之镯", out value110);
                                break;
                            case 17:
                                GameItem.DataSheetByName.TryGetValue("陨晶之戒", out value110);
                                break;
                        }
                        if (value110 != null && value110 is EquipmentItem 模板14)
                        {
                            Inventory[b147] = new EquipmentInfo(模板14, Character, grid, b147);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b147].ToArray()
                            });
                        }
                        break;
                    }
                case "苍月档衣服":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b61 = FindEmptyInventoryIndex();
                        if (b61 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value34 = null;
                        switch (SEngine.Random.Next(2))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("凤天魔甲", out value34);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("凰天魔衣", out value34);
                                break;
                        }
                        if (value34 != null && value34 is EquipmentItem 模板7)
                        {
                            Inventory[b61] = new EquipmentInfo(模板7, Character, grid, b61);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b61].ToArray()
                            });
                        }
                        break;
                    }
                case "苍月档武器":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b25 = FindEmptyInventoryIndex();
                        if (b25 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value14 = null;
                        switch (SEngine.Random.Next(6))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("开天", out value14);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("镇天", out value14);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("玄天", out value14);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("破天", out value14);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("焚天", out value14);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("惊天", out value14);
                                break;
                        }
                        if (value14 != null && value14 is EquipmentItem 模板4)
                        {
                            Inventory[b25] = new EquipmentInfo(模板4, Character, grid, b25);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b25].ToArray()
                            });
                        }
                        break;
                    }
                case "裁决档武器":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b71 = FindEmptyInventoryIndex();
                        if (b71 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value47 = null;
                        switch (SEngine.Random.Next(6))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("裁决之杖", out value47);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("龙牙", out value47);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("逍遥扇", out value47);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("霜影", out value47);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("血染", out value47);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("横江", out value47);
                                break;
                        }
                        if (value47 != null && value47 is EquipmentItem 模板8)
                        {
                            Inventory[b71] = new EquipmentInfo(模板8, Character, grid, b71);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b71].ToArray()
                            });
                        }
                        break;
                    }
                case "赤月档首饰":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b153 = FindEmptyInventoryIndex();
                        if (b153 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value113 = null;
                        switch (SEngine.Random.Next(18))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("圣战项链", out value113);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("圣战戒指", out value113);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("圣战手镯", out value113);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("天尊项链", out value113);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("天尊戒指", out value113);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("天尊手镯", out value113);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("法神项链", out value113);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("法神戒指", out value113);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("法神手镯", out value113);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("风暴项链", out value113);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("风暴戒指", out value113);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("风暴手镯", out value113);
                                break;
                            case 12:
                                GameItem.DataSheetByName.TryGetValue("虎贲项链", out value113);
                                break;
                            case 13:
                                GameItem.DataSheetByName.TryGetValue("虎贲戒指", out value113);
                                break;
                            case 14:
                                GameItem.DataSheetByName.TryGetValue("虎贲手镯", out value113);
                                break;
                            case 15:
                                GameItem.DataSheetByName.TryGetValue("箭灵项链", out value113);
                                break;
                            case 16:
                                GameItem.DataSheetByName.TryGetValue("箭灵手镯", out value113);
                                break;
                            case 17:
                                GameItem.DataSheetByName.TryGetValue("箭灵戒指", out value113);
                                break;
                        }
                        if (value113 != null && value113 is EquipmentItem 模板16)
                        {
                            Inventory[b153] = new EquipmentInfo(模板16, Character, grid, b153);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b153].ToArray()
                            });
                        }
                        break;
                    }
                case "赤月档衣服":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b53 = FindEmptyInventoryIndex();
                        if (b53 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value29 = null;
                        switch (SEngine.Random.Next(12))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("天魔神甲", out value29);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("法神披风", out value29);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("天尊道袍", out value29);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("耀阳赤衣", out value29);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("箭灵铠甲", out value29);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("霓裳羽衣", out value29);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("龙枪神甲", out value29);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("圣战宝甲", out value29);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("天师长袍", out value29);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("暗影赤衣", out value29);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("羽灵护甲", out value29);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("龙枪宝甲", out value29);
                                break;
                        }
                        if (value29 != null && value29 is EquipmentItem 模板6)
                        {
                            Inventory[b53] = new EquipmentInfo(模板6, Character, grid, b53);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b53].ToArray()
                            });
                        }
                        break;
                    }
                case "魔龙档首饰":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b117 = FindEmptyInventoryIndex();
                        if (b117 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value85 = null;
                        switch (SEngine.Random.Next(18))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("雷霆战戒", out value85);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("烈焰魔戒", out value85);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("光芒道戒", out value85);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("玄冰指环", out value85);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("天诛血戒", out value85);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("风行暗戒", out value85);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("雷霆护腕", out value85);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("烈焰护腕", out value85);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("光芒护腕", out value85);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("风行护腕", out value85);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("玄冰手镯", out value85);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("天诛邪镯", out value85);
                                break;
                            case 12:
                                GameItem.DataSheetByName.TryGetValue("天诛凶链", out value85);
                                break;
                            case 13:
                                GameItem.DataSheetByName.TryGetValue("光芒项链", out value85);
                                break;
                            case 14:
                                GameItem.DataSheetByName.TryGetValue("烈焰项链", out value85);
                                break;
                            case 15:
                                GameItem.DataSheetByName.TryGetValue("风行项链", out value85);
                                break;
                            case 16:
                                GameItem.DataSheetByName.TryGetValue("玄冰项链", out value85);
                                break;
                            case 17:
                                GameItem.DataSheetByName.TryGetValue("雷霆项链", out value85);
                                break;
                        }
                        if (value85 != null && value85 is EquipmentItem 模板12)
                        {
                            Inventory[b117] = new EquipmentInfo(模板12, Character, grid, b117);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b117].ToArray()
                            });
                        }
                        break;
                    }
                case "魔龙档武器":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b15 = FindEmptyInventoryIndex();
                        if (b15 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value9 = null;
                        switch (SEngine.Random.Next(6))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("屠龙", out value9);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("嗜魂法杖", out value9);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("倚天剑", out value9);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("黯灭轮", out value9);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("擎龙", out value9);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("龙炎", out value9);
                                break;
                        }
                        if (value9 != null && value9 is EquipmentItem 模板)
                        {
                            Inventory[b15] = new EquipmentInfo(模板, Character, grid, b15);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b15].ToArray()
                            });
                        }
                        break;
                    }
                case "魔龙档衣服":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b81 = FindEmptyInventoryIndex();
                        if (b81 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value53 = null;
                        switch (SEngine.Random.Next(12))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("雷霆战甲(男)", out value53);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("烈焰魔衣(男)", out value53);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("光芒道袍(男)", out value53);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("风行盾甲(男)", out value53);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("玄冰战甲(男)", out value53);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("天诛魔甲(男)", out value53);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("雷霆战甲(女)", out value53);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("烈焰魔衣(女)", out value53);
                                break;
                            case 8:
                                GameItem.DataSheetByName.TryGetValue("光芒道袍(女)", out value53);
                                break;
                            case 9:
                                GameItem.DataSheetByName.TryGetValue("风行盾甲(女)", out value53);
                                break;
                            case 10:
                                GameItem.DataSheetByName.TryGetValue("玄冰战甲(女)", out value53);
                                break;
                            case 11:
                                GameItem.DataSheetByName.TryGetValue("天诛魔甲(女)", out value53);
                                break;
                        }
                        if (value53 != null && value53 is EquipmentItem 模板10)
                        {
                            Inventory[b81] = new EquipmentInfo(模板10, Character, grid, b81);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b81].ToArray()
                            });
                        }
                        break;
                    }
                case "怒斩档武器":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b29 = FindEmptyInventoryIndex();
                        if (b29 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value16 = null;
                        switch (SEngine.Random.Next(6))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("怒斩", out value16);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("骨玉权杖", out value16);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("龙纹剑", out value16);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("龙爪手", out value16);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("猎首", out value16);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("虎咆", out value16);
                                break;
                        }
                        if (value16 != null && value16 is EquipmentItem 模板5)
                        {
                            Inventory[b29] = new EquipmentInfo(模板5, Character, grid, b29);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b29].ToArray()
                            });
                        }
                        break;
                    }
                case "战具礼盒":
                    {
                        byte b151 = FindEmptyInventoryIndex();
                        if (b151 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value112 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("气血石", out value112);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("魔法石", out value112);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("万灵符", out value112);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("吸血令", out value112);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("守护箭袋", out value112);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("血精石", out value112);
                        }
                        if (value112 != null && value112 is EquipmentItem 模板15)
                        {
                            ConsumeItem(1, v);
                            Inventory[b151] = new EquipmentInfo(模板15, Character, grid, b151);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b151].ToArray()
                            });
                        }
                        break;
                    }
                
                
                case "BOSS卷轴一":
                case "BOSS卷轴二":
                case "BOSS卷轴三":
                case "BOSS卷轴四":
                case "BOSS卷轴五":
                case "BOSS卷轴六":
                case "BOSS卷轴七":
                case "BOSS卷轴八":
                case "BOSS卷轴九":
                case "BOSS卷轴十":
                case "BOSS卷轴11":
                case "BOSS卷轴12":
                case "BOSS卷轴13":
                case "BOSS卷轴14":
                case "BOSS卷轴15":
                case "BOSS卷轴16":
                    {
                        if (Character.CurrentMap.V == 179)
                            break;

                        if (CurrentMap.IsSafeArea(CurrentPosition))
                        {
                            Enqueue(new GameErrorMessagePacket { ErrorCode = 2819 });
                            break;
                        }

                        var name = v.Name switch
                        {
                            "BOSS卷轴一" => Config.BOSS卷轴怪物一,
                            "BOSS卷轴二" => Config.BOSS卷轴怪物二,
                            "BOSS卷轴三" => Config.BOSS卷轴怪物三,
                            "BOSS卷轴四" => Config.BOSS卷轴怪物四,
                            "BOSS卷轴五" => Config.BOSS卷轴怪物五,
                            "BOSS卷轴六" => Config.BOSS卷轴怪物六,
                            "BOSS卷轴七" => Config.BOSS卷轴怪物七,
                            "BOSS卷轴八" => Config.BOSS卷轴怪物八,
                            "BOSS卷轴九" => Config.BOSS卷轴怪物九,
                            "BOSS卷轴十" => Config.BOSS卷轴怪物十,
                            "BOSS卷轴11" => Config.BOSS卷轴怪物11,
                            "BOSS卷轴12" => Config.BOSS卷轴怪物12,
                            "BOSS卷轴13" => Config.BOSS卷轴怪物13,
                            "BOSS卷轴14" => Config.BOSS卷轴怪物14,
                            "BOSS卷轴15" => Config.BOSS卷轴怪物15,
                            "BOSS卷轴16" => Config.BOSS卷轴怪物16,
                            _ => string.Empty
                        };

                        if (string.IsNullOrEmpty(name))
                            break;

                        if (Config.CurrentVersion >= 1 && MonsterInfo.DataSheet.TryGetValue(name, out var moni))
                        {
                            if (Config.BOSS卷轴地图开关 == 1 && CurrentMap.MapID == Config.BOSS卷轴地图编号)
                            {
                                MonsterObject mon = new MonsterObject(moni, CurrentMap, int.MaxValue, new Point(CurrentPosition.X, CurrentPosition.Y), 1,
                                    true, true);
                                mon.CurrentDirection = GameDirection.UpRight;
                                mon.SurvivalTime = DateTime.MaxValue;
                                ConsumeItem(1, v);
                            }
                            if (Config.BOSS卷轴地图开关 == 0)
                            {
                                MonsterObject mon = new MonsterObject(moni, CurrentMap, int.MaxValue, new Point(CurrentPosition.X, CurrentPosition.Y), 1,
                                    true, true);
                                mon.CurrentDirection = GameDirection.UpRight;
                                mon.SurvivalTime = DateTime.MaxValue;
                                ConsumeItem(1, v);
                            }
                        }
                        break;
                    }
                case "初级赞助礼包":
                    {
                        if (Config.新手领取选项 != 1)
                        {
                            break;
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.初级赞助礼包1, out var value17))
                        {
                            byte b31 = FindEmptyInventoryIndex();
                            Character.Inventory[b31] = new ItemInfo(value17, Character, 1, b31, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b31].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.初级赞助礼包2, out var value18))
                        {
                            byte b33 = byte.MaxValue;
                            byte b34 = 0;
                            while (b34 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b34))
                                {
                                    b34 = (byte)(b34 + 2);
                                    continue;
                                }
                                b33 = b34;
                                break;
                            }
                            Character.Inventory[b33] = new ItemInfo(value18, Character, 1, b33, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b33].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.初级赞助礼包3, out var value19))
                        {
                            byte b35 = byte.MaxValue;
                            byte b36 = 0;
                            while (b36 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b36))
                                {
                                    b36 = (byte)(b36 + 3);
                                    continue;
                                }
                                b35 = b36;
                                break;
                            }
                            Character.Inventory[b35] = new ItemInfo(value19, Character, 1, b35, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b35].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.初级赞助礼包4, out var value20))
                        {
                            byte b37 = byte.MaxValue;
                            byte b38 = 0;
                            while (b38 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b38))
                                {
                                    b38 = (byte)(b38 + 4);
                                    continue;
                                }
                                b37 = b38;
                                break;
                            }
                            Character.Inventory[b37] = new ItemInfo(value20, Character, 1, b37, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b37].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.初级赞助礼包5, out var value21))
                        {
                            byte b39 = byte.MaxValue;
                            byte b40 = 0;
                            while (b40 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b40))
                                {
                                    b40 = (byte)(b40 + 5);
                                    continue;
                                }
                                b39 = b40;
                                break;
                            }
                            Character.Inventory[b39] = new ItemInfo(value21, Character, 1, b39, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b39].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.初级赞助礼包6, out var value22))
                        {
                            byte b41 = byte.MaxValue;
                            byte b42 = 0;
                            while (b42 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b42))
                                {
                                    b42 = (byte)(b42 + 6);
                                    continue;
                                }
                                b41 = b42;
                                break;
                            }
                            Character.Inventory[b41] = new ItemInfo(value22, Character, 1, b41, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b41].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.初级赞助礼包7, out var value23))
                        {
                            byte b43 = byte.MaxValue;
                            byte b44 = 0;
                            while (b44 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b44))
                                {
                                    b44 = (byte)(b44 + 7);
                                    continue;
                                }
                                b43 = b44;
                                break;
                            }
                            Character.Inventory[b43] = new ItemInfo(value23, Character, 1, b43, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b43].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.初级赞助礼包8, out var value24))
                        {
                            byte b45 = byte.MaxValue;
                            byte b46 = 0;
                            while (b46 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b46))
                                {
                                    b46 = (byte)(b46 + 8);
                                    continue;
                                }
                                b45 = b46;
                                break;
                            }
                            Character.Inventory[b45] = new ItemInfo(value24, Character, 1, b45, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b45].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        AddTitle((byte)Config.初级赞助称号1);
                        ConsumeItem(1, v);
                        break;
                    }
                case "中级赞助礼包":
                    {
                        if (Config.新手领取选项 != 1)
                        {
                            break;
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.中级赞助礼包1, out var value94))
                        {
                            byte b121 = byte.MaxValue;
                            byte b122 = 0;
                            while (b122 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b122))
                                {
                                    b122 = (byte)(b122 + 1);
                                    continue;
                                }
                                b121 = b122;
                                break;
                            }
                            Character.Inventory[b121] = new ItemInfo(value94, Character, 1, b121, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b121].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.中级赞助礼包2, out var value95))
                        {
                            byte b123 = byte.MaxValue;
                            byte b124 = 0;
                            while (b124 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b124))
                                {
                                    b124 = (byte)(b124 + 2);
                                    continue;
                                }
                                b123 = b124;
                                break;
                            }
                            Character.Inventory[b123] = new ItemInfo(value95, Character, 1, b123, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b123].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.中级赞助礼包3, out var value96))
                        {
                            byte b125 = byte.MaxValue;
                            byte b126 = 0;
                            while (b126 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b126))
                                {
                                    b126 = (byte)(b126 + 3);
                                    continue;
                                }
                                b125 = b126;
                                break;
                            }
                            Character.Inventory[b125] = new ItemInfo(value96, Character, 1, b125, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b125].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.中级赞助礼包4, out var value97))
                        {
                            byte b127 = byte.MaxValue;
                            byte b128 = 0;
                            while (b128 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b128))
                                {
                                    b128 = (byte)(b128 + 4);
                                    continue;
                                }
                                b127 = b128;
                                break;
                            }
                            Character.Inventory[b127] = new ItemInfo(value97, Character, 1, b127, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b127].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.中级赞助礼包5, out var value98))
                        {
                            byte b129 = byte.MaxValue;
                            byte b130 = 0;
                            while (b130 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b130))
                                {
                                    b130 = (byte)(b130 + 5);
                                    continue;
                                }
                                b129 = b130;
                                break;
                            }
                            Character.Inventory[b129] = new ItemInfo(value98, Character, 1, b129, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b129].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.中级赞助礼包6, out var value99))
                        {
                            byte b131 = byte.MaxValue;
                            byte b132 = 0;
                            while (b132 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b132))
                                {
                                    b132 = (byte)(b132 + 6);
                                    continue;
                                }
                                b131 = b132;
                                break;
                            }
                            Character.Inventory[b131] = new ItemInfo(value99, Character, 1, b131, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b131].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.中级赞助礼包7, out var value100))
                        {
                            byte b133 = byte.MaxValue;
                            byte b134 = 0;
                            while (b134 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b134))
                                {
                                    b134 = (byte)(b134 + 7);
                                    continue;
                                }
                                b133 = b134;
                                break;
                            }
                            Character.Inventory[b133] = new ItemInfo(value100, Character, 1, b133, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b133].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.中级赞助礼包8, out var value101))
                        {
                            byte b135 = byte.MaxValue;
                            byte b136 = 0;
                            while (b136 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b136))
                                {
                                    b136 = (byte)(b136 + 8);
                                    continue;
                                }
                                b135 = b136;
                                break;
                            }
                            Character.Inventory[b135] = new ItemInfo(value101, Character, 1, b135, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b135].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        AddTitle((byte)Config.中级赞助称号1);
                        ConsumeItem(1, v);
                        break;
                    }
                case "高级赞助礼包":
                    {
                        if (Config.新手领取选项 != 1)
                        {
                            break;
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.高级赞助礼包1, out var value67))
                        {
                            byte b89 = byte.MaxValue;
                            byte b90 = 0;
                            while (b90 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b90))
                                {
                                    b90 = (byte)(b90 + 1);
                                    continue;
                                }
                                b89 = b90;
                                break;
                            }
                            Character.Inventory[b89] = new ItemInfo(value67, Character, 1, b89, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b89].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.高级赞助礼包2, out var value68))
                        {
                            byte b91 = byte.MaxValue;
                            byte b92 = 0;
                            while (b92 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b92))
                                {
                                    b92 = (byte)(b92 + 2);
                                    continue;
                                }
                                b91 = b92;
                                break;
                            }
                            Character.Inventory[b91] = new ItemInfo(value68, Character, 1, b91, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b91].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.高级赞助礼包3, out var value69))
                        {
                            byte b93 = byte.MaxValue;
                            byte b94 = 0;
                            while (b94 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b94))
                                {
                                    b94 = (byte)(b94 + 3);
                                    continue;
                                }
                                b93 = b94;
                                break;
                            }
                            Character.Inventory[b93] = new ItemInfo(value69, Character, 1, b93, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b93].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.高级赞助礼包4, out var value70))
                        {
                            byte b95 = byte.MaxValue;
                            byte b96 = 0;
                            while (b96 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b96))
                                {
                                    b96 = (byte)(b96 + 4);
                                    continue;
                                }
                                b95 = b96;
                                break;
                            }
                            Character.Inventory[b95] = new ItemInfo(value70, Character, 1, b95, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b95].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.高级赞助礼包5, out var value71))
                        {
                            byte b97 = byte.MaxValue;
                            byte b98 = 0;
                            while (b98 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b98))
                                {
                                    b98 = (byte)(b98 + 5);
                                    continue;
                                }
                                b97 = b98;
                                break;
                            }
                            Character.Inventory[b97] = new ItemInfo(value71, Character, 1, b97, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b97].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.高级赞助礼包6, out var value72))
                        {
                            byte b99 = byte.MaxValue;
                            byte b100 = 0;
                            while (b100 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b100))
                                {
                                    b100 = (byte)(b100 + 6);
                                    continue;
                                }
                                b99 = b100;
                                break;
                            }
                            Character.Inventory[b99] = new ItemInfo(value72, Character, 1, b99, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b99].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.高级赞助礼包7, out var value73))
                        {
                            byte b101 = byte.MaxValue;
                            byte b102 = 0;
                            while (b102 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b102))
                                {
                                    b102 = (byte)(b102 + 7);
                                    continue;
                                }
                                b101 = b102;
                                break;
                            }
                            Character.Inventory[b101] = new ItemInfo(value73, Character, 1, b101, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b101].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        if (GameItem.DataSheet.TryGetValue(Config.高级赞助礼包8, out var value74))
                        {
                            byte b103 = byte.MaxValue;
                            byte b104 = 0;
                            while (b104 < Character.InventorySize.V)
                            {
                                if (Character.Inventory.ContainsKey(b104))
                                {
                                    b104 = (byte)(b104 + 8);
                                    continue;
                                }
                                b103 = b104;
                                break;
                            }
                            Character.Inventory[b103] = new ItemInfo(value74, Character, 1, b103, 1);
                            Character.Enqueue(new SyncItemPacket
                            {
                                Description = Character.Inventory[b103].ToArray()
                            });
                            ConsumeItem(1, v);
                        }
                        AddTitle((byte)Config.高级赞助称号1);
                        ConsumeItem(1, v);
                        break;
                    }
                case "御龙晶甲":
                    if (AddSkill(1209))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "击飞射击":
                    if (AddSkill(2046))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "大火球":
                    if (AddSkill(2549))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·天威剑法":
                    if (AddSkill(1050))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·猎命宣告":
                    if (AddSkill(1548))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·夜幕隐踪":
                    if (AddSkill(2058))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·龙啸千里":
                    if (AddSkill(1218))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·魔能星陨":
                    if (AddSkill(2559))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·四象之力":
                    if (AddSkill(3027))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "精准打击":
                    if (AddSkill(2042))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "神圣战甲术":
                    if (AddSkill(3007))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "施毒术":
                    if (AddSkill(3004))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "寒冰掌":
                    if (AddSkill(2550))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "地狱火":
                    if (AddSkill(2544))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "鬼灵步":
                    if (AddSkill(1537))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·羿神庇佑":
                    if (AddSkill(2049))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "中平枪术":
                    if (AddSkill(1201))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "燃血化元":
                    if (AddSkill(1211))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "冰咆哮":
                    if (AddSkill(2537))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "二连射":
                    if (AddSkill(2043))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·法神奥义":
                    if (AddSkill(2557))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "倚天辟地秘卷":
                    if (AddSkill(3020))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "献祭":
                    if (AddSkill(1545))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "幽灵盾":
                    if (AddSkill(3006))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "火球术":
                    if (AddSkill(2531))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·守护箭羽":
                    if (AddSkill(2052))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "灵魂火符":
                    if (AddSkill(3005))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "狮子吼":
                    if (AddSkill(1037))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "魔法盾":
                    if (AddSkill(2535))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "回避射击":
                    if (AddSkill(2056))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "困魔咒":
                    if (AddSkill(3011))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "噬血术":
                    if (AddSkill(3010))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "灭天火":
                    if (AddSkill(2539))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "穿刺射击":
                    if (AddSkill(2050))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "圣言术":
                    if (AddSkill(2547))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "连环暗雷":
                    if (AddSkill(2047))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "爆裂火焰":
                    if (AddSkill(2545))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "群体治愈术":
                    if (AddSkill(3012))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·百战军魂":
                    if (AddSkill(1214))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·金钟罩":
                    if (AddSkill(1047))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "气功波":
                    if (AddSkill(3018))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "基础射击":
                    if (AddSkill(2041))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "枪出如龙":
                    if (AddSkill(1208))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "抗拒火环":
                    if (AddSkill(2532))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "瞬息移动":
                    if (AddSkill(2538))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "无极真气":
                    if (AddSkill(3015))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "基本剑术":
                    if (AddSkill(1031))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "强袭":
                    if (AddSkill(2048))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "旋风腿":
                    if (AddSkill(1536))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "伏波荡寇":
                    if (AddSkill(1202))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "狂飙突刺":
                    if (AddSkill(1204))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "致残毒药":
                    if (AddSkill(1533))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·盘龙枪势":
                    if (AddSkill(1213))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "道尊天谕":
                    if (AddSkill(3022))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "地狱雷光":
                    if (AddSkill(2546))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·召唤月灵":
                    if (AddSkill(3024))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "神威盾甲":
                    if (AddSkill(1046))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "逐日剑法":
                    if (AddSkill(1038))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "刺杀剑术":
                    if (AddSkill(1033))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "诱惑之光":
                    if (AddSkill(2541))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "乾坤斗气":
                    if (AddSkill(1206))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "召唤骷髅":
                    if (AddSkill(3003))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "骑术":
                    if (AddSkill(4587))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "横扫六合":
                    if (AddSkill(1203))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "三发散射":
                    if (AddSkill(2045))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "暴击术":
                    if (AddSkill(1531))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "雷电术":
                    if (AddSkill(2533))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·魔刃天旋":
                    if (AddSkill(1547))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "凝神":
                    if (AddSkill(2051))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "凌云枪法":
                    if (AddSkill(1210))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "追魂镖":
                    if (AddSkill(1541))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·雷霆剑法":
                    if (AddSkill(1049))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "神威镇域":
                    if (AddSkill(1207))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "战术标记":
                    if (AddSkill(2044))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "潜行术":
                    if (AddSkill(1532))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "半月弯刀":
                    if (AddSkill(1034))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "野蛮冲撞":
                    if (AddSkill(1035))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "冷酷":
                    if (AddSkill(1538))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "炎龙波":
                    if (AddSkill(1535))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "火镰狂舞":
                    if (AddSkill(1539))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "魔能闪":
                    if (AddSkill(2554))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "霹雳弹":
                    if (AddSkill(1542))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "集体隐身术":
                    if (AddSkill(3014))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "钩镰枪法":
                    if (AddSkill(1205))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "治愈术":
                    if (AddSkill(3002))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "流星火雨":
                    if (AddSkill(2540))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "召唤龙驹":
                    if (AddSkill(1212))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "召唤神兽":
                    if (AddSkill(3008))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "爆炎剑诀":
                    if (AddSkill(1042))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "疾光电影":
                    if (AddSkill(2536))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·暗影守卫":
                    if (AddSkill(1546))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "烈火剑法":
                    if (AddSkill(1036))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·万箭穿心":
                    if (AddSkill(2057))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·元素星辰":
                    if (AddSkill(2558))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "精准术":
                    if (AddSkill(1534))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "攻杀剑术":
                    if (AddSkill(1032))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "隐身术":
                    if (AddSkill(3009))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "火墙":
                    if (AddSkill(2534))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "精神力战法":
                    if (AddSkill(3001))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "觉醒·阴阳道盾":
                    if (AddSkill(3025))
                    {
                        ConsumeItem(1, v);
                    }
                    break;
                case "疗伤药包":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("疗伤药", out var value83))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b115 = 0;
                        byte b116 = 0;
                        ItemInfo 物品 = null;
                        if (FindItem(353, out 物品) && 物品.Dura.V <= 9999)
                        {
                            物品.Dura.V += 6;
                            Enqueue(new SyncItemPacket
                            {
                                Description = 物品.ToArray()
                            });
                        }
                        while (b115 < InventorySize && b116 < 6 && !FindItem(353, out 物品))
                        {
                            if (!Inventory.ContainsKey(b115))
                            {
                                Inventory[b115] = new ItemInfo(value83, Character, 1, b115, 6);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b115].ToArray()
                                });
                                b116 = (byte)(b116 + 1);
                            }
                            b115 = (byte)(b115 + 1);
                        }
                    }
                    break;
                case "强效金创药":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    HealthRegenTime = SEngine.CurrentTime.AddSeconds(1.0);
                    HealthRegenAmount = 15;
                    HealthRestoreCount = 6;
                    break;
                case "万年雪霜":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    CurrentHP += (int)Math.Max((float)Config.万年雪霜HP * (1f + (float)this[Stat.HPRatePercent] / 10000f), 0f);
                    CurrentMP += (int)Math.Max((float)Config.万年雪霜MP * (1f + (float)this[Stat.MPRatePercent] / 10000f), 0f);
                    break;
                case "强效太阳水":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    CurrentHP += (int)Math.Max(50f * (1f + (float)this[Stat.HPRatePercent] / 10000f), 0f);
                    CurrentMP += (int)Math.Max(80f * (1f + (float)this[Stat.MPRatePercent] / 10000f), 0f);
                    break;
                case "金创药(中量)":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    HealthRegenTime = SEngine.CurrentTime.AddSeconds(1.0);
                    HealthRegenAmount = 10;
                    HealthRestoreCount = 5;
                    break;
                case "金创药(小量)":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    HealthRegenTime = SEngine.CurrentTime.AddSeconds(1.0);
                    HealthRegenAmount = 5;
                    HealthRestoreCount = 4;
                    break;
                case "万年雪霜包":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("万年雪霜", out var value45))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b69 = 0;
                        byte b70 = 0;
                        while (b69 < InventorySize && b70 < 6)
                        {
                            if (!Inventory.ContainsKey(b69))
                            {
                                Inventory[b69] = new ItemInfo(value45, Character, 1, b69, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b69].ToArray()
                                });
                                b70 = (byte)(b70 + 1);
                            }
                            b69 = (byte)(b69 + 1);
                        }
                    }
                    break;
                case "太阳水包":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("太阳水", out var value28))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b51 = 0;
                        byte b52 = 0;
                        while (b51 < InventorySize && b52 < 6)
                        {
                            if (!Inventory.ContainsKey(b51))
                            {
                                Inventory[b51] = new ItemInfo(value28, Character, 1, b51, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b51].ToArray()
                                });
                                b52 = (byte)(b52 + 1);
                            }
                            b51 = (byte)(b51 + 1);
                        }
                    }
                    break;
                case "太阳水":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    CurrentHP += (int)Math.Max(30f * (1f + (float)this[Stat.HPRatePercent] / 10000f), 0f);
                    CurrentMP += (int)Math.Max(40f * (1f + (float)this[Stat.MPRatePercent] / 10000f), 0f);
                    break;
                case "金创药(小)包":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("金创药(小量)", out var value15))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b27 = 0;
                        byte b28 = 0;
                        while (b27 < InventorySize && b28 < 6)
                        {
                            if (!Inventory.ContainsKey(b27))
                            {
                                Inventory[b27] = new ItemInfo(value15, Character, 1, b27, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b27].ToArray()
                                });
                                b28 = (byte)(b28 + 1);
                            }
                            b27 = (byte)(b27 + 1);
                        }
                    }
                    break;
                case "疗伤药":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    CurrentHP += (int)Math.Max((float)Config.疗伤药HP * (1f + (float)this[Stat.HPRatePercent] / 10000f), 0f);
                    CurrentMP += (int)Math.Max((float)Config.疗伤药MP * (1f + (float)this[Stat.MPRatePercent] / 10000f), 0f);
                    break;
                case "超级金创药":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("强效金创药", out var value117))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b159 = 0;
                        byte b160 = 0;
                        while (b159 < InventorySize && b160 < 6)
                        {
                            if (!Inventory.ContainsKey(b159))
                            {
                                Inventory[b159] = new ItemInfo(value117, Character, 1, b159, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b159].ToArray()
                                });
                                b160 = (byte)(b160 + 1);
                            }
                            b159 = (byte)(b159 + 1);
                        }
                    }
                    break;
                case "魔法药(小量)":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    ManaRegenTime = SEngine.CurrentTime.AddSeconds(1.0);
                    ManaRegenAmount = 10;
                    ManaRestoreCount = 3;
                    break;
                case "强效太阳水包":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("强效太阳水", out var value109))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b145 = 0;
                        byte b146 = 0;
                        while (b145 < InventorySize && b146 < 6)
                        {
                            if (!Inventory.ContainsKey(b145))
                            {
                                Inventory[b145] = new ItemInfo(value109, Character, 1, b145, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b145].ToArray()
                                });
                                b146 = (byte)(b146 + 1);
                            }
                            b145 = (byte)(b145 + 1);
                        }
                    }
                    break;
                case "金创药(中)包":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("金创药(中量)", out var value106))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b141 = 0;
                        byte b142 = 0;
                        while (b141 < InventorySize && b142 < 6)
                        {
                            if (!Inventory.ContainsKey(b141))
                            {
                                Inventory[b141] = new ItemInfo(value106, Character, 1, b141, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b141].ToArray()
                                });
                                b142 = (byte)(b142 + 1);
                            }
                            b141 = (byte)(b141 + 1);
                        }
                    }
                    break;
                case "魔法药(中量)":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    ManaRegenTime = SEngine.CurrentTime.AddSeconds(1.0);
                    ManaRegenAmount = 16;
                    ManaRestoreCount = 5;
                    break;
                case "魔法药(中)包":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("魔法药(中量)", out var value76))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b107 = 0;
                        byte b108 = 0;
                        while (b107 < InventorySize && b108 < 6)
                        {
                            if (!Inventory.ContainsKey(b107))
                            {
                                Inventory[b107] = new ItemInfo(value76, Character, 1, b107, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b107].ToArray()
                                });
                                b108 = (byte)(b108 + 1);
                            }
                            b107 = (byte)(b107 + 1);
                        }
                    }
                    break;
                case "魔法药(小)包":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("魔法药(小量)", out var value65))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b87 = 0;
                        byte b88 = 0;
                        while (b87 < InventorySize && b88 < 6)
                        {
                            if (!Inventory.ContainsKey(b87))
                            {
                                Inventory[b87] = new ItemInfo(value65, Character, 1, b87, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b87].ToArray()
                                });
                                b88 = (byte)(b88 + 1);
                            }
                            b87 = (byte)(b87 + 1);
                        }
                    }
                    break;
                case "强效魔法药":
                    if (v.GroupID > 0 && v.GroupCooling > 0)
                    {
                        Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.GroupID | 0),
                            冷却时间 = v.GroupCooling
                        });
                    }
                    if (v.Cooldown > 0)
                    {
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                    }
                    ConsumeItem(1, v);
                    ManaRegenTime = SEngine.CurrentTime.AddSeconds(1.0);
                    ManaRegenAmount = 25;
                    ManaRestoreCount = 6;
                    break;
                case "超级魔法药":
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("强效魔法药", out var value54))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b83 = 0;
                        byte b84 = 0;
                        while (b83 < InventorySize && b84 < 6)
                        {
                            if (!Inventory.ContainsKey(b83))
                            {
                                Inventory[b83] = new ItemInfo(value54, Character, 1, b83, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b83].ToArray()
                                });
                                b84 = (byte)(b84 + 1);
                            }
                            b83 = (byte)(b83 + 1);
                        }
                    }
                    break;
                case "自定义物品1":
                    {
                        if (!GameItem.DataSheetByName.TryGetValue(Config.自定义物品内容一, out var value51))
                        {
                            break;
                        }
                        byte b77 = FindEmptyInventoryIndex();
                        Character.Inventory[b77] = new ItemInfo(value51, Character, 1, b77, 1);
                        Character.Inventory[b77].Dura.V = Config.自定义物品数量一;
                        Character.Enqueue(new SyncItemPacket
                        {
                            Description = Character.Inventory[b77].ToArray()
                        });
                        ConsumeItem(1, v);
                        break;
                    }
                case "自定义物品2":
                    {
                        if (!GameItem.DataSheetByName.TryGetValue(Config.自定义物品内容二, out var value48))
                        {
                            break;
                        }
                        byte b73 = FindEmptyInventoryIndex();
                        Character.Inventory[b73] = new ItemInfo(value48, Character, 1, b73, 1);
                        Character.Inventory[b73].Dura.V = Config.自定义物品数量二;
                        Character.Enqueue(new SyncItemPacket
                        {
                            Description = Character.Inventory[b73].ToArray()
                        });
                        ConsumeItem(1, v);
                        break;
                    }
                case "自定义物品3":
                    {
                        if (!GameItem.DataSheetByName.TryGetValue(Config.自定义物品内容三, out var value44))
                        {
                            break;
                        }
                        byte b67 = FindEmptyInventoryIndex();
                        Character.Inventory[b67] = new ItemInfo(value44, Character, 1, b67, 1);
                        Character.Inventory[b67].Dura.V = Config.自定义物品数量三;
                        Character.Enqueue(new SyncItemPacket
                        {
                            Description = Character.Inventory[b67].ToArray()
                        });
                        ConsumeItem(1, v);
                        break;
                    }
                case "自定义物品4":
                    {
                        if (!GameItem.DataSheetByName.TryGetValue(Config.自定义物品内容四, out var value35))
                        {
                            break;
                        }
                        byte b63 = FindEmptyInventoryIndex();
                        Character.Inventory[b63] = new ItemInfo(value35, Character, 1, b63, 1);
                        Character.Inventory[b63].Dura.V = Config.自定义物品数量四;
                        Character.Enqueue(new SyncItemPacket
                        {
                            Description = Character.Inventory[b63].ToArray()
                        });
                        ConsumeItem(1, v);
                        break;
                    }
                case "自定义物品5":
                    {
                        if (!GameItem.DataSheetByName.TryGetValue(Config.自定义物品内容五, out var value32))
                        {
                            break;
                        }
                        byte b57 = FindEmptyInventoryIndex();
                        Character.Inventory[b57] = new ItemInfo(value32, Character, 1, b57, 1);
                        Character.Inventory[b57].Dura.V = Config.自定义物品数量五;
                        Character.Enqueue(new SyncItemPacket
                        {
                            Description = Character.Inventory[b57].ToArray()
                        });
                        ConsumeItem(1, v);
                        break;
                    }
                case "自定义称号1":
                    AddTitle(Config.自定义称号内容一);
                    ConsumeItem(1, v);
                    break;
                case "自定义称号2":
                    AddTitle(Config.自定义称号内容二);
                    ConsumeItem(1, v);
                    break;
                case "自定义称号3":
                    AddTitle(Config.自定义称号内容三);
                    ConsumeItem(1, v);
                    break;
                case "自定义称号4":
                    AddTitle(Config.自定义称号内容四);
                    ConsumeItem(1, v);
                    break;
                case "自定义称号5":
                    AddTitle(Config.自定义称号内容五);
                    ConsumeItem(1, v);
                    break;
                case "魔龙城回城卷包":
                    if (Character.CurrentMap.V == 179)
                    {
                        break;
                    }
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("魔龙城回城卷", out var value25))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b47 = 0;
                        byte b48 = 0;
                        while (b47 < InventorySize && b48 < 6)
                        {
                            if (!Inventory.ContainsKey(b47))
                            {
                                Inventory[b47] = new ItemInfo(value25, Character, 1, b47, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b47].ToArray()
                                });
                                b48 = (byte)(b48 + 1);
                            }
                            b47 = (byte)(b47 + 1);
                        }
                    }
                    break;
                case "盟重回城卷包":
                    if (Character.CurrentMap.V == 179)
                    {
                        break;
                    }
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("盟重回城卷", out var value13))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b23 = 0;
                        byte b24 = 0;
                        while (b23 < InventorySize && b24 < 6)
                        {
                            if (!Inventory.ContainsKey(b23))
                            {
                                Inventory[b23] = new ItemInfo(value13, Character, 1, b23, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b23].ToArray()
                                });
                                b24 = (byte)(b24 + 1);
                            }
                            b23 = (byte)(b23 + 1);
                        }
                    }
                    break;
                case "比奇回城卷":
                    if (Character.CurrentMap.V != 179)
                    {
                        ConsumeItem(1, v);
                        Teleport((CurrentMap.MapID == 143) ? CurrentMap : MapManager.GetMap(143), AreaType.Resurrection);
                    }
                    break;
                case "盟重回城卷":
                    if (Character.CurrentMap.V != 179)
                    {
                        ConsumeItem(1, v);
                        Teleport((CurrentMap.MapID == 147) ? CurrentMap : MapManager.GetMap(147), AreaType.Resurrection);
                    }
                    break;
                case "随机传送卷包":
                    if (Character.CurrentMap.V == 179)
                    {
                        break;
                    }
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("随机传送卷", out var value116))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b157 = 0;
                        byte b158 = 0;
                        while (b157 < InventorySize && b158 < 6)
                        {
                            if (!Inventory.ContainsKey(b157))
                            {
                                Inventory[b157] = new ItemInfo(value116, Character, 1, b157, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b157].ToArray()
                                });
                                b158 = (byte)(b158 + 1);
                            }
                            b157 = (byte)(b157 + 1);
                        }
                    }
                    break;
                case "RandomTeleportScroll":
                    if (Character.CurrentMap.V != 179)
                    {
                        Point point2 = CurrentMap.GetRandomTeleportPosition(CurrentPosition);
                        if (point2 != default(Point))
                        {
                            ConsumeItem(1, v);
                            Teleport(CurrentMap, AreaType.Unknown, point2);
                        }
                        else
                        {
                            Enqueue(new GameErrorMessagePacket { ErrorCode = 776 });
                        }
                    }
                    break;
                case "沙巴克回城卷包":
                    if (Character.CurrentMap.V == 179)
                    {
                        break;
                    }
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("沙巴克回城卷", out var value111))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b149 = 0;
                        byte b150 = 0;
                        while (b149 < InventorySize && b150 < 6)
                        {
                            if (!Inventory.ContainsKey(b149))
                            {
                                Inventory[b149] = new ItemInfo(value111, Character, 1, b149, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b149].ToArray()
                                });
                                b150 = (byte)(b150 + 1);
                            }
                            b149 = (byte)(b149 + 1);
                        }
                    }
                    break;
                case "盟重回城石":
                    if (Character.CurrentMap.V != 179)
                    {
                        ConsumeItem(1, v);
                        Teleport((CurrentMap.MapID == 147) ? CurrentMap : MapManager.GetMap(147), AreaType.Resurrection);
                    }
                    break;
                case "比奇回城石":
                    if (Character.CurrentMap.V != 179)
                    {
                        ConsumeItem(1, v);
                        Teleport((CurrentMap.MapID == 143) ? CurrentMap : MapManager.GetMap(143), AreaType.Resurrection);
                    }
                    break;
                case "镇魔古城回城卷包":
                    if (Character.CurrentMap.V == 179)
                    {
                        break;
                    }
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("镇魔古城回城卷", out var value102))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b137 = 0;
                        byte b138 = 0;
                        while (b137 < InventorySize && b138 < 6)
                        {
                            if (!Inventory.ContainsKey(b137))
                            {
                                Inventory[b137] = new ItemInfo(value102, Character, 1, b137, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b137].ToArray()
                                });
                                b138 = (byte)(b138 + 1);
                            }
                            b137 = (byte)(b137 + 1);
                        }
                    }
                    break;
                case "比奇回城卷包":
                    if (Character.CurrentMap.V == 179)
                    {
                        break;
                    }
                    if (InventorySize - Inventory.Count < 5)
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1793
                        });
                    }
                    else
                    {
                        if (!GameItem.DataSheetByName.TryGetValue("比奇回城卷", out var value79))
                        {
                            break;
                        }
                        if (v.GroupID > 0 && v.GroupCooling > 0)
                        {
                            Cooldowns[v.GroupID | 0] = SEngine.CurrentTime.AddMilliseconds(v.GroupCooling);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.GroupID | 0),
                                冷却时间 = v.GroupCooling
                            });
                        }
                        if (v.Cooldown > 0)
                        {
                            Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                            Enqueue(new 添加技能冷却
                            {
                                冷却编号 = (v.ID | 0x2000000),
                                冷却时间 = v.Cooldown
                            });
                        }
                        ConsumeItem(1, v);
                        byte b111 = 0;
                        byte b112 = 0;
                        while (b111 < InventorySize && b112 < 6)
                        {
                            if (!Inventory.ContainsKey(b111))
                            {
                                Inventory[b111] = new ItemInfo(value79, Character, 1, b111, 1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b111].ToArray()
                                });
                                b112 = (byte)(b112 + 1);
                            }
                            b111 = (byte)(b111 + 1);
                        }
                    }
                    break;
                case "RandomTeleportStone(L)":
                case "RandomTeleportStone":
                    if (Character.CurrentMap.V != 179 && (Character.CurrentMap.V != 152 || Config.沙巴克禁止随机 != 1))
                    {
                        Point point = CurrentMap.GetRandomTeleportPosition(CurrentPosition);
                        if (point != default(Point))
                        {
                            ConsumeItem(1, v);
                            Teleport(CurrentMap, AreaType.Unknown, point);
                        }
                        else
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 776
                            });
                        }
                    }
                    break;
                case "冥想丹":
                    ConsumeItem(1, v);
                    ExperienceRate += Config.冥想丹自定义经验;
                    break;
                case "祝福油":
                    {
                        if (!Equipment.TryGetValue(0, out var v7))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1927
                            });
                            break;
                        }
                        if (v7.Luck.V >= 7)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1843
                            });
                            break;
                        }
                        ConsumeItem(1, v);
                        int num5 = 0;
                        sbyte v8 = v7.Luck.V;
                        if (1 == 0)
                        {
                        }
                        int num3 = v8 switch
                        {
                            0 => Config.祝福油幸运1机率,
                            1 => Config.祝福油幸运2机率,
                            2 => Config.祝福油幸运3机率,
                            3 => Config.祝福油幸运4机率,
                            4 => Config.祝福油幸运5机率,
                            5 => Config.祝福油幸运6机率,
                            6 => Config.祝福油幸运7机率,
                            _ => 80,
                        };
                        if (1 == 0)
                        {
                        }
                        num5 = num3;
                        int num6 = SEngine.Random.Next(100);
                        if (num6 < num5)
                        {
                            v7.Luck.V++;
                            Enqueue(new SyncItemPacket
                            {
                                Description = v7.ToArray()
                            });
                            Enqueue(new 武器幸运变化
                            {
                                幸运变化 = 1
                            });
                            BonusStats[v7] = v7.Stats;
                            RefreshStats();
                            if (v7.Luck.V >= 5)
                            {
                                NetworkManager.SendAnnouncement($"[{Name}] 成功将 [{v7.Name}] 升到幸运 {v7.Luck.V} 级.");
                            }
                        }
                        else if (num6 >= 95 && v7.Luck.V > -9)
                        {
                            v7.Luck.V--;
                            Enqueue(new SyncItemPacket
                            {
                                Description = v7.ToArray()
                            });
                            Enqueue(new 武器幸运变化
                            {
                                幸运变化 = -1
                            });
                            BonusStats[v7] = v7.Stats;
                            RefreshStats();
                        }
                        else
                        {
                            Enqueue(new 武器幸运变化
                            {
                                幸运变化 = 0
                            });
                        }
                        break;
                    }
                case "高级祝福油":
                    {
                        if (!Equipment.TryGetValue(0, out var v5))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1927
                            });
                            break;
                        }
                        if (v5.Luck.V >= 7)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1843
                            });
                            break;
                        }
                        ConsumeItem(1, v);
                        int num2 = 0;
                        sbyte v6 = v5.Luck.V;
                        if (1 == 0)
                        {
                        }
                        int num3 = v6 switch
                        {
                            0 => Config.高级祝福油幸运机率,
                            1 => Config.高级祝福油幸运机率,
                            2 => Config.高级祝福油幸运机率,
                            3 => Config.高级祝福油幸运机率,
                            4 => Config.高级祝福油幸运机率,
                            5 => Config.高级祝福油幸运机率,
                            6 => Config.高级祝福油幸运机率,
                            _ => Config.高级祝福油幸运机率,
                        };
                        if (1 == 0)
                        {
                        }
                        num2 = num3;
                        int num4 = SEngine.Random.Next(100);
                        if (num4 < num2)
                        {
                            v5.Luck.V++;
                            Enqueue(new SyncItemPacket
                            {
                                Description = v5.ToArray()
                            });
                            Enqueue(new 武器幸运变化
                            {
                                幸运变化 = 1
                            });
                            BonusStats[v5] = v5.Stats;
                            RefreshStats();
                            if (v5.Luck.V >= 5)
                            {
                                NetworkManager.SendAnnouncement($"[{Name}] 成功将 [{v5.Name}] 升到幸运 {v5.Luck.V} 级.");
                            }
                        }
                        else if (num4 >= 95 && v5.Luck.V > -9)
                        {
                            v5.Luck.V--;
                            Enqueue(new SyncItemPacket
                            {
                                Description = v5.ToArray()
                            });
                            Enqueue(new 武器幸运变化
                            {
                                幸运变化 = -1
                            });
                            BonusStats[v5] = v5.Stats;
                            RefreshStats();
                        }
                        else
                        {
                            Enqueue(new 武器幸运变化
                            {
                                幸运变化 = 0
                            });
                        }
                        break;
                    }
                case "铭文位切换神符":
                    {
                        if (!Equipment.TryGetValue(0, out var v4))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1927
                            });
                            break;
                        }
                        if (!v4.双铭文栏.V)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1926
                            });
                            break;
                        }
                        if (v4.FirstInscription != null)
                        {
                            玩家装卸铭文(v4.FirstInscription.SkillID, 0);
                        }
                        if (v4.SecondInscription != null)
                        {
                            玩家装卸铭文(v4.SecondInscription.SkillID, 0);
                        }
                        v4.当前铭栏.V = (byte)((v4.当前铭栏.V == 0) ? 1u : 0u);
                        if (v4.FirstInscription != null)
                        {
                            玩家装卸铭文(v4.FirstInscription.SkillID, v4.FirstInscription.ID);
                        }
                        if (v4.SecondInscription != null)
                        {
                            玩家装卸铭文(v4.SecondInscription.SkillID, v4.SecondInscription.ID);
                        }
                        Enqueue(new SyncItemPacket
                        {
                            Description = v4.ToArray()
                        });
                        Enqueue(new 双铭文位切换
                        {
                            当前栏位 = v4.当前铭栏.V,
                            第一铭文 = (v4.FirstInscription?.Index ?? 0),
                            第二铭文 = (v4.SecondInscription?.Index ?? 0)
                        });
                        Cooldowns[v.ID | 0x2000000] = SEngine.CurrentTime.AddMilliseconds(v.Cooldown);
                        Enqueue(new 添加技能冷却
                        {
                            冷却编号 = (v.ID | 0x2000000),
                            冷却时间 = v.Cooldown
                        });
                        ConsumeItem(1, v);
                        Enqueue(new 双铭文位切换
                        {
                            当前栏位 = v4.当前铭栏.V,
                            第一铭文 = (v4.FirstInscription?.Index ?? 0),
                            第二铭文 = (v4.SecondInscription?.Index ?? 0)
                        });
                        break;
                    }
                case "强化战具礼盒":
                    {
                        byte b17 = FindEmptyInventoryIndex();
                        if (b17 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value10 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("灵疗石", out value10);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("幻魔石", out value10);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("圣灵符", out value10);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("狂血令", out value10);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("射手箭袋", out value10);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙晶石", out value10);
                        }
                        if (value10 != null && value10 is EquipmentItem 模板2)
                        {
                            ConsumeItem(1, v);
                            Inventory[b17] = new EquipmentInfo(模板2, Character, grid, b17);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b17].ToArray()
                            });
                        }
                        break;
                    }
                case "白泽·幼":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(1);
                    }
                    break;
                case "追风":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(2);
                    }
                    break;
                case "玛法之魂":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(3);
                    }
                    break;
                case "驯鹿":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(4);
                    }
                    break;
                case "琉璃鹿":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(5);
                    }
                    break;
                case "剑齿虎":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(6);
                    }
                    break;
                case "奔雷兽":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(7);
                    }
                    break;
                case "白泽":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(8);
                    }
                    break;
                case "踏风隼":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(9);
                    }
                    break;
                case "覆甲獠牙":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(10);
                    }
                    break;
                case "龙髯":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(11);
                    }
                    break;
                case "血牙":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(12);
                    }
                    break;
                case "长牙":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(13);
                    }
                    break;
                case "偃甲灵鼠":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(14);
                    }
                    break;
                case "机关木鼠":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(15);
                    }
                    break;
                case "熔火龙蜥":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(16);
                    }
                    break;
                case "牛魔":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(18);
                    }
                    break;
                case "三尾":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(19);
                    }
                    break;
                case "玄虎":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(20);
                    }
                    break;
                case "踏云":
                    if (ConsumeItem(1, v))
                    {
                        AddMount(21);
                    }
                    break;
                case "初级红名符":
                    if (ConsumeItem(1, v))
                    {
                        Character.PKPoint -= 10;
                    }
                    break;
                case "中级红名符":
                    if (ConsumeItem(1, v))
                    {
                        Character.PKPoint -= 50;
                    }
                    break;
                case "高级红名符":
                    if (ConsumeItem(1, v))
                    {
                        Character.PKPoint -= 200;
                    }
                    break;
                case "沙城每日宝箱":
                    {
                        if (Config.CurrentVersion < 2)
                        {
                            break;
                        }
                        byte b119 = FindEmptyInventoryIndex();
                        if (b119 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        int num8 = SEngine.Random.Next(100);
                        GameItem value93;
                        if (num8 < Config.随机宝箱一几率1)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱一物品1, out var value86))
                            {
                                ConsumeItem(1, v);
                                Inventory[b119] = new ItemInfo(value86, Character, grid, b119, Config.随机宝箱一数量1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b119].ToArray()
                                });
                            }
                        }
                        else if (num8 < Config.随机宝箱一几率2)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱一物品2, out var value87))
                            {
                                ConsumeItem(1, v);
                                Inventory[b119] = new ItemInfo(value87, Character, grid, b119, Config.随机宝箱一数量2);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b119].ToArray()
                                });
                            }
                        }
                        else if (num8 < Config.随机宝箱一几率3)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱一物品3, out var value88))
                            {
                                ConsumeItem(1, v);
                                Inventory[b119] = new ItemInfo(value88, Character, grid, b119, Config.随机宝箱一数量3);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b119].ToArray()
                                });
                            }
                        }
                        else if (num8 < Config.随机宝箱一几率4)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱一物品4, out var value89))
                            {
                                ConsumeItem(1, v);
                                Inventory[b119] = new ItemInfo(value89, Character, grid, b119, Config.随机宝箱一数量4);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b119].ToArray()
                                });
                            }
                        }
                        else if (num8 < Config.随机宝箱一几率5)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱一物品5, out var value90))
                            {
                                ConsumeItem(1, v);
                                Inventory[b119] = new ItemInfo(value90, Character, grid, b119, Config.随机宝箱一数量5);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b119].ToArray()
                                });
                            }
                        }
                        else if (num8 < Config.随机宝箱一几率6)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱一物品6, out var value91))
                            {
                                ConsumeItem(1, v);
                                Inventory[b119] = new ItemInfo(value91, Character, grid, b119, Config.随机宝箱一数量6);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b119].ToArray()
                                });
                            }
                        }
                        else if (num8 < Config.随机宝箱一几率7)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱一物品7, out var value92))
                            {
                                ConsumeItem(1, v);
                                Inventory[b119] = new ItemInfo(value92, Character, grid, b119, Config.随机宝箱一数量7);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b119].ToArray()
                                });
                            }
                        }
                        else if (num8 < Config.随机宝箱一几率8 && GameItem.DataSheet.TryGetValue(Config.随机宝箱一物品8, out value93))
                        {
                            ConsumeItem(1, v);
                            Inventory[b119] = new ItemInfo(value93, Character, grid, b119, Config.随机宝箱一数量8);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b119].ToArray()
                            });
                        }
                        break;
                    }
                case "随机宝箱1":
                    {
                        if (Config.CurrentVersion < 2)
                        {
                            break;
                        }
                        byte b85 = FindEmptyInventoryIndex();
                        if (b85 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        int num7 = SEngine.Random.Next(100);
                        GameItem value63;
                        if (num7 < Config.随机宝箱二几率1)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱二物品1, out var value56))
                            {
                                ConsumeItem(1, v);
                                Inventory[b85] = new ItemInfo(value56, Character, grid, b85, Config.随机宝箱二数量1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b85].ToArray()
                                });
                            }
                        }
                        else if (num7 < Config.随机宝箱二几率2)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱二物品2, out var value57))
                            {
                                ConsumeItem(1, v);
                                Inventory[b85] = new ItemInfo(value57, Character, grid, b85, Config.随机宝箱二数量2);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b85].ToArray()
                                });
                            }
                        }
                        else if (num7 < Config.随机宝箱二几率3)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱二物品3, out var value58))
                            {
                                ConsumeItem(1, v);
                                Inventory[b85] = new ItemInfo(value58, Character, grid, b85, Config.随机宝箱二数量3);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b85].ToArray()
                                });
                            }
                        }
                        else if (num7 < Config.随机宝箱二几率4)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱二物品4, out var value59))
                            {
                                ConsumeItem(1, v);
                                Inventory[b85] = new ItemInfo(value59, Character, grid, b85, Config.随机宝箱二数量4);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b85].ToArray()
                                });
                            }
                        }
                        else if (num7 < Config.随机宝箱二几率5)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱二物品5, out var value60))
                            {
                                ConsumeItem(1, v);
                                Inventory[b85] = new ItemInfo(value60, Character, grid, b85, Config.随机宝箱二数量5);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b85].ToArray()
                                });
                            }
                        }
                        else if (num7 < Config.随机宝箱二几率6)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱二物品6, out var value61))
                            {
                                ConsumeItem(1, v);
                                Inventory[b85] = new ItemInfo(value61, Character, grid, b85, Config.随机宝箱二数量6);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b85].ToArray()
                                });
                            }
                        }
                        else if (num7 < Config.随机宝箱二几率7)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱二物品7, out var value62))
                            {
                                ConsumeItem(1, v);
                                Inventory[b85] = new ItemInfo(value62, Character, grid, b85, Config.随机宝箱二数量7);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b85].ToArray()
                                });
                            }
                        }
                        else if (num7 < Config.随机宝箱二几率8 && GameItem.DataSheet.TryGetValue(Config.随机宝箱二物品8, out value63))
                        {
                            ConsumeItem(1, v);
                            Inventory[b85] = new ItemInfo(value63, Character, grid, b85, Config.随机宝箱二数量8);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b85].ToArray()
                            });
                        }
                        break;
                    }
                case "随机宝箱2":
                    {
                        if (Config.CurrentVersion < 2)
                        {
                            break;
                        }
                        byte b65 = FindEmptyInventoryIndex();
                        if (b65 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        int num = SEngine.Random.Next(100);
                        GameItem value43;
                        if (num < Config.随机宝箱三几率1)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱三物品1, out var value36))
                            {
                                ConsumeItem(1, v);
                                Inventory[b65] = new ItemInfo(value36, Character, grid, b65, Config.随机宝箱三数量1);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b65].ToArray()
                                });
                            }
                        }
                        else if (num < Config.随机宝箱三几率2)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱三物品2, out var value37))
                            {
                                ConsumeItem(1, v);
                                Inventory[b65] = new ItemInfo(value37, Character, grid, b65, Config.随机宝箱三数量2);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b65].ToArray()
                                });
                            }
                        }
                        else if (num < Config.随机宝箱三几率3)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱三物品3, out var value38))
                            {
                                ConsumeItem(1, v);
                                Inventory[b65] = new ItemInfo(value38, Character, grid, b65, Config.随机宝箱三数量3);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b65].ToArray()
                                });
                            }
                        }
                        else if (num < Config.随机宝箱三几率4)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱三物品4, out var value39))
                            {
                                ConsumeItem(1, v);
                                Inventory[b65] = new ItemInfo(value39, Character, grid, b65, Config.随机宝箱三数量4);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b65].ToArray()
                                });
                            }
                        }
                        else if (num < Config.随机宝箱三几率5)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱三物品5, out var value40))
                            {
                                ConsumeItem(1, v);
                                Inventory[b65] = new ItemInfo(value40, Character, grid, b65, Config.随机宝箱三数量5);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b65].ToArray()
                                });
                            }
                        }
                        else if (num < Config.随机宝箱三几率6)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱三物品6, out var value41))
                            {
                                ConsumeItem(1, v);
                                Inventory[b65] = new ItemInfo(value41, Character, grid, b65, Config.随机宝箱三数量6);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b65].ToArray()
                                });
                            }
                        }
                        else if (num < Config.随机宝箱三几率7)
                        {
                            if (GameItem.DataSheet.TryGetValue(Config.随机宝箱三物品7, out var value42))
                            {
                                ConsumeItem(1, v);
                                Inventory[b65] = new ItemInfo(value42, Character, grid, b65, Config.随机宝箱三数量7);
                                Enqueue(new SyncItemPacket
                                {
                                    Description = Inventory[b65].ToArray()
                                });
                            }
                        }
                        else if (num < Config.随机宝箱三几率8 && GameItem.DataSheet.TryGetValue(Config.随机宝箱三物品8, out value43))
                        {
                            ConsumeItem(1, v);
                            Inventory[b65] = new ItemInfo(value43, Character, grid, b65, Config.随机宝箱三数量8);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b65].ToArray()
                            });
                        }
                        break;
                    }
                case "名俊铭文石礼包":
                    {
                        byte b55 = FindEmptyInventoryIndex();
                        if (b55 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value30 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("战士铭文石", out value30);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("法师铭文石", out value30);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("道士铭文石", out value30);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("刺客铭文石", out value30);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("弓手铭文石", out value30);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙枪铭文石", out value30);
                        }
                        if (value30 != null)
                        {
                            ConsumeItem(1, v);
                            Inventory[b55] = new ItemInfo(value30, Character, grid, b55, 5);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b55].ToArray()
                            });
                        }
                        break;
                    }
                case "名俊灵石宝盒":
                    {
                        if (!ConsumeItem(1, v))
                        {
                            break;
                        }
                        byte b49 = FindEmptyInventoryIndex();
                        if (b49 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value26 = null;
                        switch (SEngine.Random.Next(8))
                        {
                            case 0:
                                GameItem.DataSheetByName.TryGetValue("驭朱灵石1级", out value26);
                                break;
                            case 1:
                                GameItem.DataSheetByName.TryGetValue("命朱灵石1级", out value26);
                                break;
                            case 2:
                                GameItem.DataSheetByName.TryGetValue("守阳灵石1级", out value26);
                                break;
                            case 3:
                                GameItem.DataSheetByName.TryGetValue("蔚蓝灵石1级", out value26);
                                break;
                            case 4:
                                GameItem.DataSheetByName.TryGetValue("精绿灵石1级", out value26);
                                break;
                            case 5:
                                GameItem.DataSheetByName.TryGetValue("纯紫灵石1级", out value26);
                                break;
                            case 6:
                                GameItem.DataSheetByName.TryGetValue("深灰灵石1级", out value26);
                                break;
                            case 7:
                                GameItem.DataSheetByName.TryGetValue("橙黄灵石1级", out value26);
                                break;
                        }
                        if (value26 != null)
                        {
                            Inventory[b49] = new ItemInfo(value26, Character, grid, b49, 1);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b49].ToArray()
                            });
                        }
                        break;
                    }
                case "豪杰铭文石礼包":
                    {
                        byte b21 = FindEmptyInventoryIndex();
                        if (b21 == byte.MaxValue)
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1793
                            });
                            break;
                        }
                        GameItem value12 = null;
                        if (Job == GameObjectRace.Warrior)
                        {
                            GameItem.DataSheetByName.TryGetValue("战士铭文石", out value12);
                        }
                        else if (Job == GameObjectRace.Wizard)
                        {
                            GameItem.DataSheetByName.TryGetValue("法师铭文石", out value12);
                        }
                        else if (Job == GameObjectRace.Taoist)
                        {
                            GameItem.DataSheetByName.TryGetValue("道士铭文石", out value12);
                        }
                        else if (Job == GameObjectRace.Assassin)
                        {
                            GameItem.DataSheetByName.TryGetValue("刺客铭文石", out value12);
                        }
                        else if (Job == GameObjectRace.Archer)
                        {
                            GameItem.DataSheetByName.TryGetValue("弓手铭文石", out value12);
                        }
                        else if (Job == GameObjectRace.DragonLance)
                        {
                            GameItem.DataSheetByName.TryGetValue("龙枪铭文石", out value12);
                        }
                        if (value12 != null)
                        {
                            ConsumeItem(1, v);
                            Inventory[b21] = new ItemInfo(value12, Character, grid, b21, 10);
                            Enqueue(new SyncItemPacket
                            {
                                Description = Inventory[b21].ToArray()
                            });
                        }
                        break;
                    }
                case "元宝袋(1)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += Config.元宝袋新创数量1;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
                case "元宝袋(2)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += Config.元宝袋新创数量2;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
                case "元宝袋(3)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += Config.元宝袋新创数量3;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
                case "元宝袋(4)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += Config.元宝袋新创数量4;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
                case "元宝袋(5)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += Config.元宝袋新创数量5;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
                case "元宝袋(大)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += 10000;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
                case "元宝袋(超)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += 100000;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
                case "元宝袋(中)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += 1000;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
                case "元宝袋(小)":
                    if (ConsumeItem(1, v))
                    {
                        Ingot += 100;
                        Enqueue(new SyncIngotsPacket
                        {
                            Amount = Ingot
                        });
                    }
                    break;
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1877
            });
        }
    }

    public void UserEatItem(byte grid, byte location)
    {
        if (!Dead && StallState <= 0 && TradeState < 3)
        {
            EquipmentInfo 装备数据 = null;
            if (grid == 0 && Equipment.TryGetValue(location, out var v))
            {
                装备数据 = v;
            }
            if (grid == 1 && Inventory.TryGetValue(location, out var v2) && v2 is EquipmentInfo 装备数据2)
            {
                装备数据 = 装备数据2;
            }
            if (装备数据 == null)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1802
                });
                return;
            }
            if (!装备数据.CanRepair)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1814
                });
                return;
            }
            if (装备数据.MaxDura.V >= 装备数据.默认持久 * 2)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1953
                });
                return;
            }
            if (!FindItem(110012, out var 物品))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1802
                });
                return;
            }
            ConsumeItem(1, 物品);
            if (Compute.CalculateProbability(1f - (float)装备数据.MaxDura.V * 0.5f / (float)装备数据.默认持久))
            {
                装备数据.MaxDura.V += 1000;
                Enqueue(new 修复最大持久
                {
                    修复失败 = false
                });
                Enqueue(new SyncItemPacket
                {
                    Description = 装备数据.ToArray()
                });
            }
            else
            {
                Enqueue(new 修复最大持久
                {
                    修复失败 = true
                });
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1877
            });
        }
    }

    public void UserCraftItem(int id)
    {
        ItemCrafting value;
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            NetworkManager.SendMessage(this, "You can't craft in your current state.");
        }
        else if (ItemCrafting.DataSheet.TryGetValue(id, out value) && Config.CurrentVersion >= 2)
        {
            if (!(Config.合成模块控件 == "CXZQWEZZADDRX") && Config.CurrentVersion < 3)
            {
                return;
            }
            if (value.GoldCost <= Gold)
            {
                Dictionary<int, int> dictionary = new Dictionary<int, int>();
                Dictionary<List<ItemInfo>, int> dictionary2 = new Dictionary<List<ItemInfo>, int>();
                dictionary[value.MaterialItem1ID] = value.MaterialItem1Quantity;
                dictionary[value.MaterialItem2ID] = value.MaterialItem2Quantity;
                dictionary[value.MaterialItem3ID] = value.MaterialItem3Quantity;
                dictionary[value.MaterialItem4ID] = value.MaterialItem4Quantity;
                dictionary[value.MaterialItem5ID] = value.MaterialItem5Quantity;
                dictionary[value.MaterialItem6ID] = value.MaterialItem6Quantity;
                foreach (KeyValuePair<int, int> item in dictionary)
                {
                    if (item.Key != 0)
                    {
                        if (!FindItem(item.Value, item.Key, out var 物品列表))
                        {
                            NetworkManager.SendMessage(this, "你的合成材料不足,合成失败");
                            return;
                        }
                        dictionary2.Add(物品列表, item.Value);
                    }
                }
                foreach (KeyValuePair<List<ItemInfo>, int> item2 in dictionary2)
                {
                    ConsumeItem(item2.Value, item2.Key);
                }
                Gold -= value.GoldCost;
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
                AddItemByID(value.MakeItemID);
                if (value.Broadcast > 0 && GameItem.DataSheet.TryGetValue(value.MakeItemID, out var value2))
                {
                    NetworkManager.SendAnnouncement("<font color='#33FF00'>[" + Name + "]</font> 通过努力终于合成了 <font color='#33FFFF'>[" + value2.Name + "]</font>");
                }
            }
            else
            {
                NetworkManager.SendMessage(this, "你的金币不足,合成失败");
            }
        }
        else
        {
            NetworkManager.SendMessage(this, "很遗憾您用的是免费端,可加QQ群：634564006(不可使用)");
        }
    }

    private void AddItemByID(int id, int quantity = 1)
    {
        byte b = 0;
        byte b2 = 0;
        if (!GameItem.DataSheet.TryGetValue(id, out var item))
            return;

        while (b < InventorySize && b2 < quantity)
        {
            if (!Inventory.ContainsKey(b))
            {
                Inventory[b] = new ItemInfo(item, Character, 1, b, 1);
                Enqueue(new SyncItemPacket
                {
                    Description = Inventory[b].ToArray()
                });
                b2 = (byte)(b2 + 1);
            }
            b = (byte)(b + 1);
        }
    }

    private void AddItemByName(string iname, int durability, int quantity = 1)
    {
        byte location = 0;
        byte b2 = 0;
        if (!GameItem.DataSheetByName.TryGetValue(iname, out var item))
            return;

        while (location < InventorySize && b2 < quantity)
        {
            if (!Inventory.ContainsKey(location))
            {
                Inventory[location] = new ItemInfo(item, Character, 1, location, durability);
                Enqueue(new SyncItemPacket
                {
                    Description = Inventory[location].ToArray()
                });
                b2 = (byte)(b2 + 1);
            }
            location = (byte)(location + 1);
        }
    }

    public void UserSellItem(byte grid, byte location, ushort quantity)
    {
        if (!Dead && StallState <= 0 && TradeState < 3 && CurrentNPC != null && CurrentMap == CurrentNPC.CurrentMap && GetDistance(CurrentNPC) <= 12 && CurrentStoreID != 0 && quantity > 0 && GameStore.DataSheet.TryGetValue(CurrentStoreID, out var value))
        {
            ItemInfo v = null;
            if (grid == 1)
            {
                Inventory.TryGetValue(location, out v);
            }
            if (v != null && !v.IsBound && v.StoreType != 0 && value.StoreType == v.StoreType)
            {
                Inventory.Remove(location);
                value.SellItem(v);
                Gold += v.SalePrice;
                Enqueue(new DeleteItemPacket
                {
                    Grid = grid,
                    Position = location
                });
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
            }
        }
    }

    public void UserBuyItem(int storeId, int location, ushort quantity)
    {
        if (Dead || StallState > 0 || TradeState >= 3 || 
            CurrentNPC == null || CurrentMap != CurrentNPC.CurrentMap || GetDistance(CurrentNPC) > 12 || CurrentStoreID == 0 || 
            quantity <= 0 || CurrentStoreID != storeId || !GameStore.DataSheet.TryGetValue(CurrentStoreID, out var value) || 
            value.Products.Count <= location || !GameItem.DataSheet.TryGetValue(value.Products[location].ItemID, out var value2))
        {
            return;
        }
        int num = ((quantity == 1 || value2.PersistType != PersistentItemType.Stack) ? 1 : Math.Min(quantity, value2.MaxDura));
        GameStoreItem 游戏商品 = value.Products[location];
        int num2 = -1;
        byte b = 0;
        while (b < InventorySize)
        {
            if (Inventory.TryGetValue(b, out var v) && (value2.PersistType != PersistentItemType.Stack || value2.ID != v.ID || v.Dura.V + quantity > value2.MaxDura))
            {
                b = (byte)(b + 1);
                continue;
            }
            num2 = b;
            break;
        }
        if (num2 == -1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1793
            });
            return;
        }
        int num3 = 游戏商品.Price * num;
        if (游戏商品.CurrencyModel <= 19)
        {
            if (!Enum.TryParse<CurrencyType>(游戏商品.CurrencyModel.ToString(), out var result) || !Enum.IsDefined(typeof(CurrencyType), result))
            {
                return;
            }
            if (Character.Currencies[(CurrencyType)游戏商品.CurrencyModel] < num3)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 13057
                });
                return;
            }
            Character.Currencies[(CurrencyType)游戏商品.CurrencyModel] -= num3;
            Enqueue(new 同步货币数量
            {
                Description = 全部货币描述()
            });
        }
        else
        {
            if (!FindItem(num3, 游戏商品.CurrencyModel, out var 物品列表))
            {
                return;
            }
            ConsumeItem(num3, 物品列表);
        }
        if (Inventory.TryGetValue((byte)num2, out var v2))
        {
            v2.Dura.V += num;
            Enqueue(new SyncItemPacket
            {
                Description = v2.ToArray()
            });
            return;
        }
        if (value2 is EquipmentItem 模板)
        {
            Inventory[(byte)num2] = new EquipmentInfo(模板, Character, 1, (byte)num2);
        }
        else
        {
            int 持久 = 0;
            switch (value2.PersistType)
            {
                case PersistentItemType.Stack:
                    持久 = num;
                    break;
                case PersistentItemType.容器:
                    持久 = 0;
                    break;
                case PersistentItemType.消耗:
                case PersistentItemType.纯度:
                    持久 = value2.MaxDura;
                    break;
            }
            Inventory[(byte)num2] = new ItemInfo(value2, Character, 1, (byte)num2, 持久);
        }
        Enqueue(new SyncItemPacket
        {
            Description = Inventory[(byte)num2].ToArray()
        });
    }

    public void UserRepurchaseItem(byte location)
    {
        if (Dead || StallState > 0 || TradeState >= 3 || CurrentNPC == null || CurrentMap != CurrentNPC.CurrentMap || GetDistance(CurrentNPC) > 12 || CurrentStoreID == 0 || !GameStore.DataSheet.TryGetValue(CurrentStoreID, out var value) || SoldItems.Count <= location)
        {
            return;
        }
        ItemInfo 物品数据 = SoldItems[location];
        int num = -1;
        byte b = 0;
        while (b < InventorySize)
        {
            if (Inventory.TryGetValue(b, out var v) && (!物品数据.CanStack || 物品数据.ID != v.ID || v.Dura.V + 物品数据.Dura.V > v.MaxDura.V))
            {
                b = (byte)(b + 1);
                continue;
            }
            num = b;
            break;
        }
        if (num == -1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1793
            });
        }
        else if (Gold < 物品数据.SalePrice)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1821
            });
        }
        else if (value.BuyItem(物品数据))
        {
            Gold -= 物品数据.SalePrice;
            Enqueue(new 同步货币数量
            {
                Description = 全部货币描述()
            });
            if (Inventory.TryGetValue((byte)num, out var v2))
            {
                v2.Dura.V += 物品数据.Dura.V;
                value.BuyItem(物品数据);
                物品数据.Remove();
                Enqueue(new SyncItemPacket
                {
                    Description = v2.ToArray()
                });
            }
            else
            {
                Inventory[(byte)num] = 物品数据;
                物品数据.Location.V = (byte)num;
                物品数据.Grid.V = 1;
                Enqueue(new SyncItemPacket
                {
                    Description = Inventory[(byte)num].ToArray()
                });
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 12807
            });
        }
    }

    public void UserViewRepurchaseItemList()
    {
        if (Dead || StallState > 0 || TradeState >= 3 || CurrentNPC == null || CurrentMap != CurrentNPC.CurrentMap || GetDistance(CurrentNPC) > 12 || CurrentStoreID == 0 || !GameStore.DataSheet.TryGetValue(CurrentStoreID, out var value))
        {
            return;
        }

        SoldItems = value.AvailableItems.ToList();
        using var ms = new MemoryStream();
        using var writer = new BinaryWriter(ms);
        writer.Write((byte)SoldItems.Count);
        foreach (var item in SoldItems)
            writer.Write(item.ToArray());
  
        Enqueue(new 同步回购列表
        {
            Description = ms.ToArray()
        });
    }

    public void UserAddSpiritStone(byte 装备类型, byte location, byte slot, byte 灵石类型, byte 灵石位置)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        if (CurrentStoreNameID != "SoulEmbed")
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 没有打开界面"));
        }
        else if (装备类型 == 1 && 灵石类型 == 1)
        {
            if (Inventory.TryGetValue(location, out var v) && v is EquipmentInfo 装备数据)
            {
                if (!Inventory.TryGetValue(灵石位置, out var item))
                {
                    Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 没有找到灵石"));
                    return;
                }
                if (装备数据.SlotColor.Count <= slot)
                {
                    Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 装备孔位错误"));
                    return;
                }
                if (装备数据.镶嵌灵石.ContainsKey(slot))
                {
                    Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 已有镶嵌灵石"));
                    return;
                }
                if ((装备数据.SlotColor[slot] == EquipSlotColor.Green && item.Name.IndexOf("精绿灵石") == -1) || 
                    (装备数据.SlotColor[slot] == EquipSlotColor.Yellow && item.Name.IndexOf("守阳灵石") == -1) || 
                    (装备数据.SlotColor[slot] == EquipSlotColor.Blue && item.Name.IndexOf("蔚蓝灵石") == -1) || 
                    (装备数据.SlotColor[slot] == EquipSlotColor.Purple && item.Name.IndexOf("纯紫灵石") == -1) || 
                    (装备数据.SlotColor[slot] == EquipSlotColor.Grey && item.Name.IndexOf("深灰灵石") == -1) || 
                    (装备数据.SlotColor[slot] == EquipSlotColor.Orange && item.Name.IndexOf("橙黄灵石") == -1) || 
                    (装备数据.SlotColor[slot] == EquipSlotColor.Red && item.Name.IndexOf("驭朱灵石") == -1 &&
                    item.Name.IndexOf("命朱灵石") == -1))
                {
                    Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 指定灵石错误"));
                    return;
                }
                ConsumeItem(1, item);
                装备数据.镶嵌灵石[slot] = item.Info;
                Enqueue(new SyncItemPacket
                {
                    Description = 装备数据.ToArray()
                });
                Enqueue(new 成功镶嵌灵石
                {
                    灵石状态 = 1
                });
            }
            else
            {
                Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 没有找到装备"));
            }
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 不是角色背包"));
        }
    }

    public void UserRemoveSpiritStone(byte 装备类型, byte location, byte slot)
    {
        int num = 0;
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        ItemInfo v;
        if (CurrentStoreNameID != "SoulEmbed")
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 没有打开界面"));
        }
        else if (装备类型 != 1)
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 不是角色背包"));
        }
        else if (RemainingInventorySpace <= 0)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1793
            });
        }
        else if (Inventory.TryGetValue(location, out v) && v is EquipmentInfo 装备数据)
        {
            if (!装备数据.镶嵌灵石.TryGetValue(slot, out var v2))
            {
                Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 没有镶嵌灵石"));
                return;
            }
            if (v2.Name.IndexOf("1级") > 0)
            {
                int num2 = Gold;
                num = 100000;
                if (num2 < 100000)
                {
                    goto IL_038c;
                }
            }
            if (v2.Name.IndexOf("2级") > 0)
            {
                int num3 = Gold;
                num = 500000;
                if (num3 < 500000)
                {
                    goto IL_038c;
                }
            }
            if (v2.Name.IndexOf("3级") > 0)
            {
                int num4 = Gold;
                num = 2500000;
                if (num4 < 2500000)
                {
                    goto IL_038c;
                }
            }
            if (v2.Name.IndexOf("4级") > 0)
            {
                int num5 = Gold;
                num = 10000000;
                if (num5 < 10000000)
                {
                    goto IL_038c;
                }
            }
            if (v2.Name.IndexOf("5级") > 0)
            {
                int num6 = Gold;
                num = 25000000;
                if (num6 < 25000000)
                {
                    goto IL_038c;
                }
            }
            byte b = FindEmptyInventoryIndex();
            if (b == byte.MaxValue) return;

            Gold -= num;
            Enqueue(new 同步货币数量
            {
                Description = 全部货币描述()
            });
            装备数据.镶嵌灵石.Remove(slot);
            Enqueue(new SyncItemPacket
            {
                Description = 装备数据.ToArray()
            });
            Inventory[b] = new ItemInfo(v2, Character, 1, b, 1);
            Enqueue(new SyncItemPacket
            {
                Description = Inventory[b].ToArray()
            });
            Enqueue(new 成功取下灵石
            {
                灵石状态 = 1
            });
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 玩家镶嵌灵石.  错误: 没有找到装备"));
        }
        return;
    IL_038c:
        Enqueue(new GameErrorMessagePacket
        {
            ErrorCode = 1821
        });
    }

    public void 普通铭文洗练(byte 装备类型, byte 装备位置, int 物品编号)
    {
        EquipmentInfo 装备数据 = null;
        if (装备类型 == 0 && Equipment.TryGetValue(装备位置, out var v))
        {
            装备数据 = v;
        }
        if (装备类型 == 1 && Inventory.TryGetValue(装备位置, out var v2) && v2 is EquipmentInfo 装备数据2 && Config.禁止背包铭文洗练 == 0)
        {
            装备数据 = 装备数据2;
        }
        if (CurrentStoreNameID != "WeaponRune")
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 没有打开界面"));
        }
        else
        {
            if (Dead || StallState > 0 || TradeState >= 3)
            {
                return;
            }
            if (Gold < 10000)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1821
                });
                return;
            }
            if (装备数据 == null)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1802
                });
                return;
            }
            if (装备数据.Type != ItemType.Weapon)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 物品类型错误."));
                return;
            }
            if (物品编号 <= 0)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 材料编号错误."));
                return;
            }
            if (!FindItem(物品编号, out var 物品))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1835
                });
                return;
            }
            if (物品.Type != ItemType.普通铭文)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 材料类型错误."));
                return;
            }
            Gold -= 10000;
            Enqueue(new 同步货币数量
            {
                Description = 全部货币描述()
            });
            ConsumeItem(1, 物品);
            GameObjectRace 洗练职业 = GameObjectRace.Warrior;
            switch (物品编号)
            {
                case 21001:
                    洗练职业 = GameObjectRace.Warrior;
                    break;
                case 21002:
                    洗练职业 = GameObjectRace.Wizard;
                    break;
                case 21003:
                    洗练职业 = GameObjectRace.Taoist;
                    break;
                case 21004:
                    洗练职业 = GameObjectRace.Assassin;
                    break;
                case 21005:
                    洗练职业 = GameObjectRace.Archer;
                    break;
                case 21006:
                    洗练职业 = GameObjectRace.DragonLance;
                    break;
            }
            if (装备数据.FirstInscription == null)
            {
                装备数据.FirstInscription = InscriptionSkill.RandomRefinement(洗练职业);
            }
            else if (装备数据.传承材料 != 0 && (装备数据.双铭文点 += SEngine.Random.Next(1, 6)) >= 1200 && 装备数据.SecondInscription == null)
            {
                InscriptionSkill 铭文技能4;
                do
                {
                    InscriptionSkill 铭文技能2 = (装备数据.SecondInscription = InscriptionSkill.RandomRefinement(洗练职业));
                    InscriptionSkill 铭文技能3 = 铭文技能2;
                    铭文技能4 = 铭文技能3;
                }
                while (铭文技能4.SkillID == 装备数据.FirstInscription?.SkillID);
                if (Config.CurrentVersion >= 1)
                {
                    int num = SEngine.Random.Next(100);
                    if (Job == GameObjectRace.Wizard && Config.铭文法师保底开关 == 1)
                    {
                        if (Character.铭文洗练次数2.V == Config.铭文法师2挡1次数 && num <= Config.铭文法师2挡1概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文法师2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文法师2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V == Config.铭文法师2挡2次数 && num <= Config.铭文法师2挡2概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文法师2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文法师2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V >= Config.铭文法师2挡3次数 && 100 == Config.铭文法师2挡3概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文法师2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文法师2挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.Warrior && Config.铭文战士保底开关 == 1)
                    {
                        if (Character.铭文洗练次数2.V == Config.铭文战士2挡1次数 && num <= Config.铭文战士2挡1概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文战士2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文战士2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V == Config.铭文战士2挡2次数 && num <= Config.铭文战士2挡2概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文战士2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文战士2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V >= Config.铭文战士2挡3次数 && 100 == Config.铭文战士2挡3概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文战士2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文战士2挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.Taoist && Config.铭文道士保底开关 == 1)
                    {
                        if (Character.铭文洗练次数2.V == Config.铭文道士2挡1次数 && num <= Config.铭文道士2挡1概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文道士2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文道士2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V == Config.铭文道士2挡2次数 && num <= Config.铭文道士2挡2概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文道士2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文道士2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V >= Config.铭文道士2挡3次数 && 100 == Config.铭文道士2挡3概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文道士2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文道士2挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.Assassin && Config.铭文刺客保底开关 == 1)
                    {
                        if (Character.铭文洗练次数2.V == Config.铭文刺客2挡1次数 && num <= Config.铭文刺客2挡1概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文刺客2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文刺客2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V == Config.铭文刺客2挡2次数 && num <= Config.铭文刺客2挡2概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文刺客2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文刺客2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V >= Config.铭文刺客2挡3次数 && 100 == Config.铭文刺客2挡3概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文刺客2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文刺客2挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.Archer && Config.铭文弓手保底开关 == 1)
                    {
                        if (Character.铭文洗练次数2.V == Config.铭文弓手2挡1次数 && num <= Config.铭文弓手2挡1概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文弓手2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文弓手2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V == Config.铭文弓手2挡2次数 && num <= Config.铭文弓手2挡2概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文弓手2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文弓手2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V >= Config.铭文弓手2挡3次数 && 100 == Config.铭文弓手2挡3概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文弓手2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文弓手2挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.DragonLance && Config.铭文龙枪保底开关 == 1)
                    {
                        if (Character.铭文洗练次数2.V == Config.铭文龙枪2挡1次数 && num <= Config.铭文龙枪2挡1概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文龙枪2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文龙枪2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V == Config.铭文龙枪2挡2次数 && num <= Config.铭文龙枪2挡2概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文龙枪2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文龙枪2挡技能铭文;
                        }
                        if (Character.铭文洗练次数2.V >= Config.铭文龙枪2挡3次数 && 100 == Config.铭文龙枪2挡3概率)
                        {
                            Character.铭文洗练次数2.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文龙枪2挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文龙枪2挡技能铭文;
                        }
                    }
                }
                玩家装卸铭文(装备数据.SecondInscription.SkillID, 装备数据.SecondInscription.ID);
                Character.铭文洗练次数2.V++;
            }
            else
            {
                if (装备类型 == 0)
                {
                    玩家装卸铭文(装备数据.FirstInscription.SkillID, 0);
                }
                InscriptionSkill 铭文技能7;
                do
                {
                    InscriptionSkill 铭文技能2 = (装备数据.FirstInscription = InscriptionSkill.RandomRefinement(洗练职业));
                    InscriptionSkill 铭文技能6 = 铭文技能2;
                    铭文技能7 = 铭文技能6;
                }
                while (铭文技能7.SkillID == 装备数据.SecondInscription?.SkillID);
                if (Config.CurrentVersion >= 1)
                {
                    int num2 = SEngine.Random.Next(10000);
                    if (Job == GameObjectRace.Wizard && Config.铭文法师保底开关 == 1)
                    {
                        if (Character.铭文洗练次数1.V == Config.铭文法师1挡1次数 && num2 <= Config.铭文法师1挡1概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文法师1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文法师1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V == Config.铭文法师1挡2次数 && num2 <= Config.铭文法师1挡2概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文法师1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文法师1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V >= Config.铭文法师1挡3次数 && 100 == Config.铭文法师1挡3概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文法师1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文法师1挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.Warrior && Config.铭文战士保底开关 == 1)
                    {
                        if (Character.铭文洗练次数1.V == Config.铭文战士1挡1次数 && num2 <= Config.铭文战士1挡1概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文战士1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文战士1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V == Config.铭文战士1挡2次数 && num2 <= Config.铭文战士1挡2概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文战士1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文战士1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V >= Config.铭文战士1挡3次数 && 100 == Config.铭文战士1挡3概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文战士1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文战士1挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.Taoist && Config.铭文道士保底开关 == 1)
                    {
                        if (Character.铭文洗练次数1.V == Config.铭文道士1挡1次数 && num2 <= Config.铭文道士1挡1概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文道士1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文道士1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V == Config.铭文道士1挡2次数 && num2 <= Config.铭文道士1挡2概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文道士1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文道士1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V >= Config.铭文道士1挡3次数 && 100 == Config.铭文道士1挡3概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文道士1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文道士1挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.Assassin && Config.铭文刺客保底开关 == 1)
                    {
                        if (Character.铭文洗练次数1.V == Config.铭文刺客1挡1次数 && num2 <= Config.铭文刺客1挡1概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文刺客1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文刺客1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V == Config.铭文刺客1挡2次数 && num2 <= Config.铭文刺客1挡2概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文刺客1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文刺客1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V >= Config.铭文刺客1挡3次数 && 100 == Config.铭文刺客1挡3概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文刺客1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文刺客1挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.Archer && Config.铭文弓手保底开关 == 1)
                    {
                        if (Character.铭文洗练次数1.V == Config.铭文弓手1挡1次数 && num2 <= Config.铭文弓手1挡1概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文弓手1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文弓手1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V == Config.铭文弓手1挡2次数 && num2 <= Config.铭文弓手1挡2概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文弓手1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文弓手1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V >= Config.铭文弓手1挡3次数 && 100 == Config.铭文弓手1挡3概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文弓手1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文弓手1挡技能铭文;
                        }
                    }
                    if (Job == GameObjectRace.DragonLance && Config.铭文龙枪保底开关 == 1)
                    {
                        if (Character.铭文洗练次数1.V == Config.铭文龙枪1挡1次数 && num2 <= Config.铭文龙枪1挡1概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文龙枪1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文龙枪1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V == Config.铭文龙枪1挡2次数 && num2 <= Config.铭文龙枪1挡2概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文龙枪1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文龙枪1挡技能铭文;
                        }
                        if (Character.铭文洗练次数1.V >= Config.铭文龙枪1挡3次数 && 100 == Config.铭文龙枪1挡3概率)
                        {
                            Character.铭文洗练次数1.V = 0;
                            装备数据.FirstInscription.SkillID = (ushort)Config.铭文龙枪1挡技能编号;
                            装备数据.FirstInscription.ID = (byte)Config.铭文龙枪1挡技能铭文;
                        }
                    }
                }
                if (装备类型 == 0)
                {
                    玩家装卸铭文(装备数据.FirstInscription.SkillID, 装备数据.FirstInscription.ID);
                    Character.铭文洗练次数1.V++;
                }
            }
            Enqueue(new SyncItemPacket
            {
                Description = 装备数据.ToArray()
            });
            Enqueue(new 玩家普通洗练
            {
                铭文位一 = (装备数据.FirstInscription?.Index ?? 0),
                铭文位二 = (装备数据.SecondInscription?.Index ?? 0)
            });
        }
    }

    public void 高级铭文洗练(byte 装备类型, byte 装备位置, int 物品编号)
    {
        EquipmentInfo 装备数据 = null;
        if (装备类型 == 0 && Equipment.TryGetValue(装备位置, out var v))
        {
            装备数据 = v;
        }
        if (装备类型 == 1 && Inventory.TryGetValue(装备位置, out var v2) && v2 is EquipmentInfo 装备数据2 && Config.禁止背包铭文洗练 == 0)
        {
            装备数据 = 装备数据2;
        }
        if (CurrentStoreNameID != "WeaponRune")
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 没有打开界面"));
        }
        else
        {
            if (Dead || StallState > 0 || TradeState >= 3)
            {
                return;
            }
            if (Gold < 100000)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1821
                });
                return;
            }
            if (装备数据 == null)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1802
                });
                return;
            }
            if (装备数据.Type != ItemType.Weapon)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 物品类型错误."));
                return;
            }
            if (装备数据.SecondInscription == null)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 第二铭文为空."));
                return;
            }
            if (物品编号 <= 0)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 材料编号错误."));
                return;
            }
            if (!FindItem(物品编号, out var 物品))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1835
                });
                return;
            }
            if (物品.Type != ItemType.普通铭文)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 材料类型错误."));
                return;
            }
            Gold -= 100000;
            Enqueue(new 同步货币数量
            {
                Description = 全部货币描述()
            });
            ConsumeItem(1, 物品);
            GameObjectRace race = GameObjectRace.Warrior;
            switch (物品编号)
            {
                case 21001:
                    race = GameObjectRace.Warrior;
                    break;
                case 21002:
                    race = GameObjectRace.Wizard;
                    break;
                case 21003:
                    race = GameObjectRace.Taoist;
                    break;
                case 21004:
                    race = GameObjectRace.Assassin;
                    break;
                case 21005:
                    race = GameObjectRace.Archer;
                    break;
                case 21006:
                    race = GameObjectRace.DragonLance;
                    break;
            }
            while ((洗练铭文 = InscriptionSkill.RandomRefinement(race)).SkillID == 装备数据.BestInscription.SkillID)
            {
            }
            Character.铭文洗练次数3.V++;
            if (装备数据.BestInscription == 装备数据.FirstInscription)
            {
                Enqueue(new 玩家高级洗练
                {
                    洗练结果 = 1,
                    铭文位一 = 装备数据.BestInscription.Index,
                    铭文位二 = 洗练铭文.Index
                });
            }
            else
            {
                Enqueue(new 玩家高级洗练
                {
                    洗练结果 = 1,
                    铭文位一 = 洗练铭文.Index,
                    铭文位二 = 装备数据.BestInscription.Index
                });
            }
        }
    }

    public void 替换铭文洗练(byte 装备类型, byte 装备位置, int 物品编号)
    {
        EquipmentInfo 装备数据 = null;
        int num = 10;
        if (装备类型 == 0 && Equipment.TryGetValue(装备位置, out var v))
        {
            装备数据 = v;
        }
        if (装备类型 == 1 && Inventory.TryGetValue(装备位置, out var v2) && v2 is EquipmentInfo 装备数据2)
        {
            装备数据 = 装备数据2;
        }
        if (CurrentStoreNameID != "WeaponRune")
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 没有打开界面"));
        }
        else
        {
            if (Dead || StallState > 0 || TradeState >= 3)
            {
                return;
            }
            if (Gold < 1000000)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1821
                });
                return;
            }
            if (装备数据 == null)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1802
                });
                return;
            }
            if (装备数据.Type != ItemType.Weapon)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 物品类型错误."));
                return;
            }
            if (装备数据.SecondInscription == null)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 第二铭文为空."));
                return;
            }
            if (物品编号 <= 0)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 材料编号错误."));
                return;
            }
            if (!FindItem(num, 物品编号, out var 物品列表))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1835
                });
                return;
            }
            if (物品列表.FirstOrDefault((ItemInfo O) => O.Type != ItemType.普通铭文) != null)
            {
                Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 材料类型错误."));
                return;
            }
            Gold -= 1000000;
            Enqueue(new 同步货币数量
            {
                Description = 全部货币描述()
            });
            ConsumeItem(num, 物品列表);
            GameObjectRace 洗练职业 = GameObjectRace.Warrior;
            switch (物品编号)
            {
                case 21001:
                    洗练职业 = GameObjectRace.Warrior;
                    break;
                case 21002:
                    洗练职业 = GameObjectRace.Wizard;
                    break;
                case 21003:
                    洗练职业 = GameObjectRace.Taoist;
                    break;
                case 21004:
                    洗练职业 = GameObjectRace.Assassin;
                    break;
                case 21005:
                    洗练职业 = GameObjectRace.Archer;
                    break;
                case 21006:
                    洗练职业 = GameObjectRace.DragonLance;
                    break;
            }
            while ((洗练铭文 = InscriptionSkill.RandomRefinement(洗练职业)).SkillID == 装备数据.WorstInscription.SkillID)
            {
            }
            Enqueue(new 玩家高级洗练
            {
                洗练结果 = 1,
                铭文位一 = 装备数据.WorstInscription.Index,
                铭文位二 = 洗练铭文.Index
            });
        }
    }

    public void 高级洗练确认(byte 装备类型, byte 装备位置)
    {
        EquipmentInfo 装备数据 = null;
        if (装备类型 == 0 && Equipment.TryGetValue(装备位置, out var v))
        {
            装备数据 = v;
        }
        if (装备类型 == 1 && Inventory.TryGetValue(装备位置, out var v2) && v2 is EquipmentInfo 装备数据2)
        {
            装备数据 = 装备数据2;
        }
        if (CurrentStoreNameID != "WeaponRune")
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 没有打开界面"));
            return;
        }
        if (装备数据 == null)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1802
            });
            return;
        }
        if (洗练铭文 == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 确定替换铭文.  错误: 没有没有洗练记录."));
            return;
        }
        if (装备数据.Type != ItemType.Weapon)
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 物品类型错误."));
            return;
        }
        if (装备数据.SecondInscription == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 第二铭文为空."));
            return;
        }
        if (装备类型 == 0)
        {
            玩家装卸铭文(装备数据.WorstInscription.SkillID, 0);
        }
        装备数据.WorstInscription = 洗练铭文;
        if (装备类型 == 0)
        {
            玩家装卸铭文(洗练铭文.SkillID, 洗练铭文.ID);
        }
        Enqueue(new SyncItemPacket
        {
            Description = 装备数据.ToArray()
        });
        Enqueue(new 确认替换铭文
        {
            确定替换 = true
        });
    }

    public void 替换洗练确认(byte 装备类型, byte 装备位置)
    {
        EquipmentInfo 装备数据 = null;
        if (装备类型 == 0 && Equipment.TryGetValue(装备位置, out var v))
        {
            装备数据 = v;
        }
        if (装备类型 == 1 && Inventory.TryGetValue(装备位置, out var v2) && v2 is EquipmentInfo 装备数据2)
        {
            装备数据 = 装备数据2;
        }
        if (CurrentStoreNameID != "WeaponRune")
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 没有打开界面"));
            return;
        }
        if (装备数据 == null)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1802
            });
            return;
        }
        if (洗练铭文 == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 确定替换铭文.  错误: 没有没有洗练记录."));
            return;
        }
        if (装备数据.Type != ItemType.Weapon)
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 物品类型错误."));
            return;
        }
        if (装备数据.SecondInscription == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 普通铭文洗练.  错误: 第二铭文为空."));
            return;
        }
        if (装备类型 == 0)
        {
            玩家装卸铭文(装备数据.BestInscription.SkillID, 0);
        }
        装备数据.BestInscription = 洗练铭文;
        if (装备类型 == 0)
        {
            玩家装卸铭文(洗练铭文.SkillID, 洗练铭文.ID);
        }
        Enqueue(new SyncItemPacket
        {
            Description = 装备数据.ToArray()
        });
        Enqueue(new 确认替换铭文
        {
            确定替换 = true
        });
    }

    public void 放弃替换铭文()
    {
        洗练铭文 = null;
        Enqueue(new 确认替换铭文
        {
            确定替换 = false
        });
    }

    public void 解锁双铭文位(byte 装备类型, byte 装备位置, byte 操作参数)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        ItemInfo v;
        if (CurrentStoreNameID != "WeaponRune")
        {
            Connection?.Disconnect(new Exception("错误操作: 解锁双铭文位.  错误: 没有打开界面"));
        }
        else if (装备类型 != 1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1839
            });
        }
        else if (Inventory.TryGetValue(装备位置, out v) && v is EquipmentInfo 装备数据)
        {
            if (装备数据.Type != ItemType.Weapon)
            {
                Connection?.Disconnect(new Exception("错误操作: 解锁双铭文位.  错误: 物品类型错误."));
            }
            else if (操作参数 == 1)
            {
                int num = 2000000;
                if (装备数据.双铭文栏.V)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 1909
                    });
                    return;
                }
                if (Gold < num)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 1821
                    });
                    return;
                }
                Gold -= num;
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
                装备数据.双铭文栏.V = true;
                Enqueue(new SyncItemPacket
                {
                    Description = 装备数据.ToArray()
                });
                Enqueue(new 双铭文位切换
                {
                    当前栏位 = 装备数据.当前铭栏.V,
                    第一铭文 = (装备数据.FirstInscription?.Index ?? 0),
                    第二铭文 = (装备数据.SecondInscription?.Index ?? 0)
                });
            }
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 解锁双铭文位.  错误: 不是装备类型."));
        }
    }

    public void 切换双铭文位(byte 装备类型, byte 装备位置, byte 操作参数)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        ItemInfo v;
        if (CurrentStoreNameID != "WeaponRune")
        {
            Connection?.Disconnect(new Exception("错误操作: 切换双铭文位.  错误: 没有打开界面"));
        }
        else if (装备类型 != 1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1839
            });
        }
        else if (Inventory.TryGetValue(装备位置, out v) && v is EquipmentInfo 装备数据)
        {
            if (装备数据.Type != ItemType.Weapon)
            {
                Connection?.Disconnect(new Exception("错误操作: 切换双铭文位.  错误: 物品类型错误."));
                return;
            }
            if (!装备数据.双铭文栏.V)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1926
                });
                return;
            }
            if (操作参数 == 装备数据.当前铭栏.V)
            {
                Connection?.Disconnect(new Exception("错误操作: 切换双铭文位.  错误: 切换铭位错误."));
                return;
            }
            装备数据.当前铭栏.V = 操作参数;
            Enqueue(new SyncItemPacket
            {
                Description = 装备数据.ToArray()
            });
            Enqueue(new 双铭文位切换
            {
                当前栏位 = 装备数据.当前铭栏.V,
                第一铭文 = (装备数据.FirstInscription?.Index ?? 0),
                第二铭文 = (装备数据.SecondInscription?.Index ?? 0)
            });
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 切换双铭文位.  错误: 不是装备类型."));
        }
    }

    public void 传承武器铭文(byte 来源类型, byte 来源位置, byte 目标类型, byte 目标位置)
    {
        int num = 1000000;
        int num2 = 150;
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        if (CurrentStoreNameID != "WeaponRune")
        {
            Connection?.Disconnect(new Exception("错误操作: 传承武器铭文.  错误: 没有打开界面"));
        }
        else if (来源类型 == 1 && 目标类型 == 1)
        {
            if (Inventory.TryGetValue(来源位置, out var v) && v is EquipmentInfo 装备数据 && Inventory.TryGetValue(目标位置, out var v2) && v2 is EquipmentInfo 装备数据2)
            {
                if (装备数据.Type == ItemType.Weapon && 装备数据2.Type == ItemType.Weapon)
                {
                    if (装备数据.传承材料 != 0 && 装备数据2.传承材料 != 0 && 装备数据.传承材料 == 装备数据2.传承材料)
                    {
                        if (装备数据.SecondInscription != null && 装备数据2.SecondInscription != null)
                        {
                            if (Gold < num)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 1821
                                });
                                return;
                            }
                            if (!FindItem(num2, 装备数据.传承材料, out var 物品列表))
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 1835
                                });
                                return;
                            }
                            Gold -= num;
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                            ConsumeItem(num2, 物品列表);
                            装备数据2.FirstInscription = 装备数据.FirstInscription;
                            装备数据2.SecondInscription = 装备数据.SecondInscription;
                            装备数据.InscriptionSkills.Remove((byte)(装备数据.当前铭栏.V * 2));
                            装备数据.InscriptionSkills.Remove((byte)(装备数据.当前铭栏.V * 2 + 1));
                            Enqueue(new SyncItemPacket
                            {
                                Description = 装备数据.ToArray()
                            });
                            Enqueue(new SyncItemPacket
                            {
                                Description = 装备数据2.ToArray()
                            });
                            Enqueue(new 铭文传承应答());
                        }
                        else
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1887
                            });
                        }
                    }
                    else
                    {
                        Enqueue(new GameErrorMessagePacket
                        {
                            ErrorCode = 1887
                        });
                    }
                }
                else
                {
                    Connection?.Disconnect(new Exception("错误操作: 传承武器铭文.  错误: 物品类型错误."));
                }
            }
            else
            {
                Connection?.Disconnect(new Exception("错误操作: 传承武器铭文.  错误: 不是装备类型."));
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1839
            });
        }
    }

    public void 升级武器普通(byte[] 首饰组, byte[] 材料组)
    {
        if (Dead || StallState > 0 || TradeState >= 3)
        {
            return;
        }
        EquipmentInfo v;
        if (Character.升级装备.V != null)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1854
            });
        }
        else if (Gold < 10000)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1821
            });
        }
        else if (!Equipment.TryGetValue(0, out v))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1853
            });
        }
        else if (v.MaxDura.V > 3000 && (float)v.MaxDura.V > (float)v.默认持久 * 0.5f)
        {
            if (v.UpgradeCount.V >= 9)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1815
                });
                return;
            }
            Dictionary<byte, EquipmentInfo> dictionary = new Dictionary<byte, EquipmentInfo>();
            byte[] array = 首饰组;
            int num = 0;
            List<KeyValuePair<byte, Dictionary<EquipmentInfo, int>>> 排序属性;
            while (true)
            {
                if (num < array.Length)
                {
                    byte b = array[num];
                    if (b != byte.MaxValue)
                    {
                        if (!Inventory.TryGetValue(b, out var v2))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1859
                            });
                            return;
                        }
                        if (!(v2 is EquipmentInfo 装备数据) || (装备数据.Type != ItemType.Necklace && 装备数据.Type != ItemType.Bracelet && 装备数据.Type != ItemType.Ring))
                        {
                            break;
                        }
                        if (dictionary.ContainsKey(b))
                        {
                            Enqueue(new GameErrorMessagePacket
                            {
                                ErrorCode = 1859
                            });
                            return;
                        }
                        dictionary.Add(b, 装备数据);
                    }
                    num++;
                    continue;
                }
                Dictionary<byte, ItemInfo> dictionary2 = new Dictionary<byte, ItemInfo>();
                array = 材料组;
                num = 0;
                while (true)
                {
                    if (num < array.Length)
                    {
                        byte b2 = array[num];
                        if (b2 != byte.MaxValue)
                        {
                            if (!Inventory.TryGetValue(b2, out var v3))
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 1859
                                });
                                return;
                            }
                            if (v3.Type != ItemType.武器锻造)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 1859
                                });
                                return;
                            }
                            if (dictionary2.ContainsKey(b2))
                            {
                                break;
                            }
                            dictionary2.Add(b2, v3);
                        }
                        num++;
                        continue;
                    }
                    Gold -= 10000;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    array = 首饰组;
                    byte[] array2 = array;
                    byte[] array3 = array2;
                    foreach (byte b3 in array3)
                    {
                        if (b3 != byte.MaxValue)
                        {
                            Inventory[b3].Remove();
                            Inventory.Remove(b3);
                            Enqueue(new DeleteItemPacket
                            {
                                Grid = 1,
                                Position = b3
                            });
                        }
                    }
                    array = 材料组;
                    byte[] array4 = array;
                    byte[] array5 = array4;
                    foreach (byte b4 in array5)
                    {
                        if (b4 != byte.MaxValue)
                        {
                            Inventory[b4].Remove();
                            Inventory.Remove(b4);
                            Enqueue(new DeleteItemPacket
                            {
                                Grid = 1,
                                Position = b4
                            });
                        }
                    }
                    Equipment.Remove(0);
                    玩家穿卸装备(装备穿戴部位.武器, v, null);
                    Enqueue(new DeleteItemPacket
                    {
                        Grid = 0,
                        Position = 0
                    });
                    Enqueue(new 放入升级武器());
                    Dictionary<byte, Dictionary<EquipmentInfo, int>> dictionary3 = new Dictionary<byte, Dictionary<EquipmentInfo, int>>
                    {
                        [0] = new Dictionary<EquipmentInfo, int>(),
                        [1] = new Dictionary<EquipmentInfo, int>(),
                        [2] = new Dictionary<EquipmentInfo, int>(),
                        [3] = new Dictionary<EquipmentInfo, int>(),
                        [4] = new Dictionary<EquipmentInfo, int>()
                    };
                    foreach (EquipmentInfo value in dictionary.Values)
                    {
                        Stats 装备属性 = value.Stats;
                        int num2 = 0;
                        if ((num2 = (装备属性.ContainsKey(Stat.MinDC) ? 装备属性[Stat.MinDC] : 0) + (装备属性.ContainsKey(Stat.MaxDC) ? 装备属性[Stat.MaxDC] : 0)) > 0)
                        {
                            dictionary3[0][value] = num2;
                        }
                        if ((num2 = (装备属性.ContainsKey(Stat.MinMC) ? 装备属性[Stat.MinMC] : 0) + (装备属性.ContainsKey(Stat.MaxMC) ? 装备属性[Stat.MaxMC] : 0)) > 0)
                        {
                            dictionary3[1][value] = num2;
                        }
                        if ((num2 = (装备属性.ContainsKey(Stat.MinSC) ? 装备属性[Stat.MinSC] : 0) + (装备属性.ContainsKey(Stat.MaxSC) ? 装备属性[Stat.MaxSC] : 0)) > 0)
                        {
                            dictionary3[2][value] = num2;
                        }
                        if ((num2 = (装备属性.ContainsKey(Stat.MinNC) ? 装备属性[Stat.MinNC] : 0) + (装备属性.ContainsKey(Stat.MaxNC) ? 装备属性[Stat.MaxNC] : 0)) > 0)
                        {
                            dictionary3[3][value] = num2;
                        }
                        if ((num2 = (装备属性.ContainsKey(Stat.MinBC) ? 装备属性[Stat.MinBC] : 0) + (装备属性.ContainsKey(Stat.MaxBC) ? 装备属性[Stat.MaxBC] : 0)) > 0)
                        {
                            dictionary3[4][value] = num2;
                        }
                    }
                    排序属性 = dictionary3.ToList().OrderByDescending(delegate (KeyValuePair<byte, Dictionary<EquipmentInfo, int>> x)
                    {
                        KeyValuePair<byte, Dictionary<EquipmentInfo, int>> keyValuePair2 = x;
                        return keyValuePair2.Value.Values.Sum();
                    }).ToList();
                    List<KeyValuePair<byte, Dictionary<EquipmentInfo, int>>> list = 排序属性.Where((KeyValuePair<byte, Dictionary<EquipmentInfo, int>> O) => O.Value.Values.Sum() == 排序属性[0].Value.Values.Sum()).ToList();
                    byte key = list[SEngine.Random.Next(list.Count)].Key;
                    List<KeyValuePair<EquipmentInfo, int>> list2 = dictionary3[key].ToList().OrderByDescending(delegate (KeyValuePair<EquipmentInfo, int> x)
                    {
                        KeyValuePair<EquipmentInfo, int> keyValuePair = x;
                        return keyValuePair.Value;
                    }).ToList();
                    float num3 = Math.Min(10f, (float)((list2.Count < 1) ? 1 : list2[0].Value) + (float)((list2.Count >= 2) ? list2[1].Value : 0) / 3f);
                    int num4 = dictionary2.Values.Sum((ItemInfo x) => x.Dura.V);
                    float num5 = Math.Max(0f, num4 - 146);
                    int num6 = 90 - v.UpgradeCount.V * 10;
                    float 概率 = (num3 * (float)num6 * 0.001f + num5 * 0.01f) * (float)Config.锻造成功倍数;
                    Character.升级装备.V = v;
                    Character.取回时间.V = SEngine.CurrentTime.AddHours(2.0);
                    if (Character.升级成功.V = Compute.CalculateProbability(概率))
                    {
                        v.UpgradeCount.V++;
                        switch (key)
                        {
                            case 0:
                                v.DCPower.V++;
                                break;
                            case 1:
                                v.MCPower.V++;
                                break;
                            case 2:
                                v.SCPower.V++;
                                break;
                            case 3:
                                v.NCPower.V++;
                                break;
                            case 4:
                                v.BCPower.V++;
                                break;
                        }
                    }
                    if (num4 < 30)
                    {
                        v.MaxDura.V -= 3000;
                        v.Dura.V = Math.Min(v.Dura.V, v.MaxDura.V);
                    }
                    else if (num4 < 60)
                    {
                        v.MaxDura.V -= 2000;
                        v.Dura.V = Math.Min(v.Dura.V, v.MaxDura.V);
                    }
                    else if (num4 < 99)
                    {
                        v.MaxDura.V -= 1000;
                        v.Dura.V = Math.Min(v.Dura.V, v.MaxDura.V);
                    }
                    else if (num4 > 130 && Compute.CalculateProbability(1f - (float)v.MaxDura.V * 0.5f / (float)v.默认持久))
                    {
                        v.MaxDura.V += 1000;
                        v.Dura.V = Math.Min(v.Dura.V, v.MaxDura.V);
                    }
                    return;
                }
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1859
                });
                return;
            }
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1859
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1856
            });
        }
    }

    public bool 玩家取回装备(int 扣除金币)
    {
        if (Character.升级装备.V == null)
        {
            return false;
        }
        if (Character.升级成功.V && Config.武器强化消耗货币开关 == 0)
        {
            byte b = 0;
            while (b < InventorySize)
            {
                if (Inventory.ContainsKey(b))
                {
                    b = (byte)(b + 1);
                    continue;
                }
                Gold -= 扣除金币;
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
                Inventory[b] = Character.升级装备.V;
                Inventory[b].Location.V = b;
                Inventory[b].Grid.V = 1;
                Enqueue(new SyncItemPacket
                {
                    Description = Inventory[b].ToArray()
                });
                Enqueue(new 取回升级武器());
                Enqueue(new 武器升级结果());
                if (Character.升级装备.V.UpgradeCount.V >= 5)
                {
                    NetworkManager.SendAnnouncement($"[{Name}] 成功将 [{Character.升级装备.V.Name}] 升级到 {Character.升级装备.V.UpgradeCount.V} 级.");
                }
                Character.升级装备.V = null;
                return Character.升级成功.V;
            }
            Character.升级装备.V = null;
        }
        else if (Character.升级成功.V && Config.武器强化消耗货币开关 == 1)
        {
            byte b2 = 0;
            while (b2 < InventorySize)
            {
                if (Inventory.ContainsKey(b2))
                {
                    b2 = (byte)(b2 + 1);
                    continue;
                }
                Ingot -= 扣除金币;
                Inventory[b2] = Character.升级装备.V;
                Inventory[b2].Location.V = b2;
                Inventory[b2].Grid.V = 1;
                Enqueue(new SyncItemPacket
                {
                    Description = Inventory[b2].ToArray()
                });
                Enqueue(new 取回升级武器());
                Enqueue(new 武器升级结果());
                if (Character.升级装备.V.UpgradeCount.V >= 5)
                {
                    NetworkManager.SendAnnouncement($"[{Name}] 成功将 [{Character.升级装备.V.Name}] 升级到 {Character.升级装备.V.UpgradeCount.V} 级.");
                }
                Character.升级装备.V = null;
                return Character.升级成功.V;
            }
            Character.升级装备.V = null;
        }
        return Character.升级成功.V;
    }

    public void 放弃升级武器()
    {
        Character.升级装备.V?.Remove();
        Character.升级装备.V = null;
        Enqueue(new 武器升级结果
        {
            升级结果 = 1
        });
    }

    public void UserSendBroadcastMessage(uint channel, byte msgtype, byte[] data)
    {
        switch (channel)
        {
            case 0x90000001:
                {
                    var message = Encoding.UTF8.GetString(data).Trim('\0');
                    if (message.StartsWith("@"))
                    {
                        if (SEngine.AddGMCommand(message))
                            ;
                        else
                        {
                            message = message.Remove(0, 1);
                            var parts = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                            if (parts.Length == 0) return;


                            switch (parts[0].ToUpper())
                            {
                                case "STALL":
                                    {
                                        if (Character.CurrentMap.V != Config.可摆摊地图编号)
                                            break;

                                        if (CurrentLevel < Config.可摆摊等级 && CurrentDegree == 0)
                                        {
                                            CurrentTrade?.BreakTrade();
                                            Enqueue(new GameErrorMessagePacket
                                            {
                                                ErrorCode = 65538
                                            });
                                        }
                                        if (!CurrentMap.IsSafeArea(CurrentPosition))
                                        {
                                            Enqueue(new GameErrorMessagePacket
                                            {
                                                ErrorCode = 2818
                                            });
                                        }
                                        else if (CurrentStall != null)
                                        {
                                            Enqueue(new GameErrorMessagePacket
                                            {
                                                ErrorCode = 2825
                                            });
                                        }
                                        else if (CurrentMap.IsSafeArea(CurrentPosition))
                                        {
                                            CurrentStall = new StallObject();
                                            SendPacket(new 摆摊状态改变
                                            {
                                                对象编号 = ObjectID,
                                                摊位状态 = 1
                                            });
                                        }
                                        else
                                        {
                                            Enqueue(new GameErrorMessagePacket
                                            {
                                                ErrorCode = 2818
                                            });
                                        }

                                        break;
                                    }

                                case "会员":
                                    {
                                        if (!Titles.ContainsKey(Config.分解称号选项))
                                            break;

                                        GuardObject guard = null;
                                        foreach (int id in MapManager.Guards.Keys)
                                        {
                                            if (MapManager.Guards[id].GuardID == 8482)
                                            {
                                                guard = MapManager.Guards[id];
                                                break;
                                            }
                                        }
                                        if (guard != null)
                                        {
                                            guard = new GuardObject(GuardInfo.DataSheet[8482], CurrentMap, GameDirection.Down, new Point(CurrentPosition.X, CurrentPosition.Y + 1));
                                            guard.AutoDisappear = true;
                                            guard.ExistenceTime = SEngine.CurrentTime.AddSeconds(15.0);
                                        }
                                        if (guard != null)
                                        {
                                            快捷对话模块(guard);
                                        }

                                        break;
                                    }
                            }
                        }
                    }
                    else
                    {
                        byte[] buffer = null;
                        using (var ms = new MemoryStream())
                        {
                            using var writer = new BinaryWriter(ms);
                            writer.Write(channel);
                            writer.Write(ObjectID);
                            writer.Write(1);
                            writer.Write((int)CurrentLevel);
                            writer.Write(data);
                            writer.Write(Encoding.UTF8.GetBytes(Name));
                            writer.Write((byte)0);
                            buffer = ms.ToArray();
                        }
                        SendPacket(new 接收聊天信息
                        {
                            Description = buffer
                        });

                        SEngine.AddChatLog("[附近][" + Name + "]: ", data);
                    }

                    break;
                }

            case 0x90000003:
                {
                    switch (msgtype)
                    {
                        case 1:
                            if (Gold < 1000)
                            {
                                Enqueue(new GameErrorMessagePacket
                                {
                                    ErrorCode = 4873
                                });
                                return;
                            }
                            Gold -= 1000;
                            Enqueue(new 同步货币数量
                            {
                                Description = 全部货币描述()
                            });
                            break;
                        default:
                            Connection?.Disconnect(new Exception($"Player provided wrong channel parameter when transmitting or broadcasting. Channel: {channel:X8}  Param:{msgtype}"));
                            return;
                        case 6:
                            {
                                if (!FindItem(2201, out var item))
                                {
                                    Enqueue(new GameErrorMessagePacket
                                    {
                                        ErrorCode = 4869
                                    });
                                    return;
                                }
                                ConsumeItem(1, item);
                                break;
                            }
                    }
                    byte[] buffer = null;
                    using (var ms = new MemoryStream())
                    {
                        using var writer = new BinaryWriter(ms);
                        writer.Write(ObjectID);
                        writer.Write(channel);
                        writer.Write((int)msgtype);
                        writer.Write((int)CurrentLevel);
                        writer.Write(data);
                        writer.Write(Encoding.UTF8.GetBytes(Name));
                        writer.Write((byte)0);
                        buffer = ms.ToArray();
                    }
                    NetworkManager.Broadcast(new SystemMessagePacket
                    {
                        Description = buffer
                    });
                    SEngine.AddChatLog("[" + (msgtype == 1 ? "Broadcast" : "Message") + "][" + Name + "]: ", data);
                    break;
                }
            default:
                Connection?.Disconnect(new Exception($"Player provided wrong channel parameters when sending broadcast. Channel: {channel:X8}"));
                break;
        }
    }

    public void UserSendMessage(ushort param1, int param2, byte[] data)
    {
        switch (param2 >> 28)
        {
            case 7:
                {
                    if (Team == null)
                    {
                        Enqueue(new SocialErrorPacket { ErrorCode = 3853 });
                        break;
                    }

                    using var ms = new MemoryStream();
                    using var writer = new BinaryWriter(ms);
                    writer.Write(ObjectID);
                    writer.Write(0x70000000u);
                    writer.Write(1);
                    writer.Write((int)CurrentLevel);
                    writer.Write(data);
                    writer.Write(Encoding.UTF8.GetBytes(Name + "\0"));
                    Team.Broadcast(new SystemMessagePacket
                    {
                        Description = ms.ToArray()
                    });
                    SEngine.AddChatLog("[队伍][" + Name + "]: ", data);
                    break;
                }
            case 6:
                {
                    if (Guild == null)
                    {
                        Enqueue(new SocialErrorPacket { ErrorCode = 6668 });
                        break;
                    }
                    if (Guild.BannedMembers.ContainsKey(this.Character))
                    {
                        Enqueue(new SocialErrorPacket { ErrorCode = 4870 });
                        break;
                    }
                    using var ms = new MemoryStream();
                    using var writer = new BinaryWriter(ms);
                    writer.Write(ObjectID);
                    writer.Write(0x60000000u);
                    writer.Write(1);
                    writer.Write((int)CurrentLevel);
                    writer.Write(data);
                    writer.Write(Encoding.UTF8.GetBytes(Name));
                    writer.Write((byte)0);
                    Guild.Broadcast(new SystemMessagePacket
                    {
                        Description = ms.ToArray()
                    });
                    SEngine.AddChatLog("[行会][" + Name + "]: ", data);
                    break;
                }
            case 0:
                {
                    if (Session.CharacterInfoTable.DataSheet.TryGetValue(param2, out var value) && value is CharacterInfo character)
                    {
                        if (ObjectID == character.ID || this.Character.黑名单表.Contains(this.Character) || !character.Online)
                        {
                            break;
                        }
                        byte[] 字节描述 = null;
                        using (MemoryStream memoryStream = new MemoryStream())
                        {
                            using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
                            binaryWriter.Write(character.ID);
                            binaryWriter.Write(ObjectID);
                            binaryWriter.Write(1);
                            binaryWriter.Write((int)CurrentLevel);
                            binaryWriter.Write(data);
                            binaryWriter.Write(Encoding.UTF8.GetBytes(Name));
                            binaryWriter.Write((byte)0);
                            字节描述 = memoryStream.ToArray();
                        }
                        Enqueue(new SystemMessagePacket
                        {
                            Description = 字节描述
                        });
                        byte[] 字节描述2 = null;
                        using (MemoryStream memoryStream2 = new MemoryStream())
                        {
                            using BinaryWriter binaryWriter2 = new BinaryWriter(memoryStream2);
                            binaryWriter2.Write(ObjectID);
                            binaryWriter2.Write(character.ID);
                            binaryWriter2.Write(1);
                            binaryWriter2.Write((int)CurrentLevel);
                            binaryWriter2.Write(data);
                            binaryWriter2.Write(Encoding.UTF8.GetBytes(Name));
                            binaryWriter2.Write((byte)0);
                            字节描述2 = memoryStream2.ToArray();
                        }
                        character.Enqueue(new SystemMessagePacket
                        {
                            Description = 字节描述2
                        });
                        SEngine.AddChatLog($"[私聊][{Name}]=>[{character.UserName}]: ", data);
                    }
                    else
                    {
                        Enqueue(new SocialErrorPacket { ErrorCode = 4868 });
                    }
                    break;
                }
        }
    }

    public void ReceiveUserMessage(byte[] data)
    {
        int key = BitConverter.ToInt32(data, 0);
        byte[] array = data.Skip(4).ToArray();
        if (Session.CharacterInfoTable.DataSheet.TryGetValue(key, out var value) && value is CharacterInfo character && FriendList.Contains(character))
        {
            if (character.Connection == null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5124 });
                return;
            }
            byte[] 字节数据 = null;
            using (MemoryStream memoryStream = new MemoryStream())
            {
                using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
                binaryWriter.Write(ObjectID);
                binaryWriter.Write((int)CurrentLevel);
                binaryWriter.Write(array);
                字节数据 = memoryStream.ToArray();
            }
            character.Enqueue(new 发送好友消息
            {
                Description = 字节数据
            });
            SEngine.AddChatLog($"[好友][{Name}]=>[{character}]: ", array);
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 4868 });
        }
    }

    public void UserFilterMessage(ushort param1, byte[] data)
    {
        var message = Encoding.UTF8.GetString(data).Trim('\0');

        if (SEngine.Abuse.IsAbusive(message))
        {
            // Ask client to block word..
            //Enqueue(new SocialErrorPacket { ErrorCode = 4868 });
            return;
        }
    }

    public void 玩家添加关注(int 对象编号, string 对象名字)
    {
        DBObject value2;
        if (偶像列表.Count >= 100)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 5125 });
        }
        else if (对象编号 != 0)
        {
            if (Session.CharacterInfoTable.DataSheet.TryGetValue(对象编号, out var value) && value is CharacterInfo character)
            {
                if (偶像列表.Contains(character))
                {
                    Enqueue(new SocialErrorPacket { ErrorCode = 5122 });
                    return;
                }
                if (黑名单表.Contains(character))
                {
                    玩家解除屏蔽(character.ID);
                }
                if (仇人列表.Contains(character))
                {
                    玩家删除仇人(character.ID);
                }
                偶像列表.Add(character);
                character.粉丝列表.Add(this.Character);
                Enqueue(new 玩家添加关注
                {
                    对象编号 = character.Index.V,
                    对象名字 = character.UserName.V,
                    是否好友 = (粉丝列表.Contains(character) || character.偶像列表.Contains(this.Character))
                });
                Enqueue(new 同步好友列表
                {
                    ObjectID = character.Index.V,
                    Name = character.UserName.V,
                    Job = (byte)character.Job.V,
                    Gender = (byte)character.Gender.V,
                    上线下线 = (byte)((character.Connection == null) ? 3u : 0u)
                });
                if (粉丝列表.Contains(character) || character.偶像列表.Contains(this.Character))
                {
                    FriendList.Add(character);
                    character.FriendList.Add(this.Character);
                }
                character.Enqueue(new 对方关注自己
                {
                    对象编号 = ObjectID,
                    对象名字 = this.Name
                });
            }
            else
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6732
                });
            }
        }
        else if (Session.CharacterInfoTable.SearchTable.TryGetValue(对象名字, out value2) && value2 is CharacterInfo 角色数据2)
        {
            if (偶像列表.Contains(角色数据2))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 5122
                });
                return;
            }
            if (黑名单表.Contains(角色数据2))
            {
                玩家解除屏蔽(角色数据2.ID);
            }
            if (仇人列表.Contains(角色数据2))
            {
                玩家删除仇人(角色数据2.ID);
            }
            偶像列表.Add(角色数据2);
            角色数据2.粉丝列表.Add(this.Character);
            Enqueue(new 玩家添加关注
            {
                对象编号 = 角色数据2.Index.V,
                对象名字 = 角色数据2.UserName.V,
                是否好友 = (粉丝列表.Contains(角色数据2) || 角色数据2.偶像列表.Contains(this.Character))
            });
            Enqueue(new 同步好友列表
            {
                ObjectID = 角色数据2.Index.V,
                Name = 角色数据2.UserName.V,
                Job = (byte)角色数据2.Job.V,
                Gender = (byte)角色数据2.Gender.V,
                上线下线 = (byte)((角色数据2.Connection == null) ? 3u : 0u)
            });
            if (粉丝列表.Contains(角色数据2) || 角色数据2.偶像列表.Contains(this.Character))
            {
                FriendList.Add(角色数据2);
                角色数据2.FriendList.Add(this.Character);
            }
            角色数据2.Enqueue(new 对方关注自己
            {
                对象编号 = ObjectID,
                对象名字 = this.Name
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void 玩家取消关注(int 对象编号)
    {
        if (Session.CharacterInfoTable.DataSheet.TryGetValue(对象编号, out var value) && value is CharacterInfo 角色数据)
        {
            if (!偶像列表.Contains(角色数据))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 5121
                });
                return;
            }
            偶像列表.Remove(角色数据);
            角色数据.粉丝列表.Remove(this.Character);
            Enqueue(new 玩家取消关注
            {
                对象编号 = 角色数据.ID
            });
            if (FriendList.Contains(角色数据) || 角色数据.FriendList.Contains(this.Character))
            {
                FriendList.Remove(角色数据);
                角色数据.FriendList.Remove(this.Character);
            }
            角色数据.Enqueue(new 对方取消关注
            {
                对象编号 = ObjectID,
                对象名字 = Name
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void 玩家添加仇人(int 对象编号)
    {
        if (Session.CharacterInfoTable.DataSheet.TryGetValue(对象编号, out var value) && value is CharacterInfo 角色数据)
        {
            if (仇人列表.Count >= 100)
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 5125
                });
                return;
            }
            if (偶像列表.Contains(角色数据))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 5122
                });
                return;
            }
            仇人列表.Add(角色数据);
            角色数据.仇恨列表.Add(this.Character);
            Enqueue(new 玩家标记仇人
            {
                对象编号 = 角色数据.Index.V
            });
            Enqueue(new 同步好友列表
            {
                ObjectID = 角色数据.Index.V,
                Name = 角色数据.UserName.V,
                Job = (byte)角色数据.Job.V,
                Gender = (byte)角色数据.Gender.V,
                上线下线 = (byte)((角色数据.Connection == null) ? 3u : 0u)
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void 玩家删除仇人(int 对象编号)
    {
        if (Session.CharacterInfoTable.DataSheet.TryGetValue(对象编号, out var value) && value is CharacterInfo 角色数据)
        {
            if (!仇人列表.Contains(角色数据))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 5126
                });
                return;
            }
            仇人列表.Remove(角色数据);
            角色数据.仇恨列表.Remove(this.Character);
            Enqueue(new 玩家移除仇人
            {
                对象编号 = 角色数据.Index.V
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void 玩家屏蔽目标(int 对象编号)
    {
        if (Session.CharacterInfoTable.DataSheet.TryGetValue(对象编号, out var value) && value is CharacterInfo 角色数据)
        {
            if (黑名单表.Count >= 100)
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 7428
                });
                return;
            }
            if (黑名单表.Contains(角色数据))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 7426
                });
                return;
            }
            if (对象编号 == ObjectID)
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 7429
                });
                return;
            }
            if (偶像列表.Contains(角色数据))
            {
                玩家取消关注(角色数据.ID);
            }
            黑名单表.Add(角色数据);
            角色数据.黑名单表.Add(this.Character);
            Enqueue(new 玩家屏蔽目标
            {
                对象编号 = 角色数据.Index.V,
                对象名字 = 角色数据.UserName.V
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void 玩家解除屏蔽(int 对象编号)
    {
        if (Session.CharacterInfoTable.DataSheet.TryGetValue(对象编号, out var value) && value is CharacterInfo 角色数据)
        {
            if (!黑名单表.Contains(角色数据))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 7427
                });
                return;
            }
            黑名单表.Remove(角色数据);
            角色数据.黑名单表.Remove(this.Character);
            Enqueue(new 解除玩家屏蔽
            {
                对象编号 = 角色数据.Index.V
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void RequestObjectAppearance(int id, int 状态编号)
    {
        if (!MapManager.Objects.TryGetValue(id, out var value))
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6732
            });
            return;
        }

        if (value is PlayerObject player)
        {
            Enqueue(new SyncObjectRolePacket
            {
                ObjectID = player.ObjectID,
                PKLevel = player.PKPoint,
                Job = (byte)player.Job,
                Gender = (byte)player.Gender,
                HairStyle = (byte)player.HairStyle,
                HairColor = (byte)player.HairColor,
                FaceStyle = (byte)player.FaceStyle,
                摆摊状态 = player.StallState,
                摊位名字 = player.StallName,
                称号编号 = player.CurrentTitle,
                武器等级 = (byte)(player.Equipment.TryGetValue(0, out var v) ? (v?.UpgradeCount.V ?? 0) : 0),
                身上武器 = (v?.Item.V.ID ?? 0),
                身上衣服 = (player.Equipment.TryGetValue(1, out var v2) ? (v2?.Item?.V?.ID).GetValueOrDefault() : 0),
                身上披风 = (player.Equipment.TryGetValue(2, out var v3) ? (v3?.Item?.V?.ID).GetValueOrDefault() : 0),
                MaxHP = player[Stat.MaxHP],
                MaxMP = player[Stat.MaxMP],
                Name = player.Name,
                GuildID = (player.Guild?.Index.V ?? 0)
            });
            if (player.CurrentMount != 0 && player.Buffs.ContainsKey(2555))
            {
                Enqueue(new SyncObjectMountPacket
                {
                    ObjectID = player.ObjectID
                });
            }
            if (Config.安全区收刀开关 && Config.CurrentVersion >= 2 && CurrentMap.IsSafeArea(CurrentPosition))
            {
                if (GameSkill.DataSheet.TryGetValue("通用-玩家收起武器", out var value2))
                {
                    new SkillObject(this, value2, null, base.ActionID, CurrentMap, CurrentPosition, null, CurrentPosition, null);
                }
                SendPacket(new SwitchBattleStancePacket
                {
                    ObjectID = ObjectID,
                    姿态编号 = 1,
                    触发动作 = 1
                });
            }
            return;
        }

        if (value is MonsterObject monster)
        {
            if (monster.BirthMap == null)
            {
                Enqueue(new 同步扩展数据
                {
                    ObjectType = 1,
                    MasterID = 0,
                    MasterName = "",
                    CurrentLevel = monster.CurrentLevel,
                    ObjectID = monster.ObjectID,
                    MonID = monster.MonID,
                    PetLevel = monster.PetLevel,
                    Grade = (byte)monster.Grade,
                    MaxHP = monster[Stat.MaxHP]
                });
            }
            else
            {
                Enqueue(new 同步Npcc数据
                {
                    ObjectID = monster.ObjectID,
                    CurrentLevel = monster.CurrentLevel,
                    Grade = (byte)monster.Grade,
                    MonID = (monster.Info?.ID ?? 0),
                    MaxHP = monster[Stat.MaxHP]
                });
            }
            return;
        }

        if (value is PetObject pet)
        {
            Enqueue(new 同步扩展数据
            {
                ObjectType = 2,
                ObjectID = pet.ObjectID,
                MonID = pet.PetID,
                PetLevel = pet.PetLevel,
                CurrentLevel = pet.CurrentLevel,
                Grade = (byte)pet.Grade,
                MaxHP = pet[Stat.MaxHP],
                MasterID = (pet.Master?.ObjectID ?? 0),
                MasterName = (pet.Master?.Name ?? "")
            });
        }

        if (value is GuardObject guard)
        {
            Enqueue(new 同步Npcc数据
            {
                Grade = 3,
                ObjectID = guard.ObjectID,
                CurrentLevel = guard.CurrentLevel,
                MonID = (guard.Info?.GuardID ?? 0),
                MaxHP = guard[Stat.MaxHP]
            });
        }
    }

    public void RequestRoleProfile(int id)
    {
        if (Session.CharacterInfoTable.DataSheet.TryGetValue(id, out var value) && value is CharacterInfo character)
        {
            Enqueue(new 同步角色信息
            {
                Index = character.Index.V,
                Name = character.UserName.V,
                会员等级 = character.本期特权.V,
                Job = (byte)character.Job.V,
                Gender = (byte)character.Gender.V,
                GuildName = (character.Guild.V?.GuildName.V ?? "")
            });
            return;
        }
        Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
    }

    public void RequestRoleCombatPower(int id)
    {
        if (MapManager.Objects.TryGetValue(id, out var value) && value is PlayerObject player)
        {
            Enqueue(new 同步玩家战力
            {
                ObjectID = player.ObjectID,
                CombatPower = player.CurrentCombatPower
            });
            return;
        }
        Enqueue(new GameErrorMessagePacket { ErrorCode = 7171 });
    }

    public void RequestViewRoleEquipment(int id)
    {
        if (MapManager.Objects.TryGetValue(id, out var value) && value is PlayerObject player)
        {
            Enqueue(new 同步角色装备
            {
                ObjectID = player.ObjectID,
                装备数量 = (byte)player.Equipment.Count,
                Description = player.装备物品描述()
            });
            Enqueue(new 同步玛法特权
            {
                玛法特权 = player.CurrentDegree
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket { ErrorCode = 7171 });
        }
    }

    public void 查询排名榜单(int 榜单类型, int 起始位置)
    {
        if (起始位置 < 0 || 起始位置 > 29)
        {
            return;
        }
        byte b = (byte)榜单类型;
        int num = 0;
        int num2 = 起始位置 * 10;
        int num3 = 起始位置 * 10 + 10;
        ListMonitor<CharacterInfo> 列表监视器 = null;
        switch (榜单类型)
        {
            case 37:
                列表监视器 = SystemInfo.Info.龙枪战力排名;
                num = 1;
                break;
            case 36:
                列表监视器 = SystemInfo.Info.龙枪等级排名;
                num = 0;
                break;
            case 0:
                列表监视器 = SystemInfo.Info.个人等级排名;
                num = 0;
                break;
            case 1:
                列表监视器 = SystemInfo.Info.战士等级排名;
                num = 0;
                break;
            case 2:
                列表监视器 = SystemInfo.Info.法师等级排名;
                num = 0;
                break;
            case 3:
                列表监视器 = SystemInfo.Info.道士等级排名;
                num = 0;
                break;
            case 4:
                列表监视器 = SystemInfo.Info.刺客等级排名;
                num = 0;
                break;
            case 5:
                列表监视器 = SystemInfo.Info.弓手等级排名;
                num = 0;
                break;
            case 6:
                列表监视器 = SystemInfo.Info.个人战力排名;
                num = 1;
                break;
            case 7:
                列表监视器 = SystemInfo.Info.战士战力排名;
                num = 1;
                break;
            case 8:
                列表监视器 = SystemInfo.Info.法师战力排名;
                num = 1;
                break;
            case 9:
                列表监视器 = SystemInfo.Info.道士战力排名;
                num = 1;
                break;
            case 10:
                列表监视器 = SystemInfo.Info.刺客战力排名;
                num = 1;
                break;
            case 11:
                列表监视器 = SystemInfo.Info.弓手战力排名;
                num = 1;
                break;
            case 14:
                列表监视器 = SystemInfo.Info.个人声望排名;
                num = 2;
                break;
            case 15:
                列表监视器 = SystemInfo.Info.个人PK值排名;
                num = 3;
                break;
        }
        if (列表监视器 == null || 列表监视器.Count == 0)
        {
            return;
        }
        using MemoryStream memoryStream = new MemoryStream(new byte[189]);
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        binaryWriter.Write(b);
        binaryWriter.Write((ushort)Character.当前排名[b]);
        binaryWriter.Write((ushort)Character.历史排名[b]);
        binaryWriter.Write(列表监视器.Count);
        for (int i = num2; i < num3; i++)
        {
            binaryWriter.Write((long)(列表监视器[i]?.ID ?? 0));
        }
        for (int j = num2; j < num3; j++)
        {
            switch (num)
            {
                default:
                    binaryWriter.Write(0);
                    break;
                case 0:
                    binaryWriter.Write((long)((ulong)(列表监视器[j]?.CurrentLevel ?? 0) << 56));
                    break;
                case 1:
                    binaryWriter.Write((long)(列表监视器[j]?.CurrentCombatPower ?? 0));
                    break;
                case 2:
                    binaryWriter.Write((long)(列表监视器[j]?.师门声望 ?? 0));
                    break;
                case 3:
                    binaryWriter.Write((long)(列表监视器[j]?.PKPoint ?? 0));
                    break;
            }
        }
        for (int k = num2; k < num3; k++)
        {
            binaryWriter.Write((ushort)(列表监视器[k]?.历史排名[b] ?? 0));
        }
        Enqueue(new 查询排行榜单
        {
            字节数据 = memoryStream.ToArray()
        });
    }

    #region Team
    public void RequestTeamSearch()
    {
        // TODO:
    }

    public void RequestTeamInformation(int id)
    {
        if (id == ObjectID)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3852 });
            return;
        }

        var character = Session.GetCharacter(id);
        if (character == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
            return;
        }

        Enqueue(new 查询队伍应答
        {
            队伍编号 = (character.CurrentTeam?.TeamID ?? 0),
            队长编号 = (character.CurrentTeam?.CaptainObjectID ?? 0),
            队伍名字 = (character.CurrentTeam?.CaptainName ?? string.Empty)
        });
    }

    public void RequestCreateTeam(int id, byte 分配方式)
    {
        if (Team != null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3847 });
            return;
        }

        if (ObjectID == id)
        {
            Team = new TeamInfo(this.Character, 1);
            Enqueue(new 玩家加入队伍
            {
                Description = Team.队伍描述()
            });
            return;
        }

        var character = Session.GetCharacter(id);
        if (character == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
            return;
        }

        if (character.CurrentTeam != null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3847 });
        }
        else if (character.Online)
        {
            Team = new TeamInfo(this.Character, 1);
            Enqueue(new 玩家加入队伍
            {
                Description = Team.队伍描述()
            });
            Team.Invitations[character] = SEngine.CurrentTime.AddMinutes(5.0);

            Enqueue(new SocialErrorPacket { ErrorCode = 3842 });

            character.Enqueue(new 发送组队申请
            {
                组队方式 = 0,
                对象编号 = ObjectID,
                对象职业 = (byte)Job,
                对象名字 = Name
            });
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3844 });
        }
    }

    public void SendTeamInvitationRequest(int id)
    {
        if (id == ObjectID)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3852 });
            return;
        }

        var character = Session.GetCharacter(id);
        if (character == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
            return;
        }

        if (Team == null)
        {
            if (character.CurrentTeam == null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3860 });
            }
            else if (character.CurrentTeam.MemberCount >= 11)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3848 });
            }
            else if (character.CurrentTeam.Captain.Online)
            {
                character.CurrentTeam.Applications[this.Character] = SEngine.CurrentTime.AddMinutes(5.0);
                character.CurrentTeam.Captain.Enqueue(new 发送组队申请
                {
                    组队方式 = 1,
                    对象编号 = ObjectID,
                    对象职业 = (byte)Job,
                    对象名字 = Name
                });
                Enqueue(new SocialErrorPacket { ErrorCode = 3842 });
            }
            else
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3844 });
            }
        }
        else if (ObjectID != Team.CaptainObjectID)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3850 });
        }
        else if (character.CurrentTeam != null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3847 });
        }
        else if (Team.MemberCount >= 11)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3848 });
        }
        else if (character.Online)
        {
            Team.Invitations[character] = SEngine.CurrentTime.AddMinutes(5.0);

            Enqueue(new SocialErrorPacket { ErrorCode = 3842 });

            character.Enqueue(new 发送组队申请
            {
                组队方式 = 0,
                对象编号 = ObjectID,
                对象职业 = (byte)Job,
                对象名字 = Name
            });
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3844 });
        }
    }

    public void SendTeamInvitationResponse(int id, byte 组队方式, byte 回应方式)
    {
        if (ObjectID == id)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3852 });
            return;
        }

        var character = Session.GetCharacter(id);
        if (character == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
            return;
        }

        if (组队方式 == 0)
        {
            if (回应方式 == 0)
            {
                if (character.CurrentTeam == null)
                {
                    Enqueue(new SocialErrorPacket { ErrorCode = 3860 });
                    return;
                }
                if (Team != null)
                {
                    Enqueue(new SocialErrorPacket { ErrorCode = 3847 });
                    return;
                }
                if (character.CurrentTeam.MemberCount >= 11)
                {
                    Enqueue(new SocialErrorPacket { ErrorCode = 3848 });
                    return;
                }
                if (!character.CurrentTeam.Invitations.ContainsKey(this.Character))
                {
                    Enqueue(new SocialErrorPacket { ErrorCode = 3860 });
                    return;
                }
                if (character.CurrentTeam.Invitations[this.Character] < SEngine.CurrentTime)
                {
                    Enqueue(new SocialErrorPacket { ErrorCode = 3860 });
                    return;
                }
                character.CurrentTeam.Broadcast(new 队伍增加成员
                {
                    TeamID = character.CurrentTeam.TeamID,
                    对象编号 = ObjectID,
                    对象名字 = Name,
                    对象性别 = (byte)Gender,
                    对象职业 = (byte)Job,
                    在线离线 = 0
                });
                Team = character.CurrentTeam;
                character.CurrentTeam.Members.Add(this.Character);
                Enqueue(new 玩家加入队伍
                {
                    Description = Team.队伍描述()
                });
            }
            else
            {
                if (character.CurrentTeam != null && character.CurrentTeam.Invitations.Remove(this.Character) && character.Online)
                {
                    character.Enqueue(new SocialErrorPacket { ErrorCode = 3856 });
                }

                Enqueue(new SocialErrorPacket { ErrorCode = 3855 });
            }
        }
        else if (回应方式 == 0)
        {
            if (Team == null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3860 });
            }
            else if (Team.MemberCount >= 11)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3848 });
            }
            else if (ObjectID != Team.CaptainObjectID)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3850 });
            }
            else if (!Team.Applications.ContainsKey(character))
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3860 });
            }
            else if (Team.Applications[character] < SEngine.CurrentTime)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3860 });
            }
            else if (character.CurrentTeam != null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 3847 });
            }
            else if (character.Online)
            {
                Team.Broadcast(new 队伍增加成员
                {
                    TeamID = Team.TeamID,
                    对象编号 = character.ID,
                    对象名字 = character.UserName.V,
                    对象性别 = (byte)character.Gender.V,
                    对象职业 = (byte)character.Job.V,
                    在线离线 = 0
                });
                character.CurrentTeam = Team;
                Team.Members.Add(character);
                character.Enqueue(new 玩家加入队伍
                {
                    Description = Team.队伍描述()
                });
            }
        }
        else
        {
            if (Team != null && Team.Applications.Remove(character) && character.Online)
            {
                character.Enqueue(new SocialErrorPacket { ErrorCode = 3858 });
            }

            Enqueue(new SocialErrorPacket { ErrorCode = 3857 });
        }
    }

    public void RequestRemoveTeamMember(int id)
    {
        if (Team == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3854 });
            return;
        }

        var character = Session.GetCharacter(id);
        if (character == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
            return;
        }

        if (Character == character)
        {
            Team.Members.Remove(this.Character);
            Team.Broadcast(new 队伍成员离开
            {
                对象编号 = ObjectID,
                队伍编号 = Team.Index.V
            });
            Enqueue(new 玩家离开队伍
            {
                队伍编号 = Team.Index.V
            });

            if (Character == Team.Captain)
            {
                CharacterInfo member = Team.Members.FirstOrDefault(x => x.Online);
                if (member != null)
                {
                    Team.Captain = member;
                    Team.Broadcast(new 队伍状态改变
                    {
                        成员上限 = 11,
                        队伍编号 = Team.TeamID,
                        队伍名字 = Team.CaptainName,
                        分配方式 = Team.PickUpMethod,
                        队长编号 = Team.CaptainObjectID
                    });
                }
                else
                {
                    Team.Remove();
                }
            }
            Character.CurrentTeam = null;
        }
        else if (!Team.Members.Contains(character))
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
        }
        else if (Character != Team.Captain)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3850 });
        }
        else
        {
            Team.Members.Remove(character);
            character.CurrentTeam = null;
            Team.Broadcast(new 队伍成员离开
            {
                队伍编号 = Team.Index.V,
                对象编号 = character.ID
            });
            character.Enqueue(new 玩家离开队伍
            {
                队伍编号 = Team.Index.V
            });
        }
    }

    public void RequestChangeTeamCaptain(int id)
    {
        if (Team == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3854 });
            return;
        }

        if (Character != Team.Captain)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3850 });
            return;
        }

        var character = Session.GetCharacter(id);
        if (character == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
            return;
        }

        if (character == Character)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 3852 });
            return;
        }

        if (!Team.Members.Contains(character))
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
            return;
        }

        Team.Captain = character;
        Team.Broadcast(new 队伍状态改变
        {
            成员上限 = 11,
            队伍编号 = Team.TeamID,
            队伍名字 = Team.CaptainName,
            分配方式 = Team.PickUpMethod,
            队长编号 = Team.CaptainObjectID
        });
    }
    #endregion

    #region Mail
    public void UserRequestMailbox()
    {
        Enqueue(new 同步邮箱内容
        {
            Description = 全部邮件描述()
        });
    }

    public void UserSendMailRequest(byte[] message)
    {
        if (message.Length >= 94 && message.Length <= 839)
        {
            if (SEngine.CurrentTime < MailTime)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 6151 });
                return;
            }
            if (Gold < 1000)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 6149 });
                return;
            }

            byte[] array = message.Take(32).ToArray();
            byte[] array2 = message.Skip(32).Take(61).ToArray();
            message.Skip(93).Take(4).ToArray();
            byte[] array3 = message.Skip(97).ToArray();
            if (array[0] != 0 && array2[0] != 0 && array3[0] != 0)
            {
                string key = Encoding.UTF8.GetString(array).Split(new char[1], StringSplitOptions.RemoveEmptyEntries)[0];
                string 标题 = Encoding.UTF8.GetString(array2).Split(new char[1], StringSplitOptions.RemoveEmptyEntries)[0];
                string 正文 = Encoding.UTF8.GetString(array3).Split(new char[1], StringSplitOptions.RemoveEmptyEntries)[0];
                if (Session.CharacterInfoTable.SearchTable.TryGetValue(key, out var value) && value is CharacterInfo character)
                {
                    if (character.Mail.Count >= 100)
                    {
                        Enqueue(new SocialErrorPacket { ErrorCode = 6147 });
                        return;
                    }
                    Gold -= 1000;
                    Enqueue(new 同步货币数量
                    {
                        Description = 全部货币描述()
                    });
                    character.SendMail(new MailInfo(this.Character, 标题, 正文, null));
                    Enqueue(new 成功发送邮件());
                }
                else
                {
                    Enqueue(new SocialErrorPacket { ErrorCode = 6146 });
                }
            }
            else
            {
                Connection?.Disconnect(new Exception("错误操作: 申请发送邮件.  错误: 邮件文本错误."));
            }
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 申请发送邮件.  错误: 数据长度错误."));
        }
    }

    public void UserViewedMail(int id)
    {
        if (Session.MailInfoTable.DataSheet.TryGetValue(id, out var value) && value is MailInfo mail)
        {
            if (!Mail.Contains(mail))
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 6148 });
                return;
            }
            UnreadMail.Remove(mail);
            mail.Unread.V = false;
            Enqueue(new 同步邮件内容
            {
                字节数据 = mail.邮件内容描述()
            });
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6148 });
        }
    }

    public void UserDeletedMail(int id)
    {
        if (Session.MailInfoTable.DataSheet.TryGetValue(id, out var value) && value is MailInfo mail)
        {
            if (!Mail.Contains(mail))
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 6148 });
                return;
            }
            Enqueue(new 邮件删除成功
            {
                MailID = mail.MailID
            });
            UnreadMail.Remove(mail);
            Mail.Remove(mail);
            mail.Attachment.V?.Remove();
            mail.Remove();
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6148 });
        }
    }

    public void UserExtractMailAttachment(int id)
    {
        if (Session.MailInfoTable.DataSheet.TryGetValue(id, out var value) && value is MailInfo mail)
        {
            if (!Mail.Contains(mail))
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 6148 });
                return;
            }
            if (mail.Attachment.V == null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 6150 });
                return;
            }
            if (RemainingInventorySpace <= 0)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 1793 });
                return;
            }
            var index = FindEmptyInventoryIndex();
            if (index == byte.MaxValue)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 1793 });
                return;
            }
            Enqueue(new 成功提取附件
            {
                MailID = mail.MailID
            });
            Inventory[index] = mail.Attachment.V;
            mail.Attachment.V.Location.V = index;
            mail.Attachment.V.Grid.V = 1;
            mail.Attachment.V = null;
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6148 });
        }
    } 
    #endregion

    #region Guild
    public void RequestGuildInformation(int id)
    {
        if (Session.GuildInfoTable.DataSheet.TryGetValue(id, out var value) && value is GuildInfo guild)
        {
            Enqueue(new 行会名字应答
            {
                行会编号 = guild.Index.V,
                行会名字 = guild.GuildName.V,
                创建时间 = guild.CreatedDate.V,
                会长编号 = guild.President.V.Index.V,
                行会人数 = (byte)guild.Members.Count,
                行会等级 = guild.行会等级.V
            });
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6669
            });
        }
    }

    public void 更多行会信息()
    {
    }

    public void 更多行会事记()
    {
    }

    public void 查看行会列表(int id, byte 查看方式)
    {
        DBObject value;
        int val = ((Session.GuildInfoTable.DataSheet.TryGetValue(id, out value) && value is GuildInfo guild) ? (guild.行会排名.V - 1) : 0);
        int num = Math.Max(0, val);
        int num2 = ((查看方式 == 2) ? Math.Max(0, num) : Math.Max(0, num - 11));
        int num3 = Math.Min(12, SystemInfo.Info.行会人数排名.Count - num2);
        if (num3 > 0)
        {
            List<GuildInfo> range = SystemInfo.Info.行会人数排名.GetRange(num2, num3);
            using MemoryStream memoryStream = new MemoryStream();
            using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
            binaryWriter.Write(查看方式);
            binaryWriter.Write((byte)num3);
            foreach (GuildInfo item in range)
            {
                binaryWriter.Write(item.行会检索描述());
            }
            Enqueue(new 同步行会列表
            {
                字节数据 = memoryStream.ToArray()
            });
            return;
        }
        using MemoryStream memoryStream2 = new MemoryStream();
        using BinaryWriter binaryWriter2 = new BinaryWriter(memoryStream2);
        binaryWriter2.Write(查看方式);
        binaryWriter2.Write((byte)0);
        Enqueue(new 同步行会列表
        {
            字节数据 = memoryStream2.ToArray()
        });
    }

    public void 查找对应行会(int id, string name)
    {
        if ((Session.GuildInfoTable.DataSheet.TryGetValue(id, out var value) || Session.GuildInfoTable.SearchTable.TryGetValue(name, out value)) && value is GuildInfo guild)
        {
            Enqueue(new 查找行会应答
            {
                字节数据 = guild.行会检索描述()
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6669
            });
        }
    }

    public void RequestDeleteGuild()
    {
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.Members[Character] != GuildRank.President)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Guild.AllianceGuilds.Count != 0)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6739
            });
        }
        else if (Guild.AllianceGuilds.Count != 0)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6740
            });
        }
        else if (MapManager.SiegeGuilds.Contains(Guild))
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6819
            });
        }
        else if (Guild == SystemInfo.Info.OccupyGuild.V)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6819
            });
        }
        else
        {
            Guild.BreakGuild();
        }
    }

    public void RequestCreateGuild(byte[] data)
    {
        ItemInfo 物品;
        if (CurrentStoreNameID != "Guild")
        {
            Connection?.Disconnect(new Exception("错误操作: 申请创建行会. 错误: 没有打开界面."));
        }
        else if (Guild != null)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6707
            });
        }
        else if (CurrentLevel < 12)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6699
            });
        }
        else if (Gold < 200000)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6699
            });
        }
        else if (!FindItem(80002, out 物品))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6664
            });
        }
        else if (data.Length > 25 && data.Length < 128)
        {
            string[] array = Encoding.UTF8.GetString(data.Take(25).ToArray()).Split(new char[1], StringSplitOptions.RemoveEmptyEntries);
            string[] array2 = Encoding.UTF8.GetString(data.Skip(25).ToArray()).Split(new char[1], StringSplitOptions.RemoveEmptyEntries);
            if (array.Length != 0 && array2.Length != 0 && Encoding.UTF8.GetBytes(array[0]).Length < 25 && Encoding.UTF8.GetBytes(array2[0]).Length < 101)
            {
                if (Session.GuildInfoTable.SearchTable.ContainsKey(array[0]))
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 6697
                    });
                    return;
                }
                Gold -= 200000;
                Enqueue(new 同步货币数量
                {
                    Description = 全部货币描述()
                });
                ConsumeItem(1, 物品);
                Guild = new GuildInfo(this, array[0], array2[0]);
                Enqueue(new 创建行会应答
                {
                    行会名字 = Guild.GuildName.V
                });
                Enqueue(new 行会信息公告
                {
                    Description = Guild.行会信息描述()
                });
                SendPacket(new 同步对象行会
                {
                    对象编号 = ObjectID,
                    行会编号 = Guild.ID
                });
                NetworkManager.SendAnnouncement($"[{Name}]创建了行会[{Guild}]");
            }
            else
            {
                Connection?.Disconnect(new Exception("错误操作: 申请创建行会. 错误: 字符长度错误."));
            }
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 申请创建行会. 错误: 数据长度错误."));
        }
    }

    public void ChangeGuildNotice(byte[] data)
    {
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.Members[Character] > GuildRank.监事)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (data.Length != 0 && data.Length < 255)
        {
            if (data[0] == 0)
            {
                Guild.UpdateNotice(string.Empty);
            }
            else
            {
                Guild.UpdateNotice(Encoding.UTF8.GetString(data).Split(default(char))[0]);
            }
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 更改行会公告. 错误: 数据长度错误"));
        }
    }

    public void ChangeGuildDeclaration(byte[] data)
    {
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.Members[Character] > GuildRank.监事)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (data.Length != 0 && data.Length < 101)
        {
            if (data[0] == 0)
            {
                Guild.UpdateDeclaration(Character, string.Empty);
            }
            else
            {
                Guild.UpdateDeclaration(Character, Encoding.UTF8.GetString(data).Split(default(char))[0]);
            }
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 更改行会公告. 错误: 数据长度错误"));
        }
    }

    public void 处理入会邀请(int id, byte 处理类型)
    {
        var character = Session.GetCharacter(id);
        if (character == null)
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6732 });
            return;
        }

        if (character.CurrentGuild != null && character.CurrentGuild.Invitations.Remove(Character))
        {
            if (处理类型 == 2)
            {
                if (Guild != null)
                {
                    Enqueue(new GameErrorMessagePacket { ErrorCode = 6707 });
                    return;
                }
                if (character.Guild.V.Members.Count >= 100)
                {
                    Enqueue(new SocialErrorPacket { ErrorCode = 6709 });
                    return;
                }
                character.Enqueue(new 行会邀请应答
                {
                    对象名字 = Name,
                    应答类型 = 1
                });
                character.CurrentGuild.AddMember(Character);
            }
            else
            {
                character.Enqueue(new 行会邀请应答
                {
                    对象名字 = Name,
                    应答类型 = 2
                });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 6731 });
        }
    }

    public void 处理入会申请(int id, byte 处理类型)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if ((byte)Guild.Members[this.Character] >= 6)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.CharacterInfoTable.DataSheet.TryGetValue(id, out value) && value is CharacterInfo character)
        {
            if (!Guild.Applications.Remove(character))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6731
                });
            }
            else if (处理类型 == 2)
            {
                if (character.CurrentGuild != null)
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 6707
                    });
                }
                else
                {
                    Guild.AddMember(character);
                    Enqueue(new 入会申请应答
                    {
                        对象编号 = character.ID
                    });
                }
            }
            else
            {
                Enqueue(new 入会申请应答
                {
                    对象编号 = character.ID
                });
                character.SendMail(new MailInfo(null, "入会申请被拒绝", "行会[" + Guild.GuildName.V + "]拒绝了你的入会申请.", null));
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void RequestJoinGuild(int id, string name)
    {
        if ((Session.GuildInfoTable.DataSheet.TryGetValue(id, out var value) || Session.GuildInfoTable.SearchTable.TryGetValue(name, out value)) && value is GuildInfo guild)
        {
            if (Guild != null)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6707
                });
                return;
            }
            if (CurrentLevel < 8)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6714
                });
                return;
            }
            if (guild.Members.Count >= Config.行会申请人数限制)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6710
                });
                return;
            }
            if (guild.Applications.Count > 20)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6703
                });
                return;
            }
            guild.Applications[Character] = SEngine.CurrentTime.AddHours(1.0);
            guild.GuildAlert(GuildRank.执事, 1);
            Enqueue(new 加入行会应答
            {
                行会编号 = guild.ID
            });
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6669
            });
        }
    }

    public void 邀请加入行会(string 对象名字)
    {
        if (Guild != null)
        {
            foreach (KeyValuePair<CharacterInfo, DateTime> item in Guild.Invitations.ToList())
            {
                if (SEngine.CurrentTime > item.Value)
                {
                    Guild.Invitations.Remove(item.Key);
                }
            }
        }
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.Members[this.Character] == GuildRank.Member)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Guild.Members.Count >= Config.行会申请人数限制)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.CharacterInfoTable.SearchTable.TryGetValue(对象名字, out value) && value is CharacterInfo character)
        {
            if (!character.Online)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6711
                });
                return;
            }
            if (character.CurrentGuild != null)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6707
                });
                return;
            }
            if (character.CurrentLevel < 8)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6714
                });
                return;
            }
            Guild.Invitations[character] = SEngine.CurrentTime.AddHours(1.0);
            character.Enqueue(new 受邀加入行会
            {
                对象编号 = ObjectID,
                对象名字 = this.Name,
                行会名字 = Guild.GuildName.V
            });
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6713
            });
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void RequestViewGuildApplications()
    {
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else
        {
            Enqueue(new 查看申请名单
            {
                字节描述 = Guild.入会申请描述()
            });
        }
    }

    public void RequestLeaveGuild()
    {
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.Members[Character] == GuildRank.President)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6718
            });
        }
        else
        {
            Guild.RemoveMember(Character);
        }
    }

    public void 发放行会福利()
    {
    }

    public void RequestRemoveGuildMember(int id)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (ObjectID == id)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.CharacterInfoTable.DataSheet.TryGetValue(id, out value) && value is CharacterInfo character && Guild == character.CurrentGuild)
        {
            if (Guild.Members[Character] < GuildRank.长老 && Guild.Members[Character] < Guild.Members[character])
            {
                Guild.KickMember(Character, character);
                character.SendMail(new MailInfo(null, "你被逐出行会", "你被[" + Guild.GuildName.V + "]的官员[" + Name + "]逐出了行会.", null));
            }
            else
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6709
                });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void RequestChangeGuildLeader(int id)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.Members[Character] != GuildRank.President)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6719
            });
        }
        else if (ObjectID == id)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6681
            });
        }
        else if (Session.CharacterInfoTable.DataSheet.TryGetValue(id, out value) && value is CharacterInfo character && character.CurrentGuild == Guild)
        {
            Guild.ChangeLeader(Character, character);
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void DonateGuildFunds(int 金币数量)
    {
        // TODO:
    }

    public void BanGuildMember(int id, byte state)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (ObjectID == id)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.CharacterInfoTable.DataSheet.TryGetValue(id, out value) && value is CharacterInfo player && player.CurrentGuild == Guild)
        {
            if (Guild.Members[Character] < GuildRank.理事 && Guild.Members[Character] < Guild.Members[player])
            {
                Guild.BanMember(Character, player, state);
                return;
            }
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void ChangeGuildMemberRank(int id, byte rank)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (ObjectID == id)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6681
            });
        }
        else if (Session.CharacterInfoTable.DataSheet.TryGetValue(id, out value) && value is CharacterInfo character && character.CurrentGuild == Guild)
        {
            if (Guild.Members[this.Character] < GuildRank.理事 && Guild.Members[this.Character] < Guild.Members[character])
            {
                if (rank > 1 && rank < 8 && rank != (byte)Guild.Members[character])
                {
                    if (rank == 2 && Guild.Members.Values.Where(x => x == GuildRank.副长).Count() >= 2)
                    {
                        Enqueue(new SocialErrorPacket
                        {
                            ErrorCode = 6717
                        });
                    }
                    else if (rank == 3 && Guild.Members.Values.Where(x => x == GuildRank.长老).Count() >= 4)
                    {
                        Enqueue(new SocialErrorPacket
                        {
                            ErrorCode = 6717
                        });
                    }
                    else if (rank == 4 && Guild.Members.Values.Where(x => x == GuildRank.监事).Count() >= 4)
                    {
                        Enqueue(new SocialErrorPacket
                        {
                            ErrorCode = 6717
                        });
                    }
                    else if (rank == 5 && Guild.Members.Values.Where(x => x == GuildRank.理事).Count() >= 4)
                    {
                        Enqueue(new SocialErrorPacket
                        {
                            ErrorCode = 6717
                        });
                    }
                    else if (rank == 6 && Guild.Members.Values.Where(x => x == GuildRank.执事).Count() >= 4)
                    {
                        Enqueue(new SocialErrorPacket
                        {
                            ErrorCode = 6717
                        });
                    }
                    else
                    {
                        Guild.ChangeRank(this.Character, character, (GuildRank)rank);
                    }
                }
                else
                {
                    Enqueue(new SocialErrorPacket
                    {
                        ErrorCode = 6704
                    });
                }
            }
            else
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6709
                });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6732
            });
        }
    }

    public void RequestGuildAlliance(byte 外交类型, byte 外交时间, string guildName)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.GuildName.V == guildName)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6694
            });
        }
        else if (Guild.Members[Character] >= GuildRank.长老)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.GuildInfoTable.SearchTable.TryGetValue(guildName, out value) && value is GuildInfo guild)
        {
            if (Guild.AllianceGuilds.ContainsKey(guild))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6727
                });
            }
            else if (Guild.HostileGuilds.ContainsKey(guild))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6726
                });
            }
            else if (外交时间 >= 1 && 外交时间 <= 3)
            {
                switch (外交类型)
                {
                    case 1:
                        if (Guild.AllianceGuilds.Count >= 10)
                        {
                            Enqueue(new SocialErrorPacket
                            {
                                ErrorCode = 6668
                            });
                        }
                        else if (guild.AllianceGuilds.Count >= 10)
                        {
                            Enqueue(new SocialErrorPacket
                            {
                                ErrorCode = 6668
                            });
                        }
                        else
                        {
                            Guild.AddAllianceRequest(Character, guild, 外交时间);
                        }
                        break;
                    case 2:
                        Guild.AddHostileGuild(guild, 外交时间);
                        NetworkManager.SendAnnouncement($"[{Guild}]和[{guild}]成为敌对行会.");
                        break;
                    default:
                        Connection?.Disconnect(new Exception("错误操作: 申请行会外交.  错误: 类型参数错误"));
                        break;
                }
            }
            else
            {
                Connection?.Disconnect(new Exception("错误操作: 申请行会外交.  错误: 时间参数错误"));
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6669
            });
        }
    }

    public void RequestGuildHostile(byte 敌对时间, string guildName)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.GuildName.V == guildName)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6694
            });
        }
        else if (Guild.Members[Character] >= GuildRank.长老)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.GuildInfoTable.SearchTable.TryGetValue(guildName, out value) && value is GuildInfo guild)
        {
            if (Guild.AllianceGuilds.ContainsKey(guild))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6727
                });
            }
            else if (Guild.HostileGuilds.ContainsKey(guild))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6726
                });
            }
            else if (敌对时间 >= 1 && 敌对时间 <= 3)
            {
                Guild.AddHostileGuild(guild, 敌对时间);
                NetworkManager.SendAnnouncement($"[{Guild}]和[{guild}]成为敌对行会.");
            }
            else
            {
                Connection?.Disconnect(new Exception("错误操作: 申请行会敌对.  错误: 时间参数错误"));
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6669
            });
        }
    }

    public void RequestViewAllianceApplications()
    {
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else
        {
            Enqueue(new 同步结盟申请
            {
                字节描述 = Guild.结盟申请描述()
            });
        }
    }

    public void 处理结盟申请(byte 处理类型, int 行会编号)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.ID == 行会编号)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6694
            });
        }
        else if (Guild.Members[Character] >= GuildRank.长老)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.GuildInfoTable.DataSheet.TryGetValue(行会编号, out value) && value is GuildInfo 行会数据)
        {
            if (Guild.AllianceGuilds.ContainsKey(行会数据))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6727
                });
                return;
            }
            if (Guild.HostileGuilds.ContainsKey(行会数据))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6726
                });
                return;
            }
            if (!Guild.AllianceApplications.ContainsKey(行会数据))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 6695
                });
                return;
            }
            switch (处理类型)
            {
                case 1:
                    Enqueue(new 结盟申请应答
                    {
                        行会编号 = 行会数据.ID
                    });
                    行会数据.发送邮件(GuildRank.副长, "结盟申请被拒绝", "行会[" + Guild.GuildName.V + "]拒绝了你所在行会的结盟申请.");
                    Guild.AllianceApplications.Remove(行会数据);
                    break;
                case 2:
                    Guild.AddAllianceGuild(行会数据);
                    NetworkManager.SendAnnouncement($"[{Guild}]和[{行会数据}]成为结盟行会.");
                    Guild.AllianceApplications.Remove(行会数据);
                    break;
                default:
                    Connection?.Disconnect(new Exception("错误操作: 处理结盟申请.  错误: 处理类型错误."));
                    break;
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6669
            });
        }
    }

    public void RequestReleaseAllianceGuild(int id)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.ID == id)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6694
            });
        }
        else if (Guild.Members[Character] >= GuildRank.长老)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.GuildInfoTable.DataSheet.TryGetValue(id, out value) && value is GuildInfo guild)
        {
            if (!Guild.AllianceGuilds.ContainsKey(guild))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6728
                });
            }
            else
            {
                Guild.RemoveAllyGuild(Character, guild);
                NetworkManager.SendAnnouncement($"[{Guild}]解除了和[{guild}]的行会结盟.");
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6669
            });
        }
    }

    public void RequestReleaseHostileGuild(int id)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.ID == id)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6694
            });
        }
        else if (Guild.Members[Character] >= GuildRank.长老)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.GuildInfoTable.DataSheet.TryGetValue(id, out value) && value is GuildInfo guild)
        {
            if (!Guild.HostileGuilds.ContainsKey(guild))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6826
                });
            }
            else if (guild.HostileReleaseApplications.ContainsKey(Guild))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6708
                });
            }
            else
            {
                Guild.RequestReleaseHostileGuild(Character, guild);
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6669
            });
        }
    }

    public void 处理解除申请(int id, byte 应答类型)
    {
        DBObject value;
        if (Guild == null)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6668
            });
        }
        else if (Guild.ID == id)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6694
            });
        }
        else if (Guild.Members[Character] >= GuildRank.长老)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 6709
            });
        }
        else if (Session.GuildInfoTable.DataSheet.TryGetValue(id, out value) && value is GuildInfo guild)
        {
            if (!Guild.HostileGuilds.ContainsKey(guild))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 6826
                });
            }
            else if (!Guild.HostileReleaseApplications.ContainsKey(guild))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5899
                });
            }
            else if (应答类型 == 2)
            {
                if (MapManager.SandCityStage >= 2 && ((Guild == SystemInfo.Info.OccupyGuild.V && MapManager.SiegeGuilds.Contains(guild)) || (guild == SystemInfo.Info.OccupyGuild.V && MapManager.SiegeGuilds.Contains(Guild))))
                {
                    Enqueue(new GameErrorMessagePacket
                    {
                        ErrorCode = 6800
                    });
                }
                else
                {
                    Guild.RemoveHostileGuild(guild);
                    NetworkManager.SendAnnouncement($"[{Guild}]解除了和[{guild}]的行会敌对.");
                    Guild.HostileReleaseApplications.Remove(guild);
                }
            }
            else
            {
                Guild.Broadcast(new 解除敌对列表
                {
                    申请类型 = 2,
                    行会编号 = guild.ID
                });
                Guild.HostileReleaseApplications.Remove(guild);
            }
        }
        else
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 6669
            });
        }
    }
    #endregion

    public void 查询师门成员()
    {
        if (Mentor != null)
        {
            Enqueue(new 同步师门成员
            {
                字节数据 = Mentor.成员数据()
            });
        }
    }

    public void 查询师门奖励()
    {
        if (Mentor != null)
        {
            Enqueue(new 同步师门奖励
            {
                Description = Mentor.奖励数据(Character)
            });
        }
    }

    public void 查询拜师名册()
    {
    }

    public void 查询收徒名册()
    {
    }

    public void 玩家申请拜师(int 对象编号)
    {
        if (Session.CharacterInfoTable.DataSheet.TryGetValue(对象编号, out var value) && value is CharacterInfo character)
        {
            if (Mentor != null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5895 });
            }
            else if (CurrentLevel >= 0)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5915 });
            }
            else if (character.CurrentLevel < 1)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5894 });
            }
            else if (character.CurrentMentor != null && character.ID != character.CurrentMentor.MasterID)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5890 });
            }
            else if (character.CurrentMentor != null && character.CurrentMentor.StudentCount >= 3)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5891 });
            }
            else if (character.Online)
            {
                if (character.CurrentMentor == null)
                {
                    character.CurrentMentor = new MentorInfo(character);
                }
                character.CurrentMentor.ApplicationsList[ObjectID] = SEngine.CurrentTime;
                Enqueue(new 申请拜师应答
                {
                    对象编号 = character.ID
                });
                character.Enqueue(new 申请拜师提示
                {
                    对象编号 = ObjectID
                });
            }
            else
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5892 });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 5913 });
        }
    }

    public void 同意拜师申请(int 对象编号)
    {
        var character = Session.GetCharacter(对象编号);
        if (character != null)
        {
            if (CurrentLevel < 99)
            {
                Connection?.Disconnect(new Exception("错误操作: 同意拜师申请, 错误: 自身等级不够."));
            }
            else if (character.CurrentLevel >= 30)
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 5894
                });
            }
            else if (character.CurrentMentor != null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5895 });
            }
            else if (Mentor == null)
            {
                Connection?.Disconnect(new Exception("错误操作: 同意拜师申请, 错误: 尚未创建师门."));
            }
            else if (Mentor.MasterID != ObjectID)
            {
                Connection?.Disconnect(new Exception("错误操作: 同意拜师申请, 错误: 自身尚未出师."));
            }
            else if (!Mentor.ApplicationsList.ContainsKey(character.ID))
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5898 });
            }
            else if (Mentor.StudentCount >= 3)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5891 });
            }
            else if (character.Online)
            {
                if (Mentor == null)
                {
                    Mentor = new MentorInfo(this.Character);
                }
                Mentor.添加徒弟(character);
                Mentor.Broadcast(new 收徒成功提示
                {
                    对象编号 = character.ID
                });
                Enqueue(new 拜师申请通过
                {
                    对象编号 = character.ID
                });
                Enqueue(new 同步师门成员
                {
                    字节数据 = Mentor.成员数据()
                });
                character.Enqueue(new 同步师门成员
                {
                    字节数据 = Mentor.成员数据()
                });
                character.Enqueue(new 同步师门信息
                {
                    师门参数 = 1
                });
            }
            else
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5893 });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 5913 });
        }
    }

    public void 拒绝拜师申请(int 对象编号)
    {
        var character = Session.GetCharacter(对象编号);
        if (character != null)
        {
            if (Mentor == null)
            {
                Connection?.Disconnect(new Exception("错误操作: 拒绝拜师申请, 错误: 尚未创建师门."));
                return;
            }
            if (Mentor.MasterID != ObjectID)
            {
                Connection?.Disconnect(new Exception("错误操作: 拒绝拜师申请, 错误: 自身尚未出师."));
                return;
            }
            if (!Mentor.ApplicationsList.ContainsKey(character.ID))
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5898 });
                return;
            }
            Enqueue(new 拜师申请拒绝
            {
                对象编号 = character.ID
            });
            if (Mentor.ApplicationsList.Remove(character.ID))
            {
                character.Enqueue(new 拒绝拜师提示
                {
                    对象编号 = ObjectID
                });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 5913 });
        }
    }

    public void 玩家申请收徒(int 对象编号)
    {
        var character = Session.GetCharacter(对象编号);
        if (character != null)
        {
            if (CurrentLevel < 99)
            {
                Connection?.Disconnect(new Exception("错误操作: 玩家申请收徒, 错误: 自身等级不够."));
            }
            else if (character.CurrentLevel >= 30)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5894 });
            }
            else if (character.CurrentMentor != null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5895 });
            }
            else if (Mentor != null && Mentor.MasterID != ObjectID)
            {
                Connection?.Disconnect(new Exception("错误操作: 玩家申请收徒, 错误: 自身尚未出师."));
            }
            else if (Mentor != null && Mentor.StudentCount >= 3)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5891 });
            }
            else if (character.Online)
            {
                if (Mentor == null)
                {
                    Mentor = new MentorInfo(this.Character);
                }
                Mentor.InvitationList[character.ID] = SEngine.CurrentTime;
                Enqueue(new 申请收徒应答
                {
                    对象编号 = character.ID
                });
                character.Enqueue(new 申请收徒提示
                {
                    对象编号 = ObjectID,
                    对象等级 = CurrentLevel,
                    对象声望 = 师门声望
                });
            }
            else
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5893 });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 5913 });
        }
    }

    public void 同意收徒申请(int 对象编号)
    {
        var character = Session.GetCharacter(对象编号);
        if (character != null)
        {
            if (CurrentLevel > 99)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5915 });
            }
            else if (Mentor != null)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5895 });
            }
            else if (character.CurrentLevel < 30)
            {
                Connection?.Disconnect(new Exception("错误操作: 同意收徒申请, 错误: 对方等级不够."));
            }
            else if (character.CurrentMentor == null)
            {
                Connection?.Disconnect(new Exception("错误操作: 同意收徒申请, 错误: 对方没有师门."));
            }
            else if (character.CurrentMentor.MasterID != character.ID)
            {
                Connection?.Disconnect(new Exception("错误操作: 同意收徒申请, 错误: 对方尚未出师."));
            }
            else if (!character.CurrentMentor.InvitationList.ContainsKey(ObjectID))
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5899 });
            }
            else if (character.CurrentMentor.StudentCount >= 3)
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5891 });
            }
            else if (character.Online)
            {
                Enqueue(new 收徒申请同意
                {
                    对象编号 = character.ID
                });
                if (character.CurrentMentor == null)
                {
                    character.CurrentMentor = new MentorInfo(character);
                }
                character.Enqueue(new 收徒成功提示
                {
                    对象编号 = ObjectID
                });
                character.CurrentMentor.Broadcast(new 收徒成功提示
                {
                    对象编号 = ObjectID
                });
                character.CurrentMentor.添加徒弟(this.Character);
                Enqueue(new 同步师门成员
                {
                    字节数据 = character.CurrentMentor.成员数据()
                });
                Enqueue(new 同步师门信息
                {
                    师门参数 = 1
                });
            }
            else
            {
                Enqueue(new SocialErrorPacket { ErrorCode = 5892 });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket { ErrorCode = 5913 });
        }
    }

    public void 拒绝收徒申请(int 对象编号)
    {
        var character = Session.GetCharacter(对象编号);
        if (character != null)
        {
            if (character.Mentor == null)
            {
                Connection?.Disconnect(new Exception("错误操作: 拒绝收徒申请, 错误: 尚未创建师门."));
                return;
            }
            if (character.CurrentMentor.MasterID != character.ID)
            {
                Connection?.Disconnect(new Exception("错误操作: 拒绝拜师申请, 错误: 自身尚未出师."));
                return;
            }
            if (!character.CurrentMentor.InvitationList.ContainsKey(ObjectID))
            {
                Enqueue(new SocialErrorPacket
                {
                    ErrorCode = 5899
                });
                return;
            }
            Enqueue(new 收徒申请拒绝
            {
                对象编号 = character.ID
            });
            if (character.CurrentMentor.InvitationList.Remove(ObjectID))
            {
                character.Enqueue(new 拒绝收徒提示
                {
                    对象编号 = ObjectID
                });
            }
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 5913
            });
        }
    }

    public void 逐出师门申请(int 对象编号)
    {
        if (CurrentLevel < 99)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 5915
            });
        }
        DBObject value;
        if (Mentor == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 逐出师门申请, 错误: 自身没有师门."));
        }
        else if (Mentor.MasterID != ObjectID)
        {
            Connection?.Disconnect(new Exception("错误操作: 逐出师门申请, 错误: 自己不是师父."));
        }
        else if (Session.CharacterInfoTable.DataSheet.TryGetValue(对象编号, out value) && value is CharacterInfo character && Mentor.StudentsInfo.Contains(character))
        {
            Enqueue(new 逐出师门应答
            {
                对象编号 = character.ID
            });
            Mentor.Broadcast(new 逐出师门提示
            {
                对象编号 = character.ID
            });
            int num = Mentor.徒弟出师金币(character);
            int num2 = Mentor.徒弟出师经验(character);
            if (MapManager.Players.TryGetValue(character.ID, out var value2))
            {
                value2.Gold += num;
                value2.GainExperience(null, num2);
            }
            else
            {
                character.GainExperience(num2);
                character.Gold += num;
            }
            Mentor.移除徒弟(character);
            character.CurrentMentor = null;
            character.Enqueue(new 同步师门信息
            {
                师门参数 = (byte)((character.CurrentLevel >= 30) ? 2u : 0u)
            });
            character.SendMail(new MailInfo(null, "你被逐出了师门", "你被[" + Name + "]逐出了师门.", null));
        }
        else
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 5913
            });
        }
    }

    public void 离开师门申请()
    {
        if (CurrentLevel < 99)
        {
            Enqueue(new SocialErrorPacket
            {
                ErrorCode = 5915
            });
        }
        if (Mentor == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 离开师门申请, 错误: 自身没有师门."));
        }
        else if (Mentor.StudentsInfo.Contains(Character))
        {
            Enqueue(new 离开师门应答());
            Mentor.Master.Enqueue(new 离开师门提示
            {
                对象编号 = ObjectID
            });
            Mentor.Broadcast(new 离开师门提示
            {
                对象编号 = ObjectID
            });
            Mentor.Master.SendMail(new MailInfo(null, "徒弟叛离师门", "你的徒弟[" + Name + "]已经叛离了师门.", null));
            int num = Mentor.徒弟提供金币(Character);
            int num2 = Mentor.徒弟提供声望(Character);
            int num3 = Mentor.徒弟提供金币(Character);
            if (MapManager.Players.TryGetValue(Mentor.Master.ID, out var value))
            {
                value.Gold += num;
                value.师门声望 += num2;
                value.GainExperience(null, num3);
            }
            else
            {
                Mentor.Master.GainExperience(num3);
                Mentor.Master.Gold += num;
                Mentor.Master.师门声望 += num2;
            }
            Mentor.移除徒弟(Character);
            Character.CurrentMentor = null;
            Enqueue(new 同步师门信息
            {
                师门参数 = 师门参数
            });
        }
        else
        {
            Connection?.Disconnect(new Exception("错误操作: 离开师门申请, 错误: 自身不是徒弟."));
        }
    }

    public void 提交出师申请()
    {
        if (Mentor == null)
        {
            Connection?.Disconnect(new Exception("错误操作: 提交出师申请, 错误: 自身没有师门."));
            return;
        }
        if (CurrentLevel < 99)
        {
            Connection?.Disconnect(new Exception("错误操作: 提交出师申请, 错误: 自身等级不足."));
            return;
        }
        if (!Mentor.StudentsInfo.Contains(Character))
        {
            Connection?.Disconnect(new Exception("错误操作: 提交出师申请, 错误: 自己不是徒弟."));
            return;
        }
        int num = Mentor.徒弟提供金币(Character);
        int num2 = Mentor.徒弟提供声望(Character);
        int num3 = Mentor.徒弟提供金币(Character);
        if (MapManager.Players.TryGetValue(Mentor.Master.ID, out var value))
        {
            value.Gold += num;
            value.师门声望 += num2;
            value.GainExperience(null, num3);
        }
        else
        {
            Mentor.Master.GainExperience(num3);
            Mentor.Master.Gold += num;
            Mentor.Master.师门声望 += num2;
        }
        Gold += Mentor.徒弟出师金币(Character);
        Enqueue(new 同步货币数量
        {
            Description = 全部货币描述()
        });
        GainExperience(null, Mentor.徒弟出师经验(Character));
        Mentor.Master.Enqueue(new 徒弟成功出师
        {
            对象编号 = ObjectID
        });
        Mentor.移除徒弟(Character);
        Character.CurrentMentor = null;
        Enqueue(new 徒弟成功出师
        {
            对象编号 = ObjectID
        });
        Enqueue(new 清空师门信息());
        Enqueue(new 同步师门信息
        {
            师门参数 = 师门参数
        });
    }

    public void 更改收徒推送(bool 收徒推送)
    {
    }

    public void 玩家申请交易(int 对象编号)
    {
        if (!Dead && StallState <= 0 && TradeState < 3)
        {
            PlayerObject value;
            if (CurrentLevel < 30 && CurrentDegree == 0)
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 65538
                });
            }
            else if (对象编号 == ObjectID)
            {
                CurrentTrade?.BreakTrade();
                Connection?.Disconnect(new Exception("错误操作: 玩家申请交易. 错误: 不能交易自己"));
            }
            else if (!MapManager.Players.TryGetValue(对象编号, out value))
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5635
                });
            }
            else if (CurrentMap != value.CurrentMap)
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5636
                });
            }
            else if (GetDistance(value) > 12)
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5636
                });
            }
            else if (!value.Dead && value.StallState == 0 && value.TradeState < 3)
            {
                CurrentTrade?.BreakTrade();
                value.CurrentTrade?.BreakTrade();
                CurrentTrade = (value.CurrentTrade = new TradingObject(this, value));
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5633
                });
            }
            else
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5637
                });
            }
        }
        else
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5634
            });
        }
    }

    public void 玩家同意交易(int 对象编号)
    {
        if (!Dead && StallState == 0 && TradeState == 2)
        {
            PlayerObject value;
            if (CurrentLevel < 30 && CurrentDegree == 0)
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 65538
                });
            }
            else if (对象编号 == ObjectID)
            {
                CurrentTrade?.BreakTrade();
                Connection?.Disconnect(new Exception("错误操作: 玩家申请交易. 错误: 不能交易自己"));
            }
            else if (!MapManager.Players.TryGetValue(对象编号, out value))
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5635
                });
            }
            else if (CurrentMap != value.CurrentMap)
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5636
                });
            }
            else if (GetDistance(value) > 12)
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5636
                });
            }
            else if (!value.Dead && value.StallState == 0 && value.TradeState == 1)
            {
                if (value == CurrentTrade.Requester && this == value.CurrentTrade.Recipient)
                {
                    CurrentTrade.UpdateState(3);
                    return;
                }
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5634
                });
            }
            else
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 5637
                });
            }
        }
        else
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5634
            });
        }
    }

    public void 玩家结束交易()
    {
        CurrentTrade?.BreakTrade();
    }

    public void 玩家放入金币(int 金币数量)
    {
        if (TradeState != 3)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5634
            });
        }
        else if (CurrentMap != CurrentTrade.Opponent(this).CurrentMap)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else if (GetDistance(CurrentTrade.Opponent(this)) > 12)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else if (金币数量 > 0 && this.Gold >= 金币数量 + (int)Math.Ceiling((float)金币数量 * 0.04f))
        {
            if (CurrentTrade.金币重复(this))
            {
                CurrentTrade?.BreakTrade();
                Connection?.Disconnect(new Exception("错误操作: 玩家放入金币. 错误: 重复放入金币"));
            }
            else
            {
                CurrentTrade.AddGold(this, 金币数量);
            }
        }
        else
        {
            CurrentTrade?.BreakTrade();
            Connection?.Disconnect(new Exception("错误操作: 玩家放入金币. 错误: 金币数量错误"));
        }
    }

    public void 玩家放入物品(byte 放入位置, byte 放入物品, byte 背包类型, byte 物品位置)
    {
        ItemInfo v;
        if (TradeState != 3)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5634
            });
        }
        else if (CurrentMap != CurrentTrade.Opponent(this).CurrentMap)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else if (GetDistance(CurrentTrade.Opponent(this)) > 12)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else if (放入位置 >= 6)
        {
            CurrentTrade?.BreakTrade();
            Connection?.Disconnect(new Exception("错误操作: 玩家放入物品. 错误: 放入位置错误"));
        }
        else if (CurrentTrade.物品重复(this, 放入位置))
        {
            CurrentTrade?.BreakTrade();
            Connection?.Disconnect(new Exception("错误操作: 玩家放入物品. 错误: 放入位置重复"));
        }
        else if (放入物品 != 1)
        {
            CurrentTrade?.BreakTrade();
            Connection?.Disconnect(new Exception("错误操作: 玩家放入物品. 错误: 禁止取回物品"));
        }
        else if (背包类型 != 1)
        {
            CurrentTrade?.BreakTrade();
            Connection?.Disconnect(new Exception("错误操作: 玩家放入物品. 错误: 背包类型错误"));
        }
        else if (!Inventory.TryGetValue(物品位置, out v))
        {
            CurrentTrade?.BreakTrade();
            Connection?.Disconnect(new Exception("错误操作: 玩家放入物品. 错误: 物品数据错误"));
        }
        else if (v.IsBound)
        {
            CurrentTrade?.BreakTrade();
            Connection?.Disconnect(new Exception("错误操作: 玩家放入物品. 错误: 放入绑定物品"));
        }
        else if (CurrentTrade.物品重复(this, v))
        {
            CurrentTrade?.BreakTrade();
            Connection?.Disconnect(new Exception("错误操作: 玩家放入物品. 错误: 重复放入物品"));
        }
        else
        {
            CurrentTrade.AddItem(this, v, 放入位置);
        }
    }

    public void 玩家锁定交易()
    {
        if (TradeState != 3)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5634
            });
        }
        else if (CurrentMap != CurrentTrade.Opponent(this).CurrentMap)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else if (GetDistance(CurrentTrade.Opponent(this)) > 12)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else
        {
            CurrentTrade.UpdateState(4, this);
        }
    }

    public void 玩家解锁交易()
    {
        if (TradeState < 4)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5634
            });
        }
        else if (CurrentMap != CurrentTrade.Opponent(this).CurrentMap)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else if (GetDistance(CurrentTrade.Opponent(this)) > 12)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else
        {
            CurrentTrade.UpdateState(3);
        }
    }

    public void 玩家确认交易()
    {
        PlayerObject 玩家;
        if (TradeState != 4)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5634
            });
        }
        else if (CurrentMap != CurrentTrade.Opponent(this).CurrentMap)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else if (GetDistance(CurrentTrade.Opponent(this)) > 12)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5636
            });
        }
        else if (CurrentTrade.OpponentState(this) != 5)
        {
            CurrentTrade.UpdateState(5, this);
        }
        else if (CurrentTrade.背包已满(out 玩家))
        {
            CurrentTrade?.BreakTrade();
            CurrentTrade.Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 5639,
                Param1 = 玩家.ObjectID
            });
        }
        else
        {
            CurrentTrade.UpdateState(5, this);
            CurrentTrade.ExchangeItems();
        }
    }

    public void 玩家准备摆摊()
    {
        if (!Dead && TradeState < 3 && Character.CurrentMap.V == Config.可摆摊地图编号)
        {
            if (CurrentLevel < Config.可摆摊等级 && CurrentDegree == 0)
            {
                CurrentTrade?.BreakTrade();
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 65538
                });
            }
            if (!CurrentMap.IsSafeArea(CurrentPosition))
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 2818
                });
            }
            else if (CurrentStall != null)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 2825
                });
            }
            else if (CurrentMap.IsSafeArea(CurrentPosition))
            {
                CurrentStall = new StallObject();
                SendPacket(new 摆摊状态改变
                {
                    对象编号 = ObjectID,
                    摊位状态 = 1
                });
            }
            else
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 2818
                });
            }
        }
    }

    public void 玩家重整摊位()
    {
        if (StallState != 2)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2817
            });
            return;
        }
        CurrentStall.Status = 1;
        SendPacket(new 摆摊状态改变
        {
            对象编号 = ObjectID,
            摊位状态 = StallState
        });
    }

    public void 玩家开始摆摊()
    {
        if (StallState != 1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2817
            });
        }
        if (CurrentLevel < Config.可摆摊等级 && CurrentDegree == 0)
        {
            CurrentTrade?.BreakTrade();
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 65538
            });
        }
        if (Config.可摆摊货币选择 == 0)
        {
            if (CurrentStall.TotalPrice + Gold > int.MaxValue)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 2827
                });
            }
            else
            {
                CurrentStall.Status = 2;
                SendPacket(new 摆摊状态改变
                {
                    对象编号 = ObjectID,
                    摊位状态 = StallState
                });
            }
        }
        if (Config.可摆摊货币选择 == 1)
        {
            if (CurrentStall.TotalPrice + Ingot > int.MaxValue)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 2827
                });
                return;
            }
            CurrentStall.Status = 2;
            SendPacket(new 摆摊状态改变
            {
                对象编号 = ObjectID,
                摊位状态 = StallState
            });
        }
        else
        {
            CurrentStall.Status = 2;
            SendPacket(new 摆摊状态改变
            {
                对象编号 = ObjectID,
                摊位状态 = StallState
            });
        }
    }

    public void 玩家收起摊位()
    {
        if (StallState == 0)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2817
            });
            return;
        }
        CurrentStall = null;
        SendPacket(new 摆摊状态改变
        {
            对象编号 = ObjectID,
            摊位状态 = StallState
        });
    }

    public void 放入摊位物品(byte 放入位置, byte 背包类型, byte 物品位置, ushort 物品数量, int 物品价格)
    {
        if (StallState != 1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2817
            });
            return;
        }
        if (放入位置 >= 10)
        {
            Connection?.Disconnect(new Exception("错误操作: 放入摊位物品, 错误: 放入位置错误"));
            return;
        }
        if (CurrentStall.Items.ContainsKey(放入位置))
        {
            Connection?.Disconnect(new Exception("错误操作: 放入摊位物品, 错误: 重复放入位置"));
            return;
        }
        if (背包类型 != 1)
        {
            Connection?.Disconnect(new Exception("错误操作: 放入摊位物品, 错误: 背包类型错误"));
            return;
        }
        if (物品价格 < 100)
        {
            Connection?.Disconnect(new Exception("错误操作: 放入摊位物品, 错误: 物品价格错误"));
            return;
        }
        if (!Inventory.TryGetValue(物品位置, out var v))
        {
            Connection?.Disconnect(new Exception("错误操作: 放入摊位物品, 错误: 选中物品为空"));
            return;
        }
        if (CurrentStall.Items.Values.FirstOrDefault((ItemInfo O) => O.Location.V == 物品位置) != null)
        {
            Connection?.Disconnect(new Exception("错误操作: 放入摊位物品, 错误: 重复放入物品"));
            return;
        }
        if (v.IsBound)
        {
            Connection?.Disconnect(new Exception("错误操作: 放入摊位物品, 错误: 放入绑定物品"));
            return;
        }
        if (物品数量 > ((!v.CanStack) ? 1 : v.Dura.V))
        {
            Connection?.Disconnect(new Exception("错误操作: 放入摊位物品, 错误: 物品数量错误"));
            return;
        }
        CurrentStall.Items.Add(放入位置, v);
        CurrentStall.Quantities.Add(v, 物品数量);
        CurrentStall.Prices.Add(v, 物品价格);
        Enqueue(new 添加摆摊物品
        {
            放入位置 = 放入位置,
            背包类型 = 背包类型,
            物品位置 = 物品位置,
            物品数量 = 物品数量,
            物品价格 = 物品价格
        });
    }

    public void 取回摊位物品(byte 取回位置)
    {
        if (StallState != 1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2817
            });
            return;
        }
        if (!CurrentStall.Items.TryGetValue(取回位置, out var value))
        {
            Connection?.Disconnect(new Exception("错误操作: 取回摊位物品, 错误: 选中物品为空"));
            return;
        }
        CurrentStall.Prices.Remove(value);
        CurrentStall.Quantities.Remove(value);
        CurrentStall.Items.Remove(取回位置);
        Enqueue(new 移除摆摊物品
        {
            取回位置 = 取回位置
        });
    }

    public void 更改摊位名字(string 摊位名字)
    {
        if (StallState != 1)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2817
            });
            return;
        }
        CurrentStall.Name = 摊位名字;
        SendPacket(new 变更摊位名字
        {
            对象编号 = ObjectID,
            摊位名字 = 摊位名字
        });
    }

    public void 升级摊位外观(byte 外观编号)
    {
    }

    public void 玩家打开摊位(int 对象编号)
    {
        if (!MapManager.Players.TryGetValue(对象编号, out var value))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2828
            });
        }
        else if (value.StallState != 2)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2828
            });
        }
        else
        {
            Enqueue(new 同步摊位数据
            {
                ObjectID = value.ObjectID,
                Description = value.CurrentStall.摊位描述()
            });
        }
    }

    public void 购买摊位物品(int 对象编号, byte 物品位置, ushort 购买数量)
    {
        if (!MapManager.Players.TryGetValue(对象编号, out var value))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2828
            });
            return;
        }
        if (value.StallState != 2)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2828
            });
            return;
        }
        if (!value.CurrentStall.Items.TryGetValue(物品位置, out var value2))
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2824
            });
            return;
        }
        if (value.CurrentStall.Quantities[value2] < 购买数量)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2830
            });
            return;
        }
        if (Config.可摆摊货币选择 == 0)
        {
            if (Gold < value.CurrentStall.Prices[value2] * 购买数量)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 2561
                });
                return;
            }
            byte b = FindEmptyInventoryIndex();
            if (b == byte.MaxValue)
            {
                Enqueue(new GameErrorMessagePacket
                {
                    ErrorCode = 1793
                });
                return;
            }
            int num = value.CurrentStall.Prices[value2] * 购买数量;
            Gold -= num;
            Character.TradeGold.V += num;
            value.Gold += (int)((float)num * 0.95f);
            if ((value.CurrentStall.Quantities[value2] -= 购买数量) <= 0)
            {
                value.Inventory.Remove(value2.Location.V);
                value.Enqueue(new DeleteItemPacket
                {
                    Grid = 1,
                    Position = value2.Location.V
                });
            }
            else
            {
                value2.Dura.V -= 购买数量;
                value.Enqueue(new SyncItemPacket
                {
                    Description = value2.ToArray()
                });
            }
            if (value.CurrentStall.Quantities[value2] <= 0)
            {
                Inventory[b] = value2;
                value2.Location.V = b;
                value2.Grid.V = 1;
            }
            else
            {
                Inventory[b] = new ItemInfo(value2.Info, value2.Owner.V, 1, b, 购买数量);
            }
            Enqueue(new SyncItemPacket
            {
                Description = Inventory[b].ToArray()
            });
            Enqueue(new 购入摊位物品
            {
                对象编号 = value.ObjectID,
                物品位置 = 物品位置,
                剩余数量 = value.CurrentStall.Quantities[value2]
            });
            value.Enqueue(new 售出摊位物品
            {
                物品位置 = 物品位置,
                售出数量 = 购买数量,
                售出收益 = (int)((float)num * 0.95f)
            });
            SEngine.AddSystemLog($"[{Name}][{CurrentLevel}级] 购买了 [{value.Name}][{value.CurrentLevel}级] 的摊位物品[{Inventory[b]}] * {购买数量}, 花费金币[{num}]");
            if (value.CurrentStall.Quantities[value2] <= 0)
            {
                value.CurrentStall.Items.Remove(物品位置);
                value.CurrentStall.Prices.Remove(value2);
                value.CurrentStall.Quantities.Remove(value2);
            }
            if (value.CurrentStall.Quantities.Count <= 0)
            {
                value.玩家收起摊位();
            }
        }
        if (Config.可摆摊货币选择 != 1)
        {
            return;
        }
        if (Ingot < value.CurrentStall.Prices[value2] * 购买数量)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 2561
            });
            return;
        }
        byte b3 = FindEmptyInventoryIndex();
        if (b3 == byte.MaxValue)
        {
            Enqueue(new GameErrorMessagePacket
            {
                ErrorCode = 1793
            });
            return;
        }
        int num2 = value.CurrentStall.Prices[value2] * 购买数量;
        Ingot -= num2;
        Enqueue(new SyncIngotsPacket
        {
            Amount = Ingot
        });
        value.Ingot += (int)((float)num2 * 0.95f);
        value.Character.Enqueue(new SyncIngotsPacket
        {
            Amount = value.Character.Ingot
        });
        if ((value.CurrentStall.Quantities[value2] -= 购买数量) <= 0)
        {
            value.Inventory.Remove(value2.Location.V);
            value.Enqueue(new DeleteItemPacket
            {
                Grid = 1,
                Position = value2.Location.V
            });
        }
        else
        {
            value2.Dura.V -= 购买数量;
            value.Enqueue(new SyncItemPacket
            {
                Description = value2.ToArray()
            });
        }
        if (value.CurrentStall.Quantities[value2] <= 0)
        {
            Inventory[b3] = value2;
            value2.Location.V = b3;
            value2.Grid.V = 1;
        }
        else
        {
            Inventory[b3] = new ItemInfo(value2.Info, value2.Owner.V, 1, b3, 购买数量);
        }
        Enqueue(new SyncItemPacket
        {
            Description = Inventory[b3].ToArray()
        });
        Enqueue(new 购入摊位物品
        {
            对象编号 = value.ObjectID,
            物品位置 = 物品位置,
            剩余数量 = value.CurrentStall.Quantities[value2]
        });
        value.Enqueue(new 售出摊位物品
        {
            物品位置 = 物品位置,
            售出数量 = 购买数量,
            售出收益 = (int)((float)num2 * 0.95f)
        });
        SEngine.AddSystemLog($"[{Name}][{CurrentLevel}级] 购买了 [{value.Name}][{value.CurrentLevel}级] 的摊位物品[{Inventory[b3]}] * {购买数量}, 花费元宝[{num2}]");
        if (value.CurrentStall.Quantities[value2] <= 0)
        {
            value.CurrentStall.Items.Remove(物品位置);
            value.CurrentStall.Prices.Remove(value2);
            value.CurrentStall.Quantities.Remove(value2);
        }
        if (value.CurrentStall.Quantities.Count <= 0)
        {
            value.玩家收起摊位();
        }
    }

    public void 玩家拾取移动(Point 终点坐标)
    {
        if (SEngine.CurrentTime < RoamTime)
        {
            return;
        }
        if (CanWalk())
        {
            Point point = Compute.GetFrontPosition(CurrentPosition, 终点坐标, 1);
            if (CurrentMap.CanMove(point))
            {
                CurrentDirection = Compute.DirectionFromPoint(CurrentPosition, point);
                if (!Dead)
                {
                    WalkTo(point);
                }
            }
        }
        RoamTime = SEngine.CurrentTime.AddMilliseconds(50.0);
    }

    public void 获得最近对象(MapObject 待判断目标)
    {
        身边怪物数量 = 0;
        if (挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
        {
            if (GetDistance(挂机参数[挂机特殊分类.待攻击怪物]) > GetDistance(待判断目标))
            {
                挂机参数[挂机特殊分类.待攻击怪物] = 待判断目标;
            }
            if (GetDistance(待判断目标) == 1)
            {
                身边怪物数量++;
            }
        }
        else
        {
            挂机参数[挂机特殊分类.待攻击怪物] = 待判断目标;
        }
    }

    public int 判断点位类型(Point 坐标)
    {
        foreach (MapObject obj in CurrentMap[坐标].ToList())
        {
            if (obj.ObjectType == GameObjectType.Monster && obj.CanBeHit)
            {
                return 1;
            }
            if (obj.ObjectType == GameObjectType.Pet && obj.CanBeHit)
            {
                return 2;
            }
        }
        if (!CurrentMap.CanMove(坐标))
        {
            return 3;
        }
        return 0;
    }

    public void 挂机道士获得召唤参数()
    {
        if (Skills.ContainsKey(3003))
        {
            挂机技能框架[挂机技能序列.道士召唤一] = 3003;
        }
        if (Skills.ContainsKey(3008))
        {
            挂机技能框架[挂机技能序列.道士召唤二] = 3008;
            挂机技能框架.Remove(挂机技能序列.道士召唤一);
        }
        if (Skills.ContainsKey(3024))
        {
            挂机技能框架[挂机技能序列.道士召唤三] = 3024;
        }
    }
    
    #region Auto System
    public async void 自动战斗开始(bool 自动战斗, byte x战斗范围, bool x开启空闲使用道具, short x空闲时间, int x道具ID, byte xUnk1, int x技能ID, bool x开启自动拾取, byte x拾取范围, bool x开启预留背包, byte x预留格数, bool x优先战斗, bool x不捡取他人装备, bool x不抢怪, bool xUnk2)
    {
        不抢怪 = x不抢怪;
        不捡取他人装备 = x不捡取他人装备;
        优先战斗 = x优先战斗;
        开启预留背包 = x开启预留背包;
        预留格数 = x预留格数;
        CombatRange = x战斗范围;
        无法移动时间 = x空闲时间;
        道具ID = x道具ID;
        技能ID = x技能ID;
        开启自动拾取 = x开启自动拾取;
        拾取范围 = x拾取范围;
        if (Config.CurrentVersion < 1 || (!(Config.挂机权限选项 == "GGXZZIIUKBBAQ") && Config.CurrentVersion < 3) || !Character.Titles.ContainsKey(Config.挂机称号选项) || CurrentLevel <= Config.AutoBattleLevel || 自动战斗 == AutoBattle)
        {
            return;
        }
        if (自动战斗 && !AutoBattle)
        {
            挂机技能框架[挂机技能序列.默认技能] = 技能ID;
            if (Job == GameObjectRace.Taoist)
            {
                挂机道士获得召唤参数();
            }
            AutoBattle = true;
            CurrentAutoState = AutoSystem.SearchMonster;
            await Task.Factory.StartNew(() => HandleAutoProcess());
        }
        else
        {
            if (自动战斗)
            {
                // TODO: Why sending client packet to client?
                SendPacket(new 自动战斗取消
                {
                    自动战斗 = 0
                });
            }
            AutoBattle = false;
            CurrentAutoState = AutoSystem.Disabled;
            挂机技能框架.Clear();
            挂机参数.Clear();
        }
    }

    public async Task HandleAutoProcess()
    {
        try
        {
            while (AutoBattle)
            {
                if (Dead || StallState > 0 || TradeState >= 3)
                {
                    AutoBattle = false;
                    CurrentAutoState = AutoSystem.Disabled;
                }

                if (拾取停止次数 > 5)
                {
                    挂机参数.Remove(挂机特殊分类.待攻击怪物);
                    挂机参数.Remove(挂机特殊分类.待拾取物品);
                    拾取停止次数 = 0;
                    CurrentAutoState = AutoSystem.SearchMonster;
                }

                try
                {
                    await Task.Delay(80);
                    switch (CurrentAutoState)
                    {
                        case AutoSystem.SearchMonster:
                            if (!挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
                            {
                                SearchMonster();
                            }
                            else
                            {
                                CurrentAutoState = AutoSystem.判断距离;
                            }
                            break;
                        case AutoSystem.判断距离:
                            await Task.Delay(30);
                            判断距离();
                            break;
                        case AutoSystem.GoToTarget:
                            await Task.Delay(30);
                            GoToTarget();
                            break;
                        case AutoSystem.StartAttacking:
                            await Task.Delay(250);
                            StartAttacking();
                            break;
                        case AutoSystem.AttackingComplete:
                            await Task.Delay(99);
                            AttackingComplete();
                            break;
                        case AutoSystem.PickUpDrops:
                            await Task.Delay(100);
                            PickUpDrops();
                            break;
                        case AutoSystem.StartRoaming:
                            await Task.Delay(220);
                            StartRoaming();
                            break;
                        case AutoSystem.RoamingComplete:
                            if (挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
                            {
                                CurrentAutoState = AutoSystem.判断距离;
                            }
                            else if (挂机参数.ContainsKey(挂机特殊分类.待拾取物品))
                            {
                                CurrentAutoState = AutoSystem.PickUpDrops;
                            }
                            else
                            {
                                CurrentAutoState = AutoSystem.SearchMonster;
                            }
                            break;
                        case AutoSystem.Disabled:
                            挂机参数.Clear();
                            return;
                    }
                }
                catch (Exception)
                {
                }
            }
        }
        catch (Exception)
        {
            AutoBattle = false;
        }
    }

    public void SearchMonster()
    {
        try
        {
            if (!AutoBattle)
            {
                CurrentAutoState = AutoSystem.Disabled;
                return;
            }
            foreach (MapObject obj in Neighbors.ToList())
            {
                Task.Delay(100);
                if (obj.CanBeHit && GetDistance(obj) <= CombatRange && obj.ObjectType == GameObjectType.Monster && GetRelationship(obj) == GameObjectRelationship.Hostile)
                {
                    获得最近对象(obj);
                }
            }
            if (挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
            {
                CurrentAutoState = AutoSystem.判断距离;
            }
            else
            {
                CurrentAutoState = AutoSystem.StartRoaming;
            }
        }
        catch (Exception)
        {
        }
    }

    public void GoToTarget()
    {
        try
        {
            if (!AutoBattle)
            {
                CurrentAutoState = AutoSystem.Disabled;
                return;
            }
            if (CheckStatus(GameObjectState.BusyGreen | GameObjectState.Paralyzed | GameObjectState.Unconscious))
            {
                Task.Delay(50);
                return;
            }
            if (!挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
            {
                CurrentAutoState = AutoSystem.SearchMonster;
                return;
            }
            if (CanAutoRun())
            {
                无效状态++;
                GameDirection 方向 = Compute.DirectionFromPoint(CurrentPosition, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                Point point = default(Point);
                if (CurrentMap.CanMove(point = Compute.GetNextPosition(CurrentPosition, 方向, 2)))
                {
                    CurrentDirection = Compute.DirectionFromPoint(CurrentPosition, point);
                    RunTo(挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                    CurrentAutoState = AutoSystem.判断距离;
                }
                else if (CanAutoRun())
                {
                    for (int i = 0; i < 4; i++)
                    {
                        Task.Delay(100);
                        if (!CanAutoRun() || SEngine.CurrentTime < RoamTime)
                        {
                            continue;
                        }
                        if (CanRun())
                        {
                            Point point2 = Compute.GetNextPosition(CurrentPosition, Compute.RandomDirection(), 2);
                            if (CurrentMap.CanMove(point2))
                            {
                                CurrentDirection = Compute.DirectionFromPoint(CurrentPosition, point2);
                                if (!Dead)
                                {
                                    RunTo(point2);
                                }
                            }
                        }
                        RoamTime = SEngine.CurrentTime.AddMilliseconds(RunInterval + SEngine.Random.Next(100));
                        return;
                    }
                }
                CurrentAutoState = AutoSystem.判断距离;
                方向 = Compute.TurnAround(方向, (SEngine.Random.Next(2) != 0) ? 1 : (-1));
            }
            Task.Delay(10);
            CurrentAutoState = AutoSystem.判断距离;
        }
        catch (Exception)
        {
        }
    }

    public void 判断距离()
    {
        try
        {
            if (!AutoBattle)
            {
                CurrentAutoState = AutoSystem.Disabled;
                return;
            }
            Task.Delay(50);
            if (GetDistance(挂机参数[挂机特殊分类.待攻击怪物]) < 1)
            {
                CurrentAutoState = AutoSystem.StartRoaming;
            }
            if (Job == GameObjectRace.Warrior || Job == GameObjectRace.DragonLance || Job == GameObjectRace.Assassin)
            {
                if (判断次数 >= 20)
                {
                    无效状态 = 0;
                    身边怪物数量 = 0;
                    拾取停止次数 = 0;
                    漫游次数 = 0;
                    判断次数 = 0;
                    foreach (KeyValuePair<byte, ItemInfo> item in Inventory)
                    {
                        if ((item.Value.Name == "随机传送石") | (item.Value.Name == "随机传送石(大)") | (item.Value.Name == "随机传送卷"))
                        {
                            if (挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
                            {
                                挂机参数.Remove(挂机特殊分类.待攻击怪物);
                            }
                            UserUseItem(1, item.Value.Position);
                            CurrentAutoState = AutoSystem.SearchMonster;
                        }
                    }
                }
                if (GetDistance(挂机参数[挂机特殊分类.待攻击怪物]) > 1)
                {
                    判断次数++;
                    CurrentAutoState = AutoSystem.GoToTarget;
                }
                else
                {
                    CurrentAutoState = AutoSystem.StartAttacking; //StartRoaming
                }
            }
            else
            {
                if (Job != GameObjectRace.Taoist && Job != GameObjectRace.Wizard && Job != GameObjectRace.Archer)
                {
                    return;
                }
                if (判断次数 >= 20)
                {
                    无效状态 = 0;
                    身边怪物数量 = 0;
                    拾取停止次数 = 0;
                    漫游次数 = 0;
                    判断次数 = 0;
                    foreach (KeyValuePair<byte, ItemInfo> item2 in Inventory)
                    {
                        if ((item2.Value.Name == "随机传送石") | (item2.Value.Name == "随机传送石(大)") | (item2.Value.Name == "随机传送卷"))
                        {
                            if (挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
                            {
                                挂机参数.Remove(挂机特殊分类.待攻击怪物);
                            }
                            UserUseItem(1, item2.Value.Position);
                            CurrentAutoState = AutoSystem.SearchMonster;
                        }
                    }
                }
                if (GetDistance(挂机参数[挂机特殊分类.待攻击怪物]) > 5)
                {
                    判断次数++;
                    CurrentAutoState = AutoSystem.GoToTarget;
                }
                else
                {
                    CurrentAutoState = AutoSystem.StartAttacking;
                }
            }
        }
        catch (Exception)
        {
        }
    }

    public void StartAttacking()
    {
        try
        {
            if (!AutoBattle)
            {
                CurrentAutoState = AutoSystem.Disabled;
            }
            else if (挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
            {
                漫游次数 = 0;
                判断次数 = 0;
                无效状态 = 0;
                Task.Delay(10);
                if (挂机参数[挂机特殊分类.待攻击怪物].CanBeHit)
                {
                    SelectObject(挂机参数[挂机特殊分类.待攻击怪物].ObjectID);
                    Task.Delay(50);
                    if (GetDistance(挂机参数[挂机特殊分类.待攻击怪物]) > CombatRange)
                    {
                        CurrentAutoState = AutoSystem.SearchMonster;
                        挂机参数.Remove(挂机特殊分类.待攻击怪物);
                        return;
                    }
                    if (Job == GameObjectRace.Taoist)
                    {
                        if (挂机技能框架.ContainsKey(挂机技能序列.道士召唤三))
                        {
                            if (Pets.Count == 0)
                            {
                                AttackWithSkill((ushort)挂机技能框架[挂机技能序列.道士召唤三], base.ActionID++, 0, CurrentPosition);
                            }
                        }
                        else if (挂机技能框架.ContainsKey(挂机技能序列.道士召唤二))
                        {
                            if (Pets.Count == 0)
                            {
                                AttackWithSkill((ushort)挂机技能框架[挂机技能序列.道士召唤二], base.ActionID++, 0, CurrentPosition);
                            }
                        }
                        else if (挂机技能框架.ContainsKey(挂机技能序列.道士召唤一) && Pets.Count == 0)
                        {
                            AttackWithSkill((ushort)挂机技能框架[挂机技能序列.道士召唤一], base.ActionID++, 0, CurrentPosition);
                        }
                    }
                    if (Job == GameObjectRace.Warrior)
                    {
                        if (!Skills.ContainsKey(1034) && 玩家自动攻击次数 == 0)
                        {
                            AttackWithSkill((ushort)挂机技能框架[挂机技能序列.默认技能], base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                        }
                        else if (Skills.ContainsKey(1034) && 玩家自动攻击次数 == 0)
                        {
                            玩家自动攻击次数++;
                            AttackWithSkill(1432, base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                        }
                        else if (Skills.ContainsKey(1033) && 玩家自动攻击次数 == 1)
                        {
                            玩家自动攻击次数++;
                            AttackWithSkill(1431, base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                        }
                        else
                        {
                            玩家自动攻击次数 = 0;
                        }
                    }
                    if (Job == GameObjectRace.DragonLance)
                    {
                        if (!Skills.ContainsKey(1203) && 玩家自动攻击次数 == 0)
                        {
                            AttackWithSkill((ushort)挂机技能框架[挂机技能序列.默认技能], base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                        }
                        else if (Skills.ContainsKey(1203) && 玩家自动攻击次数 == 0)
                        {
                            AttackWithSkill(1600, base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                            玩家自动攻击次数++;
                        }
                        else if (Skills.ContainsKey(1208) && 玩家自动攻击次数 == 1)
                        {
                            AttackWithSkill(1602, base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                            玩家自动攻击次数 = 0;
                        }
                        else
                        {
                            玩家自动攻击次数 = 0;
                            AttackWithSkill((ushort)挂机技能框架[挂机技能序列.默认技能], base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                        }
                    }
                    if (Job == GameObjectRace.Assassin)
                    {
                        if (!Skills.ContainsKey(1535) && 玩家自动攻击次数 == 0)
                        {
                            AttackWithSkill((ushort)挂机技能框架[挂机技能序列.默认技能], base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                        }
                        else if (Skills.ContainsKey(1531) && 玩家自动攻击次数 == 2)
                        {
                            AttackWithSkill(1930, base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                            玩家自动攻击次数 = 0;
                        }
                        else if (Skills.ContainsKey(1535) && 玩家自动攻击次数 == 0)
                        {
                            AttackWithSkill(1931, base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                            玩家自动攻击次数++;
                        }
                        else if (Skills.ContainsKey(1539) && 玩家自动攻击次数 == 1)
                        {
                            AttackWithSkill(1932, base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                            玩家自动攻击次数++;
                        }
                        else
                        {
                            玩家自动攻击次数 = 0;
                            AttackWithSkill((ushort)挂机技能框架[挂机技能序列.默认技能], base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                        }
                    }
                    else
                    {
                        AttackWithSkill((ushort)挂机技能框架[挂机技能序列.默认技能], base.ActionID++, 挂机参数[挂机特殊分类.待攻击怪物].ObjectID, 挂机参数[挂机特殊分类.待攻击怪物].CurrentPosition);
                    }
                    CurrentAutoState = AutoSystem.判断距离;
                }
                else
                {
                    挂机参数.Remove(挂机特殊分类.待攻击怪物);
                    CurrentAutoState = AutoSystem.AttackingComplete;
                }
            }
            else
            {
                CurrentAutoState = AutoSystem.SearchMonster;
            }
        }
        catch (Exception)
        {
        }
    }

    public void AttackingComplete()
    {
        try
        {
            if (!AutoBattle)
            {
                CurrentAutoState = AutoSystem.Disabled;
            }
            else if (开启自动拾取)
            {
                foreach (MapObject item in Neighbors.ToList())
                {
                    Task.Delay(50);
                    ItemObject 物品实例2 = item as ItemObject;
                    if (GetDistance(item) > 拾取范围 || item.ObjectType != GameObjectType.Item)
                    {
                        continue;
                    }
                    if (不捡取他人装备)
                    {
                        if (物品实例2.ItemAttribution.Contains(Character))
                        {
                            if (!挂机参数.ContainsKey(挂机特殊分类.待拾取物品))
                            {
                                挂机参数[挂机特殊分类.待拾取物品] = item;
                            }
                            else if (GetDistance(挂机参数[挂机特殊分类.待拾取物品]) > GetDistance(item))
                            {
                                挂机参数[挂机特殊分类.待拾取物品] = item;
                            }
                        }
                    }
                    else if (!挂机参数.ContainsKey(挂机特殊分类.待拾取物品))
                    {
                        挂机参数[挂机特殊分类.待拾取物品] = item;
                    }
                    else if (GetDistance(挂机参数[挂机特殊分类.待拾取物品]) > GetDistance(item))
                    {
                        挂机参数[挂机特殊分类.待拾取物品] = item;
                    }
                }
                if (挂机参数.ContainsKey(挂机特殊分类.待拾取物品))
                {
                    CurrentAutoState = AutoSystem.PickUpDrops;
                    拾取状态 = true;
                }
                else
                {
                    CurrentAutoState = AutoSystem.SearchMonster;
                }
            }
            else
            {
                CurrentAutoState = AutoSystem.SearchMonster;
            }
        }
        catch (Exception)
        {
        }
    }

    public void PickUpDrops()
    {
        if (!AutoBattle)
        {
            CurrentAutoState = AutoSystem.Disabled;
            return;
        }
        if (GetDistance(挂机参数[挂机特殊分类.待拾取物品].CurrentPosition) != 0 && 拾取状态)
        {
            Task.Delay(50);
            if (CurrentMap.CanMove(挂机参数[挂机特殊分类.待拾取物品].CurrentPosition))
            {
                拾取时坐标 = CurrentPosition;
                WalkTo(挂机参数[挂机特殊分类.待拾取物品].CurrentPosition);
                if (拾取时坐标 == CurrentPosition)
                {
                    拾取停止次数++;
                }
                else
                {
                    拾取停止次数 = 0;
                }
            }
            else if (判断点位类型(挂机参数[挂机特殊分类.待拾取物品].CurrentPosition) == 1)
            {
                foreach (MapObject item in CurrentMap[挂机参数[挂机特殊分类.待拾取物品].CurrentPosition].ToList())
                {
                    if (item.ObjectType == GameObjectType.Monster && GetRelationship(item) == GameObjectRelationship.Hostile)
                    {
                        挂机参数[挂机特殊分类.待攻击怪物] = item;
                        CurrentAutoState = AutoSystem.判断距离;
                        拾取状态 = false;
                        return;
                    }
                }
            }
            else
            {
                if (判断点位类型(挂机参数[挂机特殊分类.待拾取物品].CurrentPosition) == 2)
                {
                    CurrentAutoState = AutoSystem.SearchMonster;
                    拾取状态 = false;
                    return;
                }
                if ((判断点位类型(挂机参数[挂机特殊分类.待拾取物品].CurrentPosition) == 3 || 判断点位类型(挂机参数[挂机特殊分类.待拾取物品].CurrentPosition) == 0) && CanAutoRun())
                {
                    for (int i = 0; i < 4; i++)
                    {
                        Task.Delay(100);
                        if (!CanAutoRun() || SEngine.CurrentTime < RoamTime)
                        {
                            continue;
                        }
                        if (CanRun())
                        {
                            Point point = Compute.GetNextPosition(CurrentPosition, Compute.RandomDirection(), 2);
                            if (CurrentMap.CanMove(point))
                            {
                                CurrentDirection = Compute.DirectionFromPoint(CurrentPosition, point);
                                if (!Dead)
                                {
                                    RunTo(point);
                                }
                            }
                        }
                        RoamTime = SEngine.CurrentTime.AddMilliseconds(RunInterval + SEngine.Random.Next(100));
                        return;
                    }
                }
            }
        }
        else
        {
            挂机参数.Remove(挂机特殊分类.待拾取物品);
            拾取状态 = false;
        }
        CurrentAutoState = AutoSystem.AttackingComplete;
    }

    public void StartRoaming()
    {
        if (!AutoBattle)
        {
            CurrentAutoState = AutoSystem.Disabled;
            return;
        }
        if (CheckStatus(GameObjectState.BusyGreen | GameObjectState.Paralyzed | GameObjectState.Unconscious))
        {
            Task.Delay(50);
            return;
        }
        无效状态++;
        if (漫游次数 >= 50)
        {
            无效状态 = 0;
            身边怪物数量 = 0;
            拾取停止次数 = 0;
            漫游次数 = 0;
            判断次数 = 0;
            foreach (KeyValuePair<byte, ItemInfo> item in Inventory)
            {
                if ((item.Value.Name == "随机传送石") | (item.Value.Name == "随机传送石(大)") | (item.Value.Name == "随机传送卷"))
                {
                    if (挂机参数.ContainsKey(挂机特殊分类.待攻击怪物))
                    {
                        挂机参数.Remove(挂机特殊分类.待攻击怪物);
                    }
                    UserUseItem(1, item.Value.Position);
                    CurrentAutoState = AutoSystem.SearchMonster;
                }
            }
        }
        for (int i = 0; i < 4; i++)
        {
            Task.Delay(200);
            if (!CanAutoRun() || SEngine.CurrentTime < RoamTime)
            {
                continue;
            }
            if (CanRun())
            {
                Point point = Compute.GetNextPosition(CurrentPosition, Compute.RandomDirection(), 2);
                if (CurrentMap.CanMove(point))
                {
                    CurrentDirection = Compute.DirectionFromPoint(CurrentPosition, point);
                    if (!Dead)
                    {
                        漫游次数++;
                        RunTo(point);
                    }
                }
            }
            RoamTime = SEngine.CurrentTime.AddMilliseconds(RunInterval + SEngine.Random.Next(100));
            CurrentAutoState = AutoSystem.RoamingComplete;
            SearchMonster();
            break;
        }
    }

    public void 自动战斗关闭(int 自动战斗)
    {
    }
    #endregion

    #region Mining
    public void UserTryDigMine(Point location)
    {
        // TODO: Add mine area
        if (CurrentMap.MapInfo.MineMap == 0) return;

        //var weapon = GetWeapon();
        // TODO: Check Weapon
        if (Compute.GetDistance(CurrentPosition, location) > 1) return;

        if (!CurrentMap.ValidPoint(location)) return;
        if (!CurrentMap.CanMove(location))
        {
            //if (weapon.S.Shape == 19)
            {
                if (DigUpMine(location))
                {
                    SendPacket(new ObjectMineSuccess
                    {
                        ObjectID = ObjectID,
                        Location = location,
                        ActionTime = (ushort)Compute.CalcAttackSpeed(this[Stat.AttackSpeed])
                    });
                }


                //WalkTime = SEngine.CurrentTime.AddMilliseconds(WalkInterval);
                //BusyTime = SEngine.CurrentTime.AddMilliseconds(WalkInterval);

                HealthRegenTime = HealthRegenTime.AddMilliseconds(30);
                ManaRegenTime = ManaRegenTime.AddMilliseconds(30);

                //SpellTick -= 50;
                //SpellTick = Math.Max(0, SpellTick);
                //PerHealth -= 2;
                //PerSpell -= 2;
            }
        }
    }

    private bool DigUpMine(Point location)
    {
        var flag = false;

        if (CurrentMap.Mines == null) return false;

        var mine = CurrentMap.GetMine(location);
        if (mine != null)
        {
            if (mine.Mine is MineType.Mine or MineType.Mine2 or MineType.Mine3)
            {
                if (mine.MineCount > 0)
                {
                    mine.MineCount--;
                    if (SEngine.Random.Next(4) == 0)
                    {
                        /*var ev2 = PEnvir.GetEvent(CX, CY);
                        if (ev2 == null)
                        {
                            ev2 = new PileStones(PEnvir, CX, CY, 5 * Time.Minute);
                            EventManager.Instance.AddEvent(ev2);
                        }
                        else
                        {
                            if (ev2.EventType == EventType.PileStones)
                                ((PileStones)ev2).EnlargePile();
                        }*/

                        if (SEngine.Random.Next(12) == 0)
                        {
                            if (mine.Mine == MineType.Mine) GetRandomMineral();
                            else if (mine.Mine == MineType.Mine2) GetRandomGems();
                            else GetRandomMineral3();
                        }

                        DamageWeapon(SEngine.Random.Next(5, 20));
                        flag = true;
                    }
                }
                else
                {
                    if (SEngine.CurrentTime > mine.RefillTime)
                        mine.Refill();
                }
            }
        }

        return flag;
    }

    private void GetRandomMineral()
    {
        if (IsEnoughBag)
        {
            var iname = string.Empty;
            switch (SEngine.Random.Next(120))
            {
                case 1 or 2: iname = Config.GoldStoneName; break;
                case >= 3 and <= 20: iname = Config.SilverStoneName; break;
                case >= 21 and <= 45: iname = Config.IronStoneName; break;
                case >= 46 and <= 56: iname = Config.BlackIronStoneName; break;
                default: iname = Config.CopperStoneName; break;
            }

            if (!string.IsNullOrEmpty(iname))
            {
                AddItemByName(iname + GetPurity().ToString(), 1, 1);
            }
        }
    }

    private void GetRandomGems()
    {
        if (IsEnoughBag)
        {
            var iname = string.Empty;
            switch (SEngine.Random.Next(120))
            {
                case 1 or 2: iname = Config.Gem1StoneName; break;
                case >= 3 and <= 20: iname = Config.Gem2StoneName; break;
                case >= 21 and <= 45: iname = Config.Gem4StoneName; break;
                default: iname = Config.Gem3StoneName; break;
            }

            if (!string.IsNullOrEmpty(iname))
            {
                AddItemByName(iname + GetPurity().ToString(), 1, 1);
                /*if (UserEngine.CopyToUserItem(iname, out var ui))
                {
                    ui.Dura = (ushort)GetPurity();
                    ItemList.Add(ui);
                    WeightChanged();
                    SendAddItem(ui);
                }*/
            }
        }
    }

    private void GetRandomMineral3()
    {
        if (IsEnoughBag)
        {
            var iname = string.Empty;
            switch (SEngine.Random.Next(240))
            {
                case >= 1 and <= 6: iname = Config.GoldStoneName; break;
                case >= 7 and <= 30: iname = Config.SilverStoneName; break;
                case >= 31 and <= 66: iname = Config.IronStoneName; break;
                case >= 67 and <= 91: iname = Config.BlackIronStoneName; break;
                case >= 92 and <= 131: iname = Config.CopperStoneName; break;

                case >= 132 and <= 137: iname = Config.Gem1StoneName; break;
                case >= 138 and <= 161: iname = Config.Gem2StoneName; break;
                case >= 162 and <= 197: iname = Config.Gem4StoneName; break;

                default: iname = Config.Gem3StoneName; break;
            }

            if (!string.IsNullOrEmpty(iname))
            {
                AddItemByName(iname + GetPurity().ToString(), 1, 1);
                /*if (UserEngine.CopyToUserItem(iname, out var ui))
                {
                    ui.Dura = (ushort)GetPurity();
                    ItemList.Add(ui);
                    WeightChanged();
                    SendAddItem(ui);
                }*/
            }
        }
    }

    private int GetPurity()
    {
        var n = 0;
        if (ObjectType == GameObjectType.Player)
        {
            if (Equipment.TryGetValue(0, out var v) && v.Dura.V == 0)
                n = SEngine.Random.Next(1, 6);
            else
            {
                n = SEngine.Random.Next(3, 16);
                if (SEngine.Random.Next(20) == 0) n += SEngine.Random.Next(10);
            }

            //if (ApprovalMode == 1)
            //    n = Math.Min(10, n);
        }
        else
        {
            n = SEngine.Random.Next(3, 14);
            if (SEngine.Random.Next(20) == 0) n += SEngine.Random.Next(10);
        }

        return Math.Min(6, n);
    } 
    #endregion


    #region Descriptions
    public byte[] 玩家属性描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        for (byte b = 0; b <= 100; b = (byte)(b + 1))
        {
            if (Enum.TryParse<Stat>(b.ToString(), out var result) && Enum.IsDefined(typeof(Stat), result))
            {
                binaryWriter.Write(b);
                binaryWriter.Write(this[result]);
                binaryWriter.Write(new byte[2]);
            }
            else
            {
                binaryWriter.Write(b);
                binaryWriter.Write(new byte[6]);
            }
        }
        return memoryStream.ToArray();
    }

    public byte[] 全部技能描述()
    {
        using var ms = new MemoryStream();
        using var writer = new BinaryWriter(ms);
        foreach (var skill in Skills.Values)
        {
            writer.Write(skill.ID.V);
            writer.Write(skill.Experience.V);
            writer.Write(skill.InscriptionID);
            writer.Write(skill.Level.V);
        }
        return ms.ToArray();
    }

    public byte[] 全部冷却描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        foreach (KeyValuePair<int, DateTime> item in Cooldowns)
        {
            if (!(SEngine.CurrentTime >= item.Value))
            {
                binaryWriter.Write(item.Key);
                binaryWriter.Write((int)(item.Value - SEngine.CurrentTime).TotalMilliseconds);
            }
        }
        return memoryStream.ToArray();
    }

    public byte[] 全部Buff描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        foreach (BuffInfo value in Buffs.Values)
        {
            binaryWriter.Write(value.ID.V);
            binaryWriter.Write((int)value.ID.V);
            binaryWriter.Write(value.当前层数.V);
            binaryWriter.Write((int)value.RemainingTime.V.TotalMilliseconds);
            binaryWriter.Write((int)value.Duration.V.TotalMilliseconds);
        }
        return memoryStream.ToArray();
    }

    public byte[] 快捷栏位描述()
    {
        using var ms = new MemoryStream();
        using var writer = new BinaryWriter(ms);
        foreach (KeyValuePair<byte, SkillInfo> item in HotKeys)
        {
            writer.Write(item.Key);
            writer.Write(item.Value?.ID.V ?? 0);
            writer.Write(value: false);
        }
        return ms.ToArray();
    }

    public byte[] 全部货币描述()
    {
        using var ms = new MemoryStream();
        using var writer = new BinaryWriter(ms);
        for (int i = 0; i <= 19; i++)
        {
            writer.Seek(i * 48, SeekOrigin.Begin);
            writer.Write(Character.Currencies[(CurrencyType)i]);
        }
        return ms.ToArray();
    }

    public byte[] 全部称号描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        binaryWriter.Write(CurrentTitle);
        binaryWriter.Write((byte)Titles.Count);
        foreach (KeyValuePair<byte, DateTime> item in Titles)
        {
            binaryWriter.Write(item.Key);
            binaryWriter.Write((item.Value == DateTime.MaxValue) ? uint.MaxValue : ((uint)(item.Value - SEngine.CurrentTime).TotalMinutes));
        }
        return memoryStream.ToArray();
    }

    public byte[] 全部物品描述()
    {
        using var ms = new MemoryStream();
        using var writer = new BinaryWriter(ms);

        foreach (var item in Equipment.Values)
        {
            if (item != null)
                writer.Write(item.ToArray());
        }
        foreach (var item in Inventory.Values)
        {
            if (item != null)
                writer.Write(item.ToArray());
        }
        foreach (var item in Storage.Values)
        {
            if (item != null)
                writer.Write(item.ToArray());
        }
        foreach (var item in 角色资源背包.Values)
        {
            if (item != null)
                writer.Write(item.ToArray());
        }
        return ms.ToArray();
    }

    public byte[] 全部邮件描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        binaryWriter.Write((ushort)Mail.Count);
        foreach (MailInfo item in Mail)
        {
            binaryWriter.Write(item.MailMessageDescription());
        }
        return memoryStream.ToArray();
    }

    public byte[] 背包物品描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        foreach (ItemInfo item in Inventory.Values.ToList())
        {
            if (item != null)
            {
                binaryWriter.Write(item.ToArray());
            }
        }
        return memoryStream.ToArray();
    }

    public byte[] 仓库物品描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        foreach (ItemInfo item in Storage.Values.ToList())
        {
            if (item != null)
            {
                binaryWriter.Write(item.ToArray());
            }
        }
        return memoryStream.ToArray();
    }

    public byte[] 装备物品描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        foreach (EquipmentInfo item in Equipment.Values.ToList())
        {
            if (item != null)
            {
                binaryWriter.Write(item.ToArray());
            }
        }
        return memoryStream.ToArray();
    }

    public byte[] 玛法特权描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        binaryWriter.Write(Character.预定特权.V);
        binaryWriter.Write(CurrentDegree);
        binaryWriter.Write((CurrentDegree != 0) ? Compute.TimeSeconds(本期日期) : 0);
        binaryWriter.Write((CurrentDegree != 0) ? 本期记录 : 0u);
        binaryWriter.Write(PreviousDegree);
        binaryWriter.Write((PreviousDegree != 0) ? Compute.TimeSeconds(上期日期) : 0);
        binaryWriter.Write((PreviousDegree != 0) ? 上期记录 : 0u);
        binaryWriter.Write((byte)5);
        for (byte b = 1; b <= 5; b = (byte)(b + 1))
        {
            binaryWriter.Write(b);
            binaryWriter.Write(剩余特权.TryGetValue(b, out var v) ? v : 0);
        }
        return memoryStream.ToArray();
    }

    public byte[] 社交列表描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        binaryWriter.Write((byte)FriendList.Count);
        binaryWriter.Write((byte)(偶像列表.Count + 仇人列表.Count));
        foreach (CharacterInfo item in 偶像列表)
        {
            binaryWriter.Write(item.Index.V);
            byte[] array = new byte[69];
            byte[] array2 = item.NameDescription();
            Buffer.BlockCopy(array2, 0, array, 0, array2.Length);
            binaryWriter.Write(array);
            binaryWriter.Write((byte)item.Job.V);
            binaryWriter.Write((byte)item.Gender.V);
            binaryWriter.Write((byte)((item.Connection == null) ? 3u : 0u));
            binaryWriter.Write(0u);
            binaryWriter.Write((byte)0);
            binaryWriter.Write((byte)(FriendList.Contains(item) ? 1u : 0u));
        }
        foreach (CharacterInfo item2 in 仇人列表)
        {
            binaryWriter.Write(item2.Index.V);
            byte[] array3 = new byte[69];
            byte[] array4 = item2.NameDescription();
            Buffer.BlockCopy(array4, 0, array3, 0, array4.Length);
            binaryWriter.Write(array3);
            binaryWriter.Write((byte)item2.Job.V);
            binaryWriter.Write((byte)item2.Gender.V);
            binaryWriter.Write((byte)((item2.Connection == null) ? 3u : 0u));
            binaryWriter.Write(0u);
            binaryWriter.Write((byte)21);
            binaryWriter.Write((byte)0);
        }
        return memoryStream.ToArray();
    }

    public byte[] 社交屏蔽描述()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        binaryWriter.Write((byte)黑名单表.Count);
        foreach (CharacterInfo item in 黑名单表)
        {
            binaryWriter.Write(item.Index.V);
        }
        return memoryStream.ToArray();
    }

    public byte[] GetMountData()
    {
        using MemoryStream memoryStream = new MemoryStream();
        using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
        foreach (uint item in Character.Mounts)
        {
            binaryWriter.Write(item);
        }
        return memoryStream.ToArray();
    }
    #endregion
}
